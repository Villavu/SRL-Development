{$DEFINE SRL_TIME_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL/utils.simba}
{$ENDIF}

(*
Time
=======
Time related methods
*)

(*
TTimeFormat
~~~~~~~~~~~~
.. pascal::
  type TTimeFormat = (Time_Formal, Time_Short, Time_Abbrev, Time_Bare, Time_FStop, Time_Formal_Long);

Formats used when converting time to string.
*)
type
  TTimeFormat = (Time_Formal, Time_Short, Time_Abbrev, Time_Bare, Time_FStop, Time_Formal_Long);

const
  ONE_SECOND     = 1000;
  ONE_MINUTE     = ONE_SECOND * 60;
  FIVE_MINUTES   = ONE_MINUTE * 5;
  THIRTY_MINUTES = ONE_MINUTE * 30;
  ONE_HOUR       = ONE_MINUTE * 60;
  ONE_DAY        = ONE_HOUR   * 24;
  
  
(*
srl.MsToTime
~~~~~~~~~~~~~
.. pascal::
  function TSRL.MsToTime(const MS: UInt64; const Format: TTimeFormat): String; constref;

Converts milliseconds to a string following the given time-format.
*)
function TSRL.MsToTime(const MS: UInt64; const Format: TTimeFormat): String; constref;
var
  STA: array [0..5] of TVariantArray;
  Time: TIntegerArray;
  i, t, tl: Integer;
begin
  Result := '';

  if (Format = TIME_FORMAL_LONG) then
  begin
    tl := 7;
    t := 6;
    SetLength(Time, tl);
    ConvertTime64(MS, Time[0], Time[1], Time[2], Time[3], Time[4], Time[5], Time[6]);
  end else begin
    tl := 3;
    t := 2;
    SetLength(Time, tl);
    ConvertTime(MS, Time[0], Time[1], Time[2]);
  end;

  STA[Ord(Time_Formal)] := [' Hours, ', ' Minutes and ', ' Seconds', False, 0];
  STA[Ord(Time_Short)]  := ['h ', 'm ', 's', False, 2];
  STA[Ord(Time_Abbrev)] := [' hr ', ' min ', ' sec', False, 0];
  STA[Ord(Time_Bare)]   := [':', ':', '', True, 2];
  STA[Ord(Time_FStop)]  := ['.', '.', '', True, 2];
  STA[Ord(Time_Formal_Long)] := [' Years, ', ' Months, ', ' Weeks, ', ' Days, ', ' Hours, ', ' Minutes and ', ' Seconds', False, 0];

  for i := 0 to t do
    if (Time[i] > 0) or (STA[Ord(Format)][tl]) or (i = t) then
      Result += PadZ(IntToStr(Time[i]), STA[Ord(Format)][tl+1]) + STA[Ord(Format)][i];
end;
  
(*
srl.TimeRunning
~~~~~~~~~~~~~~~~
.. pascal::
  function TSRL.TimeRunning(TheType: TTimeFormat = Time_Formal_Long): String; constref;

Returns time the script has been running as a string with the given time-format.
*)
function TSRL.TimeRunning(TheType: TTimeFormat = Time_Formal_Long): String; constref;
begin
  Result := MsToTime(GetTimeRunning(), TheType);
end;

function TSRL.TimeStamp: String;
var
  Time: Int64;
  Hours, Mins, Secs, Millis: Int32;
begin
  Time := GetTimeRunning();

  Hours  := Time div 3600000;
  Time   := Time mod 3600000;
  Mins   := Time div 60000;
  Time   := Time mod 60000;
  Secs   := Time div 1000;
  Millis := Time mod 1000;

  Result := Format('[%.2d:%.2d:%.2d:%.3d]', [Hours, Mins, Secs, Millis]);
end;

(*
TCountDown
~~~~~~~~~~
A neat and simple timer type.

Example:

.. code-block:: pascal

  myTimer.Init(3000); //3000ms
  while not myTimer.IsFinished() do
    {do something};
  
  myTimer.Restart(Random(-200,200)); //3000 +/- 200ms
  while not myTimer.IsFinished() do
    {do something};
*)
type
  TCountDown = record
    Length: UInt64;
    Timeout: UInt64;
    Paused: UInt64;
  end;

procedure TCountDown.Setup(Time: UInt32);
begin
  Self.Length  := Time;
  Self.Timeout := GetTickCount();
  Self.Paused := 0;
end;

procedure TCountDown.Init(Time: UInt32);
begin
  Self.Length  := Time;
  Self.Timeout := GetTickCount() + Time;
  Self.Paused := 0;
end;

procedure TCountDown.Restart(Rand: Int32 = 0);
begin
  if Self.Length > 0 then
  begin
    Self.Paused := 0;
    Self.Timeout := GetTickCount() + (Length + Rand);
  end;
end;

procedure TCountDown.Extend(Time: UInt32);
begin
  Self.Timeout := Self.Timeout + Time;
end;

function TCountDown.TimeRemaining: UInt32;
begin
  if Self.IsPaused() then
    Result := Max(Self.Timeout - Self.Paused, 0)
  else
    Result := Max(Self.Timeout - GetTickCount(), 0);
end;

function TCountDown.IsFinished: Boolean;
begin
  Result := (Self.Timeout > 0) and (Self.Paused = 0) and (TimeRemaining() = 0);
end;

function TCountDown.IsPaused: Boolean;
begin
  Result := Self.Paused > 0;
end;

procedure TCountDown.Pause;
begin
  if not Self.IsPaused() then
    Self.Paused := GetTickCount();
end;

procedure TCountDown.Resume;
begin
  if Self.IsPaused() then
  begin
    Self.Timeout := Self.Timeout + (GetTickCount() - Self.Paused);
    Self.Paused := 0;
  end;
end;

(*
TStopWatch
~~~~~~~~~~
A neat and simple stopwatch type.

Example
-------

  var StopWatch: TStopWatch;

  StopWatch.Start();
  Wait(1000);
  WriteLn(StopWatch.ElapsedTime()); // ~1000
*)
type
  TStopwatch = record
    StartTime: UInt64;
    PausedTime: UInt64;
    TotalPausedTime: UInt64;
  end;

procedure TStopWatch.Start;
begin
  if Self.PausedTime > 0 then
  begin
    Self.TotalPausedTime += GetTickCount() - Self.PausedTime;
    Self.PausedTime := 0;
  end else
    Self.StartTime := GetTickCount();
end;

procedure TStopWatch.Resume;
begin
  Self.Start();
end;

procedure TStopWatch.Pause;
begin
  Self.PausedTime := GetTickCount();
end;

procedure TStopWatch.Reset;
begin
  Self.StartTime := GetTickCount();
  Self.PausedTime := 0;
  Self.TotalPausedTime := 0;
end;

function TStopWatch.ElapsedTime: UInt64;
begin
  if Self.PausedTime > 0 then
    Result := (GetTickCount() - Self.StartTime) - (GetTickCount() - Self.PausedTime)
  else
    Result := (GetTickCount() - Self.StartTime) - Self.TotalPausedTime;
end;

function TStopWatch.IsPaused: Boolean;
begin
  Result := Self.PausedTime > 0;
end;

{$IFDEF WINDOWS}
function PerformanceTimer(): Double;
var
  frequency,counter: ^UInt64;
  function QPF(F: ^UInt64): LongBool; static; external 'QueryPerformanceFrequency@Kernel32.dll '+{$IFDEF CPU386}'stdcall'{$ELSE}'win64'{$ENDIF};
  function QPC(C: ^UInt64): LongBool; static; external 'QueryPerformanceCounter@Kernel32.dll '+{$IFDEF CPU386}'stdcall'{$ELSE}'win64'{$ENDIF};
begin
  frequency := GetMem(SizeOf(UInt64)); // at least qword aligned
  counter   := GetMem(SizeOf(UInt64)); // ...

  if QPF(frequency) and QPC(counter) then
    Result := counter^ / frequency^ * 1000
  else
    Result := GetTickCount();

  FreeMem(frequency);
  FreeMem(counter);
end;
{$ELSE}
function PerformanceTimer(): Double;
begin
  Result := GetTickCount();
end;
{$ENDIF}
