(*
Mouse
=====
Methods to interact with the mouse.
*)

{$DEFINE SRL_MOUSE_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL/utils.simba}
{$ENDIF}

{.$DEFINE SRL_DEBUG_MOUSE} // Enable me to record mouse path + clicks. Will be displayed when script terminates.

{$IFDEF SIMBAHEADLESS}
  {$UNDEF SRL_DEBUG_MOUSE}
{$ENDIF}

{$loadlib ../plugins/libasyncmouse}

const
  MOUSE_MOVE = -1;

(*
type EMouseDistribution
~~~~~~~~~~~~~~~~~~~~~~~

The available distributions used to generate a point in a box.

.. pascal::
  EMouseDistribution = (
    MOUSE_DISTRIBUTION_DEFAULT, // Use Mouse.Distribution
    MOUSE_DISTRIBUTION_RANDOM,  // Completely random point
    MOUSE_DISTRIBUTION_GAUSS,   // Weighted towards the center
    MOUSE_DISTRIBUTION_SKEWED,  // Weighted torwards current mouse position
    MOUSE_DISTRIBUTION_ROWP     // Weighted torwards current mouse position but more "rounded" compared to MOUSE_DISTRIBUTION_SKEWED
  );
*)
type
  EMouseDistribution = (
    MOUSE_DISTRIBUTION_DEFAULT,
    MOUSE_DISTRIBUTION_RANDOM,
    MOUSE_DISTRIBUTION_GAUSS,
    MOUSE_DISTRIBUTION_SKEWED,
    MOUSE_DISTRIBUTION_ROWP
  );

(*
type TMouse
~~~~~~~~~~~
.. pascal::

  TMouse = record(TSRLBaseRecord)
    Speed: Double;                     // Overall mouse speed (Default: 12)
    Gravity, Wind: Double;             // Gravity & Wind for generating mouse path (Default: 9 & 5)
    Distribution: EMouseDistribution;  // Default distribution to use (Default: MOUSE_DISTRIBUTION_ROWP)
    MissChance: Double;                // Percentage chance to "Miss" the mouse (Default: 10)
    IdleInterval: Double;              // Distance to travel before calling Mouse.Idle() (Default: 0)
    IdleProgress: Double;
    IdleGoal: Double;
    OnMoving: TMouseMovingEvent;       // Callback while mouse is being moved
    OnTeleport: TMouseTeleportEvent;   // Callback when mouse is teleported
  end;
*)
type
  PMouse = ^TMouse;

  TMouseMovingEvent = procedure(Sender: PMouse; var X, Y: Double; var Done: Boolean);
  TMouseTeleportEvent = procedure(Sender: PMouse; X, Y: Int32);

  TMouse = record(TSRLBaseRecord)
    Speed: Int32;
    Gravity, Wind: Double;
    Distribution: EMouseDistribution;
    MissChance: Double;
    IdleInterval: Double;
    IdleProgress: Double;
    IdleGoal: Double;
    OnMoving: TMouseMovingEvent;
    OnTeleport: TMouseTeleportEvent;

    {$IFDEF SRL_DEBUG_MOUSE}
    DebugBitmap: TMufasaBitmap;
    {$ENDIF}
  end;

{$IFDEF SRL_DEBUG_MOUSE}
procedure TMouse._Debug;
begin
  if (Self.DebugBitmap = nil) then
    Exit;

  ShowBitmap(DebugBitmap);

  DebugBitmap.Free();
end;

procedure TMouse._DebugCallback(Sender: PMouse; X, Y: Int32); static;
begin
  if (Sender^.DebugBitmap = nil) then
  begin
    Sender^.DebugBitmap := GetMufasaBitmap(BitmapFromClient(GetClientBounds()));
    Sender^.DebugBitmap.DrawClear(0);

    AddOnTerminate(@Sender^._Debug);
  end;

  if Sender^.DebugBitmap.PointInBitmap(X, Y) and (Sender^.DebugBitmap.GetPixel(X, Y) <> $0000FF) then
    Sender^.DebugBitmap.SetPixel(X, Y, $00FF00);
end;
{$ENDIF}

(*
Mouse.Setup
~~~~~~~~~~~
.. pascal:: procedure TMouse.Setup;

Initializes mouse variables.

.. note:: This is automatically called on the **Mouse** variable.
*)
procedure TMouse.Setup;
begin
  Self.Name := 'Mouse';
  Self.Speed := 12;
  Self.Gravity := 9;
  Self.Wind := 5;
  Self.MissChance := 15;
  Self.Distribution := MOUSE_DISTRIBUTION_ROWP;

  {$IFDEF SRL_DEBUG_MOUSE}
  Self.OnTeleport := @Self._DebugCallback;
  {$ENDIF}
end;

(*
Mouse.Teleport
~~~~~~~~~~~~~~
.. pascal:: procedure TMouse.Teleport(X, Y: Int32);

Teleport the mouse to the desired X,Y coordinates.

Example
-------

  Mouse.Teleport(50, 50);
*)
procedure TMouse.Teleport(X, Y: Int32); overload;
begin
  if (@Self.OnTeleport <> nil) then
    Self.OnTeleport(@Self, X, Y);

  MoveMouse(X, Y);
end;

(*
Mouse.Teleport
~~~~~~~~~~~~~~
.. pascal:: procedure TMouse.Teleport(P: TPoint);

Teleport the mouse to the desired point.

Example
-------

  Mouse.Teleport(50, 50);
*)
procedure TMouse.Teleport(P: TPoint); overload;
begin
  Self.Teleport(P.X, P.Y);
end;

(*
Mouse.Position
~~~~~~~~~~~~~~
.. pascal:: function TMouse.Position: TPoint;

Returns the mouse current position.

Example
-------

  var P: TPoint;

  P := Mouse.Position();

  WriteLn('X: ', P.X);
  WriteLn('Y: ', P.Y);
*)
function TMouse.Position: TPoint;
begin
  GetMousePos(Result.X, Result.Y);
end;

(*
Mouse.Hold
~~~~~~~~~~
.. pascal:: procedure TMouse.Hold(Button: Int32);

Holds the desired mouse button down. The button will continue to be held down until `Mouse.Release` is called.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

Example
-------

  Mouse.Hold(MOUSE_LEFT); // The mouse is now holding down left click.
*)
procedure TMouse.Hold(Button: Int32);
begin
  with Self.Position() do
    HoldMouse(X, Y, Button);
end;

(*
Mouse.Release
~~~~~~~~~~~~~
.. pascal:: procedure TMouse.Release(Button: Int32);

Releases the desired mouse button which has been previously held.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

Example
-------

  Mouse.Release(MOUSE_LEFT); // The mouse is no holding left click.
*)
procedure TMouse.Release(Button: Int32);
begin
  with Self.Position() do
    ReleaseMouse(X, Y, Button);
end;

(*
Mouse.WindMouse
~~~~~~~~~~~~~~~
.. pascal:: procedure TMouse.Release(Button: Int32);

The internal algorithm used by **Mouse.Move** to move the mouse in a human'ish way.

Credit: BenLand100 (https://github.com/BenLand100/SMART/blob/master/src/EventNazi.java#L201)
*)
procedure TMouse.WindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait, maxStep, targetArea: Double);
const
  SQRT_3: Double := sqrt(3);
  SQRT_5: Double := sqrt(5);
var
  x, y: Double;
  veloX, veloY, windX, windY, veloMag, randomDist, step, idle: Double;
  traveledDistance, remainingDistance: Double;
  Countdown: TCountDown;
  Finished: Boolean;
begin
  Countdown.Init(15000);

  x := xs;
  y := ys;

  while True do
  begin
    if Countdown.IsFinished() then
      Self.Fatal('Something went wrong. Mouse movement did not complete in 15 seconds.');

    if (@Self.OnMoving <> nil) then
    begin
      Self.OnMoving(@Self, xe, ye, Finished);
      if Finished then
        Exit;
    end;

    traveledDistance := Hypot(x - xs, y - ys);
    remainingDistance := Hypot(x - xe, y - ye);
    if (remainingDistance <= 1) then
      Break;

    wind := Min(wind, remainingDistance);
    windX := windX / SQRT_3 + (Random(Round(wind) * 2 + 1) - wind) / SQRT_5;
    windY := windY / SQRT_3 + (Random(Round(wind) * 2 + 1) - wind) / SQRT_5;

    if (remainingDistance < targetArea) then
      step := (remainingDistance / 2) + (Random() * 6 - 3)
    else
    if (traveledDistance < targetArea) then
    begin
      if (traveledDistance < 3) then
        traveledDistance := 10 * Random();

      step := traveledDistance * (1 + Random() * 3);
    end else
      step := maxStep;

    step := Min(step, maxStep);
    if (step < 3) then
      step := 3 + (Random() * 3);

    veloX := veloX + windX;
    veloY := veloY + windY;
    veloX := veloX + gravity * (xe - x) / remainingDistance;
    veloY := veloY + gravity * (ye - y) / remainingDistance;

    if (Hypot(veloX, veloY) > step) then
    begin
      randomDist := step / 3.0 + (step / 2 * Random());

      veloMag := sqrt(veloX * veloX + veloY * veloY);
      veloX := (veloX / veloMag) * randomDist;
      veloY := (veloY / veloMag) * randomDist;
    end;

    idle := (maxWait - minWait) * (Hypot(veloX, veloY) / maxStep) + minWait;

    x := x + veloX;
    y := y + veloY;

    Self.Teleport(Round(x), Round(y));

    Wait(Round(idle));
  end;

  Self.Teleport(Round(xe), Round(ye));
end;

(*
Mouse.Idle
~~~~~~~~~~
.. pascal:: procedure TMouse.Idle;

When **IdleInterval** is reached this is called. Override to change behavior.

 - An **IdleInterval** of **1.0** equals to the distance between the top left and bottom right of the client.
 - Assuming the client dimensions are 500,500 the distance between (0,0) and (500,500) is ~700.
   With an **IdleInterval** of **2.0** this would automatically be called every time the mouse has travelled ~1400 pixels.
*)
procedure TMouse.Idle;
var
  T: UInt64 := SRL.TruncatedGauss(1000, 20000);
begin
  Self.DebugLn('Idle: ' + ToString(T) + ' ms');

  Wait(T);
end;

(*
Mouse.Move
~~~~~~~~~~
.. pascal:: procedure TMouse.Move(Destination: TPoint);

Moves the mouse to the desired point.

Example
-------

  var P: TPoint;

  P.X := 50;
  P.Y := 50;

  Mouse.Move(P); // The mouse is now at 50,50
*)
procedure TMouse.Move(Destination: TPoint); overload;
var
  Start: TPoint;
  W, H: Int32;
  RandSpeed, Exponential: Double;
begin
  Start := Self.Position();

  if (Self.IdleInterval > 0) then
  begin
    GetClientDimensions(W, H);

    if (W > 0) and (H > 0) then
    begin
      if Self.IdleProgress = 0 then
        Self.IdleGoal := SRL.GaussRand(Self.IdleInterval, Self.IdleInterval * 0.20)
      else
      if Self.IdleProgress > Self.IdleGoal then
      begin
        Self.Idle();
        Self.IdleProgress := 0;

        if SRL.Dice(10) then // rarely throw a short interval in
          Self.IdleGoal := SRL.GaussRand(Self.IdleInterval / 2, Self.IdleInterval / 2 * 0.20)
        else
          Self.IdleGoal := SRL.GaussRand(Self.IdleInterval, Self.IdleInterval * 0.20);
      end;

      Self.IdleProgress += Hypot(Start.X - Destination.X, Start.Y - Destination.Y) / Hypot(W, H);
    end;
  end;

  if SRL.Dice(Self.MissChance) then
    Start := Self.Miss(Destination);

  // Further the distance the faster we move.
  Exponential := Power(Hypot(Start.X - Destination.X, Start.Y - Destination.Y), 0.33) / 10;

  RandSpeed := SRL.TruncatedGauss(Self.Speed, Self.Speed * 1.5);
  RandSpeed *= Exponential;
  RandSpeed /= 10;

  Self.WindMouse(
    Start.X, Start.Y, Destination.X, Destination.Y,
    Self.Gravity, Self.Wind,
    5 / RandSpeed, 10 / RandSpeed, 20 * RandSpeed, 20 * RandSpeed
  );
end;

(*
Mouse.Move
~~~~~~~~~~
.. pascal:: procedure TMouse.Move(P: TPoint);

Moves the mouse to the desired X,Y coordinate.

Example
-------

  Mouse.Move(50, 50); // The mouse is now at 50,50
*)
procedure TMouse.Move(X, Y: Int32); overload;
begin
  Self.Move(Point(X, Y));
end;

(*
Mouse.Move
~~~~~~~~~~
.. pascal:: procedure TMouse.Move(Center: TPoint; Radius: Int32; ForcedMove: Boolean = False);

Moves the mouse to a random point in an circle defined by **Center** and **Radius**.

- **ForcedMove** determines if the mouse should be moved if already inside the circle. By default this is **False**.

Example
-------

  Mouse.Move([100, 100], 25); // The mouse is now randomly within 100,100 with a radius of 25.
*)
procedure TMouse.Move(Center: TPoint; Radius: Int32; ForcedMove: Boolean = False); overload;
begin
  if SRL.PointInCircle(Self.Position(), Center, Radius) and (not ForcedMove) then
    Exit;

  Self.Move(SRL.RandomPoint(Center, Radius));
end;

(*
Mouse.Move
~~~~~~~~~~
.. pascal:: procedure TMouse.Move(Box: TBox; ForcedMove: Boolean = False; Distribution: EMouseDistribution = MOUSE_DISTRIBUTION_DEFAULT);

Moves the mouse to a random point in the box.

- **ForcedMove** determines if the mouse should be moved if already in the box. By default this is **False**
- **Distribution** determines the method to generate a random point. By default this uses **Mouse.Distribution**

Example
-------

  var B: TBox;

  B.X1 := 100;
  B.Y1 := 100;
  B.X2 := 200;
  B.Y2 := 200;

  Mouse.Move(B); // The mouse is now randomly within 100,100,200,200
*)
procedure TMouse.Move(Box: TBox; ForcedMove: Boolean = False; Distribution: EMouseDistribution = MOUSE_DISTRIBUTION_DEFAULT); overload;
begin
  if Box.Contains(Self.Position()) and (not ForcedMove) then
    Exit;

  if Distribution = MOUSE_DISTRIBUTION_DEFAULT then
    Distribution := Self.Distribution;

  case Distribution of
    MOUSE_DISTRIBUTION_RANDOM: Self.Move(Random(Box.X1, Box.X2), Random(Box.Y1, Box.Y2));
    MOUSE_DISTRIBUTION_GAUSS:  Self.Move(SRL.RandomPoint(Box));
    MOUSE_DISTRIBUTION_SKEWED: Self.Move(SRL.RandomPointEx(Self.Position(), Box));
    MOUSE_DISTRIBUTION_ROWP:   Self.Move(SRL.Rowp(Self.Position(), Box));
  end;
end;

(*
Mouse.Move
~~~~~~~~~~
.. pascal:: procedure TMouse.Move(Circle: TCircle; ForcedMove: Boolean = False);

Moves the mouse to a random point in an circle.

- **ForcedMove** determines if the mouse should be moved if already in the circle. By default this is **False**.

Example
-------

  var C: TCircle;

  C.X := 100;
  C.Y := 100;
  C.Radius := 25;

  Mouse.Move(C); // The mouse is now randomly within 100,100 with a radius of 25.
*)
procedure TMouse.Move(Circle: TCircle; ForcedMove: Boolean = False); overload;
begin
  Self.Move(Circle.Mean(), Circle.Radius, ForcedMove);
end;

(*
Mouse.Move
~~~~~~~~~~
.. pascal:: procedure TMouse.Move(Rect: TRectangle; ForcedMove: Boolean = False);

Moves the mouse to a random point in an rectangle.

- **ForcedMove** determines if the mouse should be moved if already in the rectangle. By default this is **False**.

Example
-------

  var TPA: TPointArray;
  var R: TRectangle;

  R := TPA.MinAreaRect();

  Mouse.Move(R);
*)
procedure TMouse.Move(Rect: TRectangle; ForcedMove: Boolean = False); overload;
begin
  if Rect.Contains(Self.Position()) and (not ForcedMove) then
    Exit;

  Self.Move(SRL.RandomPoint(Rect));
end;

(*
Mouse.Click
~~~~~~~~~~~
.. pascal:: procedure TMouse.Click(Button: Int32);

Clicks the mouse with the desired button at the current mouse position.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

Example
-------

  Mouse.Click(MOUSE_LEFT); // Left click the current mouse position
*)
procedure TMouse.Click(Button: Int32);
begin
  Self.Hold(Button);
  Wait(SRL.TruncatedGauss(30, 300));
  Self.Release(Button);

  {$IFDEF SRL_DEBUG_MOUSE}
  if (Self.DebugBitmap <> nil) then
    with Self.Position() do
      Self.DebugBitmap.SetPixel(X, Y, $0000FF);
  {$ENDIF}
end;

(*
Mouse.Click
~~~~~~~~~~~
.. pascal:: procedure TMouse.Click(X, Y: Int32; Button: Int32);

Moves the mouse to to X,Y and clicks the desired button.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

Example
-------

  Mouse.Click(50, 50, MOUSE_LEFT); // Left click at 50,50
*)
procedure TMouse.Click(X, Y: Int32; Button: Int32); overload;
begin
  Self.Move(X, Y);
  Self.Click(Button);
end;

(*
Mouse.Click
~~~~~~~~~~~
.. pascal:: procedure TMouse.Click(P: TPoint; Button: Int32);

Moves the mouse to P.X,P.Y and click the desired button.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

Example
-------

  var P: TPoint;

  P.X := 50;
  P.Y := 50;

  Mouse.Click(P, MOUSE_LEFT); // Left click at 50,50
*)
procedure TMouse.Click(P: TPoint; Button: Int32); overload;
begin
  Self.Move(P.X, P.Y);
  Self.Click(Button);
end;

(*
Mouse.Click
~~~~~~~~~~~
.. pascal:: TMouse.Click(Circle: TCircle; Button: Int32; ForcedMove: Boolean = False);

Moves the mouse to a random point in an circle defined by **Center** and **Radius** and clicks the desired button.

 - **ForcedMove** determines if the mouse should be moved if already in the circle. By default this is **False**.

Example
-------

  Mouse.Click([100, 100], 25, MOUSE_LEFT); // Left clicked somewhere nearby 100,100 with a radius of 25.
*)
procedure TMouse.Click(Center: TPoint; Radius: Int32; Button: Int32; ForcedMove: Boolean = False); overload;
begin
  Self.Move(Center, Radius, ForcedMove);
  Self.Click(Button);
end;

(*
Mouse.Click
~~~~~~~~~~~
.. pascal:: procedure TMouse.Click(Box: TBox; Button: Int32; ForcedMove: Boolean = False; Distribution: EMouseDistribution = MOUSE_DISTRIBUTION_DEFAULT);

Moves the mouse to a random point in the box and clicks the desired button.

- **ForcedMove** determines if the mouse should be moved if already in the box. By default this is **False**
- **Distribution** determines the method to generate a random point. By default this uses **Mouse.Distribution**

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

Example
-------

  var B: TBox;

  B.X1 := 100;
  B.Y1 := 100;
  B.X2 := 200;
  B.Y2 := 200;

  Mouse.Click(B, MOUSE_LEFT); // Left clicked somewhere within 100,100,200,200
*)
procedure TMouse.Click(Box: TBox; Button: Int32; ForcedMove: Boolean = False; Distribution: EMouseDistribution = MOUSE_DISTRIBUTION_DEFAULT); overload;
begin
  Self.Move(Box, ForcedMove, Distribution);
  Self.Click(Button);
end;

(*
Mouse.Click
~~~~~~~~~~~
.. pascal:: TMouse.Click(Circle: TCircle; Button: Int32; ForcedMove: Boolean = False);

Moves the mouse to a random point in an circle and clicks the desired button.

 - **ForcedMove** determines if the mouse should be moved if already in the circle. By default this is **False**.

Example
-------

  var C: TCircle;

  C.X := 100;
  C.Y := 100;
  C.Radius := 25;

  Mouse.Click(C, MOUSE_LEFT); // Left clicked somewhere nearby 100,100 with a radius of 25.
*)
procedure TMouse.Click(Circle: TCircle; Button: Int32; ForcedMove: Boolean = False); overload;
begin
  Self.Move(Circle, ForcedMove);
  Self.Click(Button);
end;

(*
Mouse.Click
~~~~~~~~~~~
.. pascal:: procedure TMouse.Click(Rect: TRectangle; Button: Int32; ForcedMove: Boolean = False);

Moves the mouse to a random point in an rectangle then clicks the desired button.

 - **ForcedMove** determines if the mouse should be moved if already in the rectangle. By default this is **False**.

Example
-------

  var TPA: TPointArray;
  var R: TRectangle;

  R := TPA.MinAreaRect();

  Mouse.Click(R, MOUSE_LEFT);
*)
procedure TMouse.Click(Rect: TRectangle; Button: Int32; ForcedMove: Boolean = False); overload;
begin
  Self.Move(Rect, ForcedMove);
  Self.Click(Button);
end;

(*
Mouse.Miss
~~~~~~~~~~
.. pascal:: function TMouse.Miss(P: TPoint): TPoint;

"Misses" the destination point **P**. Will stop somewhere along the path or overshoot.
Returns the position the mouse was moved to.

This could automatically be called depending on **Mouse.MissChance**.
*)
function TMouse.Miss(P: TPoint): TPoint;
var
  Range: Int32;
  Miss: Double;
  Temp: Double := Self.MissChance;
begin
  Self.MissChance := 0; // prevent recursion

  try
    Range := Trunc(Power(Self.Position().DistanceTo(P), 0.80)); // how much possible range to miss
    Miss := SRL.SkewedRand(0.9, 0.1, 1.5); // Where miss will happen. 1 = destination (P).

    Result.X := Trunc((1-Miss)*Self.Position().X + Miss*P.X);
    Result.Y := Trunc((1-Miss)*Self.Position().Y + Miss*P.Y);

    Result.X += SRL.NormalRange(-Range, Range);
    Result.Y += SRL.NormalRange(-Range, Range);

    Self.Move(Result);

    if SRL.Dice(25) then
      Wait(0, 5000, wdLeft);
  finally
    Self.MissChance := Temp;
  end;
end;

(*
Mouse.DragTo
~~~~~~~~~~~~
.. pascal:: procedure TMouse.DragTo(X, Y: Int32; Button: Int32 = MOUSE_LEFT)

Holds the desired button and moves the mouse to X,Y coordinates.

 - **Button** by default is MOUSE_LEFT.

Example
-------

  Mouse.DragTo(50, 50); // Moves the mouse to 50,50 while holding MOUSE_LEFT
*)
procedure TMouse.DragTo(X, Y: Int32; Button: Int32 = MOUSE_LEFT); overload;
begin
  Self.Hold(Button);
  Self.Move(X, Y);
  Self.Release(Button);
end;

(*
Mouse.DragTo
~~~~~~~~~~~~
.. pascal:: procedure TMouse.DragTo(P: TPoint; Button: Int32 = MOUSE_LEFT)

Holds the desired button and moves the mouse to `P` coordinates.

 - **Button** by default is MOUSE_LEFT.

Example
-------

  var P: TPoint;

  P.X := 50;
  P.Y := 50;

  Mouse.DragTo(P); // Moves the mouse to 50,50 while holding MOUSE_LEFT
*)
procedure TMouse.DragTo(P: TPoint; Button: Int32 = MOUSE_LEFT); overload;
begin
  Self.DragTo(P.X, P.Y);
end;

(*
Mouse.Scroll
~~~~~~~~~~~~
.. pascal:: procedure TMouse.Scroll(Amount: Int32; Down: Boolean);

Scrolls the mouse X amount of times at the current mouse position.

Example
-------

  Mouse.Scroll(5, True);  // Scroll 5 times down
  Mouse.Scroll(5, False); // Scroll 5 times up
*)
procedure TMouse.Scroll(Amount: Int32; Down: Boolean);
var
  i, step, k: Int32 = 1;
  P: TPoint;
begin
  P := Self.Position();
  step := Round(SRL.GaussRand(6.0,0.6));
  for i := 1 to Amount do
  begin
    if Down then
      ScrollMouse(P.X, P.Y, 1)
    else
      ScrollMouse(P.X, P.Y, -1);

    if k mod step = 0 then
    begin
      step := Round(SRL.GaussRand(6.0,0.6));
      Wait(215, 410);
      k := 0;
    end else
      Wait(25, 46);

    Inc(k);
  end;
end;

(*
Mouse.Scroll
~~~~~~~~~~~~
.. pascal:: procedure TMouse.Scroll(P: TPoint; Scrolls: Int32; Down: Boolean);

Moves the mouse to desired position `P` then scrolls X amount of times.

Example
-------

  var P: TPoint;

  P.X := 50;
  P.Y := 50;

  Mouse.Scroll(P, 5, True);  // Scroll 5 times down at 50,50
  Mouse.Scroll(P, 5, False); // Scroll 5 times up at 50,50
*)
procedure TMouse.Scroll(P: TPoint; Amount: Int32; Down: Boolean); overload;
begin
  Self.Move(P);
  Self.Scroll(Amount, Down);
end;

(*
Mouse.Scroll
~~~~~~~~~~~~
.. pascal:: procedure TMouse.Scroll(Box: TBox; Amount: Int32; Down: Boolean);

Moves the mouse to a random point in the box then scrolls X amount of times.

Example
-------

  var B: TBox;

  B.X1 := 100;
  B.Y1 := 100;
  B.X2 := 200;
  B.Y2 := 200;

  Mouse.Scroll(B, 5, True); // Scroll the mouse down 5 times somewhere within 100,100,200,200
  Mouse.Scroll(B, 5, False); // Scroll the mouse up 5 times somewhere within 100,100,200,200
*)
procedure TMouse.Scroll(Box: TBox; Amount: Int32; Down: Boolean); overload;
begin
  Self.Move(Box);
  Self.Scroll(Amount, Down);
end;

(*
var Mouse
~~~~~~~~~
  Global mouse variable.
*)
var
  Mouse: TMouse;

begin
  Mouse.Setup();
end;

