{$DEFINE SRL_WRAPPERS_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL/utils.simba}
{$ENDIF}

(*
Wrappers
========

The wrappers include contains wrapper functions used throughout SRL, some of them to simplify coding while others are just fixes.

The source for this file can be found `here <https://github.com/Olly-/SRL/blob/master/lib/utilities/wrappers.simba>`_.

*)

function TPAFromLine(Start, Stop: TPoint): TPointArray; overload;
begin
  Result := TPAFromLine(Start.X, Start.Y, Stop.X, Stop.Y);
end;

(*
GetClientBounds
~~~~~~~~~~~~~~~
.. code-block:: pascal

    function GetClientBounds(): TBox;

Returns the clients bounds.

.. note:: by Olly

Example:

.. code-block:: pascal

   b := GetClientBounds();
*)
function GetClientBounds(): TBox;
var
  W, H: Integer;
begin
  client.GetIOManager().GetDimensions(W,H);
  Result := TBox([0, 0, Max(0, W-1), Max(0, H-1)])
end;

(*
GetColor; overload
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function GetColor(const p: TPoint): Integer; overload;

Takes a TPoint variable instead of x, y variables.

.. note:: by Olly

Example:

.. code-block:: pascal

     p := Point(350, 200);
     WriteLn(GetColor(p));
*)
function GetColor(const p: TPoint): Integer; overload;
begin
  Result := GetColor(p.x, p.y);
end;

(*
GetColors; overload
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function GetColors(const TPA: TPointArray; const ClearSame: boolean): TIntegerArray; overload;

Takes an extra parameter, clearSame if true will clear the same integers in the result.

.. note:: by Olly

Example:

.. code-block:: pascal

     Colors := GetColors(TPA, True);
*)
function GetColors(const TPA: TPointArray; const ClearSame:Boolean): TIntegerArray; overload;
begin
  Result := GetColors(TPA);

  if (ClearSame) then
    ClearSameIntegers(Result);
end;

(*
FindColor; overload
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindColor(var x, y: integer; const Color: integer; const SearchBox: TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Coh3n

Example:

.. code-block:: pascal

    FindColor(x, y, clRed, Box);
*)
function FindColor(var x, y: Integer; const Color: Integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindColor(x, y, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
findColorTolerance; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindColorTolerance(var x, y: Integer; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    FindColorTolerance(x, y, 255, Box, 10);
*)
function FindColorTolerance(var x, y: Integer; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
begin
  Result := FindColorTolerance(x, y, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tolerance);
end;

(*
FindColors; overload
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindColors(var Points: TPointArray; const Color: Integer; const SearchBox: TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Coh3n

Example:

.. code-block:: pascal

    WriteLn(FindColors(TPA, 255, Box));
*)
function FindColors(var Points: TPointArray; const Color: Integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindColors(Points, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
FindColorsTolerance; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindColorsTolerance(var Points: TPointArray; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Zyt3x

Example:

.. code-block:: pascal

    WriteLn(FindColorsTolerance(TPA, 255, Box, 10));
*)
function FindColorsTolerance(var Points: TPointArray; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
begin
  Result := System.FindColorsTolerance(Points, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tolerance);
end;

(*
CountColor; overload
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function CountColor(const Color: Integer; const SearchBox: TBox): Integer; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Coh3n

Example:

.. code-block:: pascal

    WriteLn(CountColor(clRed, Box));
*)
function CountColor(const Color: Integer; const SearchBox: TBox): Integer; overload;
begin
  Result := CountColor(Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
CountColorTolerance: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function CountColorTolerance(Color: integer; searchBox: TBox; tol: integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Coh3n

Example:

.. code-block:: pascal

    WriteLn(CountColorTolerance(clRed, 10, Box));
*)
function CountColorTolerance(const Color: Integer; const SearchBox: TBox; const Tol: Integer): Integer; overload;
begin
  Result := CountColorTolerance(Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tol);
end;

(*
BitmapFromClient; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function BitmapFromClient(const SearchBox: TBox): Integer; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    BMP := BitmapFromClient(Box);
*)
function BitmapFromClient(const SearchBox: TBox): Integer; overload;
begin
  Result := BitmapFromClient(SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
FindBitmapIn; overload
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindBitmapIn(const BMP: Integer; var x, y: integer; const SearchBox: TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    Result := FindBitmap(bmp, x, y, Box);
*)
function FindBitmapIn(const BMP: Integer; var x, y: integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindBitmapIn(BMP, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
FindBitmapToleranceIn; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindBitmapToleranceIn(const BMP: Integer; var x, y: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    Result := FindBitmapToleranceIn(BMP, x, y, Box, 20);
*)
function FindBitmapToleranceIn(const BMP: Integer; var x, y: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
begin
  Result := FindBitmapToleranceIn(BMP, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tolerance);
end;


(*
FindDTMRotatedSE; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindDTMRotatedSE(const DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    if (FindDTMRotatedSE(aDTM, x, y, Box, -Pi/4, Pi/4, Pi/60, aFound)) then
      WriteLn('Found the dtm!');
*)
function FindDTMRotatedSE(const DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;
begin
  Result := FindDTMRotatedSE(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, sAngle, eAngle, aStep, aFound);
end;

(*
FindDTMRotatedAlternating: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindDTMRotatedAlternating(DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    if (FindDTMRotatedAlternating(DTM, x, y, Box, -Pi/4, Pi/4, Pi/60, aFound)) then
      WriteLn('Found the dtm!');
*)
function FindDTMRotatedAlternating(DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;
begin
  result := FindDTMRotatedAlternating(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, sAngle, eAngle, aStep, aFound);
end;

(*
FindDTMRotated
~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindDTMRotated(const DTM: Integer; var x, y: Integer; const x1, y1, x2, y2: Integer; const sAngle, eAngle, aStep: Extended; out aFound: Extended): Boolean;

Searches for a rotated DTM, A legacy method commonly used in past SRL versions.

.. note:: by Olly

Example:

.. code-block:: pascal

    if (FindDTMRotated(DTM, x, y, 100, 100, 400, 400, -Pi/4, Pi/4, Pi/60, aFound)) then
      WriteLn('Found the dtm!');
*)
function FindDTMRotated(const DTM: Integer; var x, y: Integer; const x1, y1, x2, y2: Integer; const sAngle, eAngle, aStep: Extended; out aFound: Extended): Boolean;
begin
  Result := FindDTMRotatedAlternating(DTM, x, y, x1, y1, x2, y2, sAngle, eAngle, aStep, aFound);
end;

(*
FindDTMRotated; overload
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindDTMRotated(const DTM: Integer; var x, y: Integer; const SearchBox: TBox; const sAngle, eAngle, aStep: extended; out aFound: Extended): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    if (FindDTMRotated(aDTM, x, y, Box, -Pi/4, Pi/4, Pi/60, aFound)) then
      WriteLn('found the dtm!');
*)
function FindDTMRotated(const DTM: Integer; var x, y: Integer; const SearchBox: TBox; const sAngle, eAngle, aStep: extended; out aFound: Extended): Boolean; overload;
begin
  Result := FindDTMRotated(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, sAngle, eAngle, aStep, aFound);
end;

(*
FindDTMs; overload
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindDTMs(const DTM: Integer; var TPA: TPointArray; const SearchBox: TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    FindDTMs(DTM, TPA, Box);
    WriteLn('Matches' + toString(TPA));
*)
function FindDTMs(const DTM: Integer; var TPA: TPointArray; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindDTMs(DTM, TPA, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
FindDTM; overload
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function FindDTM(const DTM: Integer; var x, y: Integer; const SearchBox: TBox): Boolean; overload;

Takes a TBox variable instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    WriteLn(FindDTM(DTM, x, y, Box));
*)
function FindDTM(const DTM: Integer; var x, y: Integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindDTM(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
TPAFromText; overload
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

     function TPAFromText(const Text, Font: string): TPointArray; overload;

Creates a TPA of the text without the need for the W and H params.

.. note:: by Olly

Example:

.. code-block:: pascal

  TPA := TPAFromText('Hello world', StatChars);

*)
function TPAFromText(const Text, Font: string): TPointArray; overload;
var
  W, H: Integer;
begin
  Result := TPAFromText(Text, Font, W, H);
end;

(*
InRange; overload
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function InRange(const Value, Min, Max: Extended): Boolean; overload;

Takes a extended variable instead of an integer variable.

.. note:: by Olly

Example:

.. code-block:: pascal

    WriteLn(InRange(15.0, 10.0, 20.0));
*)
function InRange(const Value, Min, Max: Extended): Boolean; overload;
begin
  Result := (value >= min) and (value <= max);
end;

(*
Distance; overload
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function Distance(const p1, p2: TPoint): Integer; overload;

Accepts two TPoints instead of x1, y1, x2 and y2 variables.

.. note:: by Olly

Example:

.. code-block:: pascal

    WriteLn(Distance(Point(100, 100), Point(200, 200)));
*)
function Distance(const p1, p2: TPoint): Integer; overload;
begin
  Result := Distance(p1.x, p1.y, p2.x, p2.y);
end;

function GetTextAtEx(const SearchBox: TBox; MinV, MaxV, HSpacing, Color, Tol: Integer; const Font: String): String; overload;
begin
  Result := GetTextAtEx(SearchBox.X1, SearchBox.Y1, SearchBox.X2, SearchBox.Y2, MinV, MaxV, HSpacing, Color, Tol, Font);
end;

function FindTextColor(Text, Font: String; Color, Tolerance: Int32; Area: TBox; out Bounds: TBox): Single; overload;
begin
  Result := FindTextColor(Text, Font, Color, TOlerance, Area.X1, Area.Y1, Area.X2, Area.Y2, Bounds);
end;

function FindTextColor(Text, Font: String; Color, Tolerance: Int32; Area: TBox; MinMatch: Single): Boolean; overload;
begin
  Result := FindTextColor(Text, Font, Color, Tolerance, Area.X1, Area.Y1, Area.X2, Area.Y2, MinMatch);
end;


procedure FreeDTMs(const DTMs: TIntegerArray);
var
  I: Integer;
begin
  for I := 0 to High(DTMs) do
    FreeDTM(DTMs[I]);
end;

procedure FreeWalkers(const Walkers: Array of TRSWalker);
var
  I: Integer;
  Walker: TRSWalker;
begin
  for I := 0 to High(Walkers) do
  begin
    Walker := Walkers[I];
    Walker.Free();
  end;
end;


procedure TerminateScript(Reason: String); overload;
begin
  WriteLn('Terminating: ' + Reason);

  TerminateScript();
end;
