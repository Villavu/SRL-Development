{$DEFINE SRL_GRANDEXCHANGE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSGEOverviewButton = (
    HISTORY,
    COLLECT
  );
  
  ERSGESetupOfferButton = (
    HISTORY,
    ITEM,
    QUANTITY,
    PRICE,
    QUANTITY_1,
    QUANTITY_10,
    QUANTITY_100,
    QUANTITY_ALL,
    QUANTITY_ENTER,
    PRICE_DECREASE,
    PRICE_GUIDE,
    PRICE_ENTER,
    PRICE_INCREASE,
    TOTAL,
    CONFIRM
  );
  
  ERSGEOfferStatusButton = (
    HISTORY,
    ITEM,
    QUANTITY, 
    PRICE,
    TOTAL,
    PROGRESS
  );
  
  ERSGEInterface = (
    UNKNOWN,
    OVERVIEW,
    OFFER_STATUS,
    OFFER_SETUP
  );

  TRSGrandExchange = record(TRSTitledInteface)
    FINDER_BANKER: TRSObjectFinder;
  end;
  
function TRSGrandExchange.GetSetupOfferButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[45,18], [35,25], [152,40],[160,18], [159,18], [210,18], [40,36]]);
end;

function TRSGrandExchange.GetSetupOfferButton(Button: ERSGESetupOfferButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetSetupOfferButtons();
begin
  if Length(Buttons) = Length(ERSGESetupOfferButton) then
    Result := Buttons[Button];
end;

function TRSGrandExchange.GetOverviewButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[45,18], [81,18]]);
end;

function TRSGrandExchange.GetOverviewButton(Button: ERSGEOverviewButton): TRSButton;
var
  I: Int32;
  Buttons: TRSButtonArray := Self.GetOverviewButtons();
begin
  case Button of
    ERSGEOverviewButton.COLLECT: // Can be hidden
      begin
        for I := 0 to High(Buttons) do
          if Buttons[I].FindText('Collect', RS_FONT_PLAIN_11, $FFFFFF) then
            Exit(Buttons[I]);
      end;
    else
      if Length(Buttons) >= Length(ERSGEOverviewButton) - 1 then 
        Result := Buttons[Button];
  end;
end;

function TRSGrandExchange.GetOfferStatusButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[45,18], [36,32], [40,36],[292,15], [160,18], [159,18], [210,18]]);
end;

function TRSGrandExchange.GetOfferStatusButton(Button: ERSGEOfferStatusButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetOfferStatusButtons();
begin
  if Length(Buttons) = Length(ERSGEOfferStatusButton) then
    Result := Buttons[Button];
end;

function TRSGrandExchange.FindNPC(Finder: TRSObjectFinder): T2DPointArray;
var
  TPA: TPointArray;
  P: TPoint;
  B: TBox;
  I: Int32;
  Weights: TIntegerArray;
  Size: Int32;
begin
  // Find center G.E using yellow dots
  TPA := Minimap.GetDots(ERSMinimapDot.NPC);
  TPA.Offset([2, 2]);
  TPA := TPA.Cluster(15).Biggest();
  with TPA.MeanEx() do
    P := Minimap.VecToMS([X, Y]);

  // Size of GE center at fixed client & default(50) zoom.
  Size := MainScreen.ConvertDistance(110);
  
  // Center G.E on the mainscreen
  B := [P.X, P.Y, P.X, P.Y];
  B := B.Expand(Size);

  Result := MainScreen.FindObject(Finder, B);

  if (Length(Result) > 0) then
  begin
    // Weigh from center AND towards the player
    SetLength(Weights, Length(Result));
    for I := 0 to High(Result) do
      if Length(Result[I]) > 0 then
        Weights[I] := Distance(Result[I].Mean, P) + Min(Distance(Result[I].Mean, MainScreen.Center), Size);

    QuickATPASort(Weights, Result, 0, High(Result), True);
  end;
end;

function TRSGrandExchange.OpenBank: Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if Bank.IsOpen() or Bank.Open(Mouse.Position()) then
    Exit(True);

  ATPA := Self.FindNPC(Self.FINDER_BANKER);
  if Length(ATPA) > 3 then
    SetLength(ATPA, 3);
  
  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);
    
    if Bank.Open(P) then
      Exit(True);
  end;
end;

function TRSGrandExchange.GetCurrentInterface: ERSGEInterface;
begin
  if Self.GetSetupOfferButton(ERSGESetupOfferButton.HISTORY).Visible() then
    Result := ERSGEInterface.OFFER_SETUP
  else 
  if Self.GetOfferStatusButton(ERSGEOfferStatusButton.HISTORY).Visible() then
    Result := ERSGEInterface.OFFER_STATUS
  else
  if Self.GetOverviewButton(ERSGEOverviewButton.HISTORY).Visible() then
    Result := ERSGEInterface.OVERVIEW;
end;

function TRSGrandExchange.IsOpen: Boolean;
begin
  Result := Self.GetCurrentInterface() <> ERSGEInterface.UNKNOWN;
end;

function TRSGrandExchange.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSGrandExchange.GetItemName: String;
var
  Button: TRSButton;
  B: TBox;
begin
  B.X1 := Self.X1 + 175;
  B.Y1 := Self.Y1 + 45;
  B.X2 := Self.X2 - 25;
  B.Y2 := Self.Y1 + 65;

  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Result := OCR.Recognize(B, [2070783], RS_FONT_BOLD_12);
    ERSGEInterface.OFFER_STATUS: Result := OCR.Recognize(B, [2070783], RS_FONT_BOLD_12);
  end;
end;

function TRSGrandExchange.GetItemQuantity: Int32;
var
  Button: TRSButton;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.QUANTITY);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.QUANTITY);
  end;
  
  if Button.Visible() then
    Result := OCR.RecognizeNumber(Button.Bounds, [4176127], RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.GetItemPrice: Int32;
var
  Button: TRSButton;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.PRICE);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.PRICE);
  end;
  
  if Button.Visible() then
    Result := OCR.RecognizeNumber(Button.Bounds, [4176127], RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.GetItemTotalPrice: Int32;
var
  Button: TRSButton;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.TOTAL);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.TOTAL);
  end;
  
  if Button.Visible() then
    Result := OCR.RecognizeNumber(Button.Bounds, [$FFFFFF], RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.GetItemGuidePrice: Int32;
var
  Button: TRSButton;
  B: TBox;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.ITEM);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.ITEM);
  end;
  
  if Button.Visible() then
  begin
    B := Button.Bounds;
    B.Y1 += 40;
    B.Y2 += 20;
    B.X2 += 40;
    
    Result := OCR.RecognizeNumber(B, [4176127], RS_FONT_PLAIN_11); 
  end;  
end;

function TRSGrandExchange.IsSearchOpen: Boolean;
begin
  Result := OCR.LocateText(Chat.Bounds, 'What would you like to buy', RS_FONT_BOLD_12, [$000000], 1);
end;

function TRSGrandExchange.OpenSearch: Boolean;
begin
  if Self.IsSearchOpen() then
    Exit(True);
    
  if Self.GetSetupOfferButton(ERSGESetupOfferButton.item).Click() then
    Result := WaitUntil(Self.IsSearchOpen(), 500, 2500);
end;

function TRSGrandExchange.GetCurrentSearch: String;
begin
  Result := OCR.Recognize(Chat.Bounds, [8388608], RS_FONT_BOLD_12).StripR('*');
end;

function TRSGrandExchange.ClearSearch: Boolean;
begin
  while (Self.GetCurrentSearch() <> '') do
    Keyboard.PressKey(VK_BACK);
    
  Result := Self.IsOpen() and (Self.GetCurrentSearch() = '');
end;

function TRSGrandExchange.FindSearch(Item: String; out B: TBox): Boolean;
begin
  if (Item <> '') then
    Item[1] := UpCase(Item[1]);
    
  Result := OCR.LocateText(Chat.Bounds, Item, RS_FONT_PLAIN_12, [$000000], B) = 1;
end;

function TRSGrandExchange.ClickSearch(Item: String): Boolean;
var
  B: TBox;
begin
  Result := Self.IsSearchOpen() and (OCR.LocateText(Chat.Bounds, Item, RS_FONT_PLAIN_12, [$000000], B) = 1);
  if Result then
    Mouse.Click(B, MOUSE_LEFT);
end;

function TRSGrandExchange.Search(Item: String; Click: Boolean): Boolean;
var
  B: TBox;
begin
  if OCR.LocateText(Chat.Bounds, Item, RS_FONT_BOLD_12, [8388608], 1) then
    Exit(True);
  
  if Self.OpenSearch() and Self.ClearSearch() then
  begin
    Keyboard.Send(Item);
    
    Result := WaitUntil(Self.FindSearch(Item, B), 500, 2500);
    if Result and Click then
      Mouse.Click(B, MOUSE_LEFT);
  end;
end;

procedure TRSGrandExchange.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  Bitmap.DrawButtons(Self.GetSetupOfferButtons);
    
  inherited;
end;

procedure TRSGrandExchange.Setup; override;
begin
  inherited;

  Self.Name := 'Grand Exchange';
  Self.ButtonColors += [CTS1(2240055, 0), CTS1(2897729, 2), CTS1(2240055, 0), CTS1(2642530, 20), CTS1(3951189, 10)];

  Self.FINDER_BANKER.ColorClusters += [CTS2(6710894, 12, 0.19, 0.07), CTS2(2110788, 11, 0.29, 0.84), 10]; // grey, brown
  Self.FINDER_BANKER.ClusterDistance := 3;
  Self.FINDER_BANKER.Grow := 3;
  Self.FINDER_BANKER.Erode := 3;
  Self.FINDER_BANKER.MinLongSide := 10;
end;

procedure TRSGrandExchange.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 484;
        Self.Alignment.Center.MaxHeight := 304;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 484;
        Self.Alignment.Center.MaxHeight := 304;
      end;
  end;
end;

var
  GrandExchange: TRSGrandExchange;

(*
BankScreen.Open
~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Open(Location: ERSBankLocation): Boolean; override;

Overrides **BankScreen.Open** to support opening the grand exchange.
*)
function TRSBank.Open(Location: ERSBankLocation): Boolean; override;
begin
  if (Location = ERSBankLocation.GRAND_EXCHANGE) then
    Result := GrandExchange.OpenBank()
  else
    Result := inherited();
end;
  
procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  GrandExchange.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  GrandExchange.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  GrandExchange.Draw(Bitmap);
end;
