{$DEFINE SRL_XPBAR_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSXPBarLocations = (UNKNOWN, RIGHT, MIDDLE, LEFT);

  TRSXPBar = record(TRSInterface)
    Location: ERSXPBarLocations;
    ValidBounds: TBoxArray;
  end;


procedure TRSXPBar.Setup; override;
begin
  inherited;

  Self.Name := 'XPBar';
  Location := ERSXPBarLocations.UNKNOWN;
end;

procedure TRSXPBar.SetBounds;
var
  B: TBox;
begin
  ValidBounds := [];
  B := [InterfaceArea.X2 - 120, InterfaceArea.Y1,
        InterfaceArea.X2 - 2, InterfaceArea.Y1 + 28];
  ValidBounds += B;
  B := [InterfaceArea.Center.X - 60, InterfaceArea.Y1 + 23,
        InterfaceArea.Center.X + 59, InterfaceArea.Y1 + 51];
  ValidBounds += B;
  B := [InterfaceArea.X1 + 2, InterfaceArea.Y1 + 23,
        InterfaceArea.X1 + 120, InterfaceArea.Y1 + 51];
  ValidBounds += B;
end;

procedure TRSXPBar.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Location of
    ERSXPBarLocations.RIGHT:
      begin
        Self.Alignment.Left := [@InterfaceArea.X2, -120];
        Self.Alignment.Right := [@InterfaceArea.X2, -2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 0];
        Self.Alignment.Bottom := [@InterfaceArea.Y1, 28];
      end;

    ERSXPBarLocations.MIDDLE:
      begin
        Self.Alignment.Left   := [@InterfaceArea.X1];
        Self.Alignment.Right  := [@InterfaceArea.X2];
        Self.Alignment.Top    := [@InterfaceArea.Y1, 23];
        Self.Alignment.Bottom := [@InterfaceArea.Y1, 51];
        Self.Alignment.Center.MaxWidth := 119;
      end;

    ERSXPBarLocations.LEFT:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1, 2];
        Self.Alignment.Right := [@InterfaceArea.X1, 120];
        Self.Alignment.Top := [@InterfaceArea.Y1, 23];
        Self.Alignment.Bottom := [@InterfaceArea.Y1, 51];
      end;
  end;

  Self.SetBounds;
end;

procedure TRSXPBar.FindLocation;
var
  i: Int32;
  TPA: TPointArray;
begin
  for i := 0 to High(ValidBounds) do
  begin
    if SRL.FindColors(TPA, $FFFFFF, ValidBounds[i]) then
      Break
    else if i = High(ValidBounds) then
      Exit;
  end;

  Location := ERSXPBarLocations(i+1);

  Self.SetupAlignment(RSClient.Mode);
end;


function TRSXPBar.IsOpen: Boolean;
var
  TPA: TPointArray;
begin
  if FindColors(TPA, 11592943, Minimap.GetXPCircle.Bounds) then
    Result := Length(Minimap.GetXPCircle().Filter(TPA)) > 50;

  if Result and (Location = ERSXPBarLocations.UNKNOWN) then
    Self.FindLocation;
end;

function TRSXPBar.Open: Boolean;
begin
  if Self.IsOpen then Exit(True);

  Mouse.Click(Minimap.GetXPCircle, MOUSE_LEFT);

  Result := Self.IsOpen;
end;




procedure TRSXPBar.Draw(Bitmap: TMufasaBitmap); override;
var
  B: TBox;
begin
  if not Self.IsOpen() then
    Exit;

  //Bitmap.DrawBoxes(Self.ValidBounds, $00FFFF);

  inherited;
end;

function TRSXPBar.Read: Int32;
begin
  if not Self.Open then
    Exit;

  Result := OCR.RecognizeNumber(Self.Bounds, TOCRColorRule.Create([$FFFFFF]), RS_FONT_PLAIN_11);
end;

var
  XPBar: TRSXPBar;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  XPBar.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  XPBar.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  XPBar.Draw(Bitmap);
end;
