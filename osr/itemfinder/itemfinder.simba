(*
Item Finder
===========
*)

{$DEFINE SRL_ITEMFINDER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  ITEM_FINDER_NAME_FILE   = {$macro CURRENT_DIRECTORY} + '/item-names';
  ITEM_FINDER_IMAGES_ZIP  = {$macro CURRENT_DIRECTORY} + '/item-images.zip';
  ITEM_FINDER_IMAGES_PATH = {$macro CURRENT_DIRECTORY} + '/images/';

type
  TRSItem = Variant;
  TRSItemArray = array of TRSItem;

  TRSItemFinder = record(TSRLBaseRecord)
    ItemNames: TStringList;
    ItemImages: array of TMufasaBitmap;
    
    Similarity: Single;
  end;

var
  ItemFinder: TRSItemFinder;

procedure TRSItemFinder.Free;
var
  I: Int32;
begin
  Self.ItemNames.Free();
  for I := 0 to High(Self.ItemImages) do
    Self.ItemImages[I].Free();
end;

procedure TRSItemFinder.Setup;
begin
  Self.Name := 'Item Finder';
  Self.ItemNames.Init();
  Self.ItemNames.LoadFromFile(ITEM_FINDER_NAME_FILE);
  Self.Similarity := 0.999;

  AddOnTerminate(@Self.Free);
end;

procedure TRSItemFinder.AddItemName(constref Item, ID: String);
begin
  Self.ItemNames.SetValues(Item, ID);
end;

function TRSItemFinder.LoadItemImage(constref Item: String): TMufasaBitmap;
var
  ItemFileName, ItemID: String;
begin
  if Item.IsDigit() then
    ItemID := Item
  else
  begin
    ItemID := Self.ItemNames.GetValues(Item);
    if (ItemID = '') then
      Self.Fatal('Unknown item: ' + Item);
  end;
  
  ItemFileName := ExpandFileName(ITEM_FINDER_IMAGES_PATH + ItemID + '.png');
  if not FileExists(ItemFileName) and not UnZipOneFile(ITEM_FINDER_IMAGES_ZIP, ExtractFileName(ItemFileName), ITEM_FINDER_IMAGES_PATH) then
    Self.Fatal('Unknown item: ' + Item);

  Result.Init(Client.GetMBitmaps());
  Result.LoadFromFile(ItemFileName);
  Result.SetName(Item);
  Result.ReplaceColor(RS_ITEM_SHADOW, 0);
  
  Self.ItemImages += Result;
end;

function TRSItemFinder.GetItemImage(Item: TRSItem): TMufasaBitmap;
var
  I: Int32;
begin
  Item := LowerCase(VarToStr(Item));
  
  for I := 0 to High(ItemImages) do
    if (Self.ItemImages[I].GetName() = Item) then
      Exit(Self.ItemImages[I]);
  
  Result := Self.LoadItemImage(Item);
end;

procedure TRSItemFinder.ClearSparkles(constref Image, Templ: TMufasaBitmap);
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();
  
  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    // grey/brightness calculation. Works for magic logs
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) div 3 > 130) or    
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) div 3 > 130) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);
    
    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

function TRSItemFinder.CompareItems(constref Image, Template: TMufasaBitmap; constref HasSparkles: Boolean = False): Single;
var
  ImageBorder, TemplateBorder: TPointArray;
  TPA, ClearTPA: TPointArray;
  AlignedTemplate, AlignedImage: TMufasaBitmap;
  Align: TPoint;
  ClearColor: Int32;
  P: TPoint;
begin
  if Image.FindColors(ImageBorder, RS_ITEM_BORDER) and Template.FindColors(TemplateBorder, RS_ITEM_BORDER) then
  begin
    with TemplateBorder.Bounds() do
    begin
      Template.Crop(X1, Y1, X2, Y2);
      TemplateBorder := TemplateBorder.Offset(-X1,-Y1);
    end;
    
    // Use highest Y point of both images for alignment
    // TPA is already sorted like this with how FindColors operates.
    Align.X := Max(0, ImageBorder[High(ImageBorder)].X - TemplateBorder[High(TemplateBorder)].X);
    Align.Y := Max(0, ImageBorder[High(ImageBorder)].Y - TemplateBorder[High(TemplateBorder)].Y);
  
    // Compare borders. Sparkles can modify boundaries.
    if not HasSparkles then
      for P in TemplateBorder.Offset(Align) do
      begin
        if (P.Y <= 8) then // Possible stack number... Don't compare.
          Continue;
        if (not PointInTPA(P, ImageBorder)) then // Borders don't match. No point going further.
          Exit;
      end;
    
    AlignedImage := Image.Copy();
  
    AlignedTemplate.Init(Client.GetMBitmaps());
    AlignedTemplate.SetSize(Image.GetWidth(), Image.GetHeight());
    
    Template.DrawTransparent(Align.X, Align.Y, AlignedTemplate);  
    
    if HasSparkles then
      ClearSparkles(AlignedImage, AlignedTemplate);

    // Clear these template colors on both images
    for ClearColor in [RS_ITEM_YELLOW_STACK, RS_ITEM_WHITE_STACK, RS_ITEM_GREEN_STACK, RS_ITEM_BORDER] do
      if AlignedTemplate.FindColors(TPA, ClearColor) then 
        ClearTPA += TPA;  
   
    // Clear image background on template
    if AlignedImage.FindColors(TPA, 0) then 
      ClearTPA += TPA;  
   
    AlignedTemplate.DrawTPA(ClearTPA, 0);
    AlignedImage.DrawTPA(ClearTPA, 0);
  
    Result := AlignedImage.MatchTemplate(AlignedTemplate, TM_CCORR_NORMED)[0][0]; // IDK why I used CCORR. But it works!
  
    AlignedImage.Free();
    AlignedTemplate.Free(); 
  end;
end;

function TRSItemFinder.Find(constref Identifer: TRSItem; constref Slots: TBoxArray; constref MaxToFind: Int32 = -1): TIntegerArray;
var
  Image, Templ: TMufasaBitmap;
  I: Int32;
  HasSparkles: Boolean;
begin
  Image := Self.GetItemImage(Identifer);
  case Image.GetName() of
    'magic logs', '1513',
    'noted magic logs', '1514': HasSparkles := True;
  end;

  for I := 0 to High(Slots) do
  begin
    Templ.FromClient(Slots[I]);
    if Self.CompareItems(Image, Templ, HasSparkles) >= Self.Similarity then
      Result := Result + I;
    Templ.Free();
    
    if Length(Result) = MaxToFind then
      Exit;
  end;
end;

begin
  ItemFinder.Setup();
  
  // We can map some useful things here
  ItemFinder.AddItemName('arrow shaft', '6443');
end;
