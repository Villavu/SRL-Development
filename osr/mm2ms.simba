(*
Minimap to Mainscreen
=====================
The core for our minimap to mainscreen projection.
Supports rotation, and zoom, and resizable client.

MM2MS extends the Minimap interface as well as the mainscreen interface with
functionality to convert coordinates to & from the minimap to the mainscreen.
*)

{$DEFINE SRL_MM2MS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

(*
type TMM2MS
~~~~~~~~~~~
.. pascal:: 
  type
    TMM2MS = record
      BASE_W, BASE_H: Int32;        // the size of the area we project to (mainscreen size)
      MainScreen.Middle.X, MainScreen.Middle.Y: Int32;            // the center of the area we project to (mainscreen center)
      MMCX, MMCY: Int32;            // the center of the area we project from (minimap center)
      SCALE_MIN, SCALE_MAX: Double; // direct zoom (relates to BASE)
      ZOOM: Double;                 // current zoom
      YSHIFT: Double;               // zooming may cause mid-Y to shift
    end;
   
The comments explains it. This is the datastructure MM2MS uses.
*)
type
  TMM2MS = record(TSRLBaseRecord)
    ZoomLevel: Int32;
  end;

(*
var MM2MS
~~~~~~~~~
.. pascal::
  var MM2MS: TMM2MS;

The global variable which you would refer to.
*)
var
  MM2MS: TMM2MS;

procedure TMM2MS.DebugTiles(Dots: Boolean; Angle: Double = -1);
var
  BMP: TMufasaBitmap;
  X, Y: Int32;
  Tile: Vector3;
  TPA: TPointArray;
  Dot: TPoint;
begin
  if Angle = -1 then
    Angle := MInimap.GetCompassAngle(False);

  BMP.FromClient();

  for X := Minimap.Center.X - 25 * 4 to Minimap.Center.X + 25 * 4 with 4 do
    for Y := Minimap.Center.Y - 25 * 4 to Minimap.Center.Y + 25 * 4 with 4 do
    begin
      Tile := Vec3(X, Y).RotateXY(Angle, Minimap.Center.X, Minimap.Center.Y);
      TPA := Minimap.VecToMsRect(Tile, Angle).ToTPA().Connect();

      BMP.DrawTPA(TPA, $00FF00);
    end;

  if Dots then
  begin
    for Dot in Minimap.GetDots(ERSMinimapDot.NPC) do
      BMP.DrawRect(Minimap.VecToMSRect([Dot.X + 2, Dot.Y + 2], Angle), $00FFFF);
    for Dot in Minimap.GetDots(ERSMinimapDot.ITEM) do
      BMP.DrawRect(Minimap.VecToMSRect([Dot.X + 2, Dot.Y + 2], Angle), $0000FF);
    for Dot in Minimap.GetDots(ERSMinimapDot.PLAYER) do
      BMP.DrawRect(Minimap.VecToMSRect([Dot.X + 2, Dot.Y + 2], Angle), $FFFFFF);
  end;

  BMP.Debug();
  BMP.Free();
end;

function TMM2MS.Run(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray;
var
  i: Int32;
  P: TPoint;
  Projector: TMM2MSProjector;
begin
  if (Self.ZoomLevel = -1) then
  begin
    Self.DebugLn('Unknown zoom level, reading from options...');
    Self.ZoomLevel := Options.GetZoomLevel();
    Self.DebugLn('Current zoom level: ' + ToString(Self.ZoomLevel));
  end;

  case RSClient.Mode of
    ERSClientMode.FIXED:
      Projector := MM2MS_PROJECTOR_FIXED;

    ERSClientMode.RESIZABLE_MODERN,
    ERSClientMode.RESIZABLE_CLASSIC:
      Projector := MM2MS_PROJECTOR_RESIZABLE;
  end;

  Projector.MainScreen := MainScreen.Bounds;
  Projector.Minimap := Minimap.Bounds;
  Projector.ZoomLevel := Self.ZoomLevel;

  P := Minimap.Center;
  for i := 0 to High(Arr) do
    Arr[i] := [Arr[i].X - P.X, P.Y - Arr[i].Y, Arr[i].Z];

  Result := Projector.Run(Arr, Vec3(0, 0, PI*2 - Roll));
end;

procedure TMM2MS.Setup;
begin
  Self.Name := 'MM2MS';
  Self.ZoomLevel := -1;
end;

(*
Minimap
------------------------------------------------------
Extend the minimap-functionality with MM2MS functions
*)

(*
Minimap.ArrToMs
~~~~~~~~~~~~~~~
.. pascal:: 
  function TRSMinimap.ArrToMs(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray; overload;
  function TRSMinimap.ArrToMs(Arr: TPointArray; Roll:Single=$FFFF): TPointArray; overload;

Takes array of points on the minimap, returns mainscreen projected array of points.
The first method takes a vector3 array as input, so we can pass height as well, and more detailed coordinates to scale.
*)
function TRSMinimap.ArrToMs(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray; overload;
var
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  for i:=0 to High(Arr) do
    Arr[i] := Arr[i].RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);
  
  Result := MM2MS.Run(Arr, Roll);
end;

function TRSMinimap.ArrToMs(Arr: TPointArray; Roll:Single=$FFFF): TPointArray; overload;
var
  VecArr: Vector3Array;
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  
  SetLength(VecArr, Length(Arr));
  for i:=0 to High(Arr) do
  begin
    VecArr[i].x := Arr[i].x;
    VecArr[i].y := Arr[i].y;
    VecArr[i] := VecArr[i].RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);
  end;
  Result := MM2MS.Run(VecArr, Roll);
end;

(*
Minimap.VecToMs
~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMs(Vec: Vector3; Roll:Single=$FFFF): TPoint;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a point on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMs(Vec: Vector3; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);
  
  Result := MM2MS.Run([Vec], Roll)[0];
end;

(*
Minimap.PointToMs
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMs(PT: TPoint; Roll:Single=$FFFF): TPoint;

Takes a single coordinate as a TPoint on the minimap, and converts it to a point on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMs(PT: TPoint; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - Roll, Point(Minimap.Center.X, Minimap.Center.Y));
  
  Result := MM2MS.Run([Vec3(PT.x, PT.y)], Roll)[0];
end;


(*
Minimap.VecToMsRect
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMsRect(Vec: Vector3; Roll:Single=$FFFF): TRectangle;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a rectangle / tile on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMsRect(Vec: Vector3; Roll:Single=$FFFF): TRectangle;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);

  Arr := MM2MS.Run([Vec3(Vec.x-2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y+2, Vec.z), Vec3(Vec.x-2, Vec.y+2, Vec.z)], Roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

(*
Minimap.PointToMsRect
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMsRect(PT: TPoint; Roll:Single=$FFFF): TRectangle;

Takes a single coordinate as a TPoint on the minimap, and converts it to a rectangle / tile on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMsRect(PT: TPoint; Roll:Single=$FFFF): TRectangle;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - Roll, Point(Minimap.Center.X, Minimap.Center.Y));
  
  Arr := MM2MS.Run([Vec3(PT.x-2, PT.y-2), Vec3(PT.x+2, PT.y-2), Vec3(PT.x+2, PT.y+2), Vec3(PT.x-2, PT.y+2)], Roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

(*
Minimap.VecToMsBox
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMsBox(Vec: Vector3; Roll:Single=$FFFF): TBox;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a rough box on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMsBox(Vec: Vector3; Roll:Single=$FFFF): TBox;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);

  Arr := MM2MS.Run([Vec3(Vec.x-2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y+2, Vec.z), Vec3(Vec.x-2, Vec.y+2, Vec.z)], Roll);
  Result := GetTPABounds(arr);
end;

(*
Minimap.VecToMsBox
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMsBox(PT: TPoint; Roll:Single=$FFFF): TBox;

Takes a single coordinate as a TPoint on the minimap, and converts it to a rough box on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMsBox(PT: TPoint; Roll:Single=$FFFF): TBox;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  PT := PT.Rotate(PI*2 - Roll, Point(Minimap.Center.X, Minimap.Center.Y));

  Arr := MM2MS.Run([Vec3(PT.x-2, PT.y-2), Vec3(PT.x+2, PT.y-2), Vec3(PT.x+2, PT.y+2), Vec3(PT.x-2, PT.y+2)], Roll);
  Result := GetTPABounds(arr);
end;

(*
Minimap.StaticToMsRect
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.StaticToMsRect(StaticMMPoint: TPoint; Height:Int32=0): TRectangle;

Takes static minimap coordinate, rotates it to compass angle, and returns a rectangle on the mainscreen
The static point is therefor gathered at north, and it will rotate it as expected.
*)
function TRSMinimap.StaticToMsRect(StaticMMPoint: TPoint; Height:Int32=0): TRectangle;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);
  with StaticMMPoint.Rotate(angle, Point(Minimap.Center.X, Minimap.Center.Y)) do
    Result := Minimap.VecToMSRect(Vec3(X,Y, Height), angle);
end;

(*
Minimap.StaticToMs
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.StaticToMs(StaticMMPoint: TPoint; Height:Int32=0): TPoint;

This is the same as the above, only that it returns a single point on the mainscreen.
*)
function TRSMinimap.StaticToMs(StaticMMPoint: TPoint; Height:Int32=0): TPoint;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);
  with StaticMMPoint.Rotate(angle, Point(Minimap.Center.X, Minimap.Center.Y)) do
    Result := Minimap.VecToMS(Vec3(X,Y, Height), angle);
end;



(*
Mainscreen
-------------------------------------------------------
Extend the mainscreen-functionality with MS2MM function
*)

(*
Mainscreen.PointToMM
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3;

Takes a mainscreen point and converts it to a point on the minimap.

Returns a Vector3 which includes input height. Conversion to a TPoint if that's what you need is simply 
done by calling `.ToPoint` on the result.

Example
-------

  WriteLn Mainscreen.PointToMM(Point(250,140), 2);
  WriteLn Mainscreen.PointToMM(Point(250,140), 2).ToPoint(); // as a TPoint (lost accuracy)
*)
function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3; override;
var
  a: Double := Minimap.GetCompassAngle(False);
  mid: TPoint := Minimap.Center();

  function FindNearest(Area, Step: Double; FromMM: Vector3; IsFinal: Boolean): Vector3;
  var
    i: Int32;
    TPA: TPointArray;
    arr,raw: Vector3Array;
    best: TPoint;
    x,y: Double;
  begin
    best := Point(-9999, -9999);
    x := FromMM.X-Area;
    while x <= FromMM.X+Area do
    begin
      y := FromMM.Y-Area;
      while y <= FromMM.Y+Area do
      begin
        raw += Vector3([x,y,height]);
        arr += raw[High(raw)].RotateXY(-a, mid.X, mid.Y);
        y += Step;
      end;
      x += Step;
    end;

    TPA := Minimap.ArrToMs(Copy(arr), a);
    if not IsFinal then Swap(arr, raw);
    for i:=0 to High(TPA) do
      if Distance(TPA[i], MS) < Distance(best, MS) then
      begin
        best := TPA[i];
        Result := arr[i];
      end;
    Result.z := Height;
  end;

var
  area: Double;
begin
  area := 48;
  Result := FindNearest(area, area, Vec3(mid.X, mid.Y), False);
  while area > accuracy do
  begin
    Result := FindNearest(area, area, Result, False);
    area /= 2;
  end;
  Result := FindNearest(area, accuracy, Result, True);
end;

(*
MainScreen.ConvertDistance
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.ConvertDistance(Dist: Int32; Accuracy: Single = 1.05): Int32;

Converts a distance acquired from the **fixed client* and **default zoom** to the
current mainscreen.

Example
-------

  // 20 pixels on the fixed client and default zoom(50) is currently x pixels at the current zoom & client size.
  WriteLn(MainScreen.TranslateDistance(20));
*)
function TRSMainScreen.ConvertDistance(Dist: Int32; Accuracy: Single = 1.05): Int32; override;
var
  Projector: TMM2MSProjector;
  Base: TPoint;

  function SearchUp(Value: Single; Target: Single; Inc: Single): Single;
  var
    P: TPoint;
  begin
    while True do
    begin
      P := Projector.Run([Value, 0, 0], [0, 0, 0]);
      if Base.DistanceTo(P) > Target then
        Exit(Value);

      Value *= Inc;
    end;
  end;

  function SearchDown(Value: Single; Target: Single; Dec: Single): Single;
  var
    P: TPoint;
  begin
    while True do
    begin
      P := Projector.Run([Value, 0, 0], [0, 0, 0]);
      if Base.DistanceTo(P) < Target then
        Exit(Value);

      Value /= Dec;
    end;
  end;

var
  lo, hi, mean: Single;
begin
  if (Dist = 0) then
    Exit;

  Projector := MM2MS_PROJECTOR_FIXED;
  Base := Projector.Run([0, 0, 0], [0, 0, 0]);

  hi := SearchUp(0.1, Dist, 1.50);
  lo := SearchDown(hi, Dist, 1.50);

  hi := SearchUp(lo, Dist, Accuracy);
  lo := SearchDown(hi, Dist, Accuracy);

  mean := lo + ((hi - lo) / 2);

  Result := Distance(Minimap.VecToMs([Minimap.Center.X, Minimap.Center.Y], 0),
                     Minimap.VecToMs([Minimap.Center.X + mean, Minimap.Center.Y], 0));

  if Result < 1 then
    Result := 1;
end;

(*
MainScreen.GetPlayerBox
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.GetPlayerBox: TBox;

Returns a box surrounding our player. Works at any zoom level.
*)
function TRSMainScreen.GetPlayerBox: TBox; override;
var
  A: Double := Minimap.GetCompassAngle(False);
  Center: TPoint := Minimap.Center;
  TPA: TPointArray;
begin
  TPA := [Minimap.VecToMS(Vec3(Center.X - 2, Center.Y, 10), A),
          Minimap.VecToMS(Vec3(Center.X + 2, Center.Y, -3), A)];

  Result := TPA.Bounds();
end;

(*
MainScreen.FacePoint
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.FacePoint(P: TPoint; Randomness: Int32 = 0): Boolean;

Rotates the camera to face point `P`.
*)
function TRSMainScreen.FacePoint(P: TPoint; Randomness: Int32 = 0): Boolean; override;
var
  Angle: Double;
begin
  Angle := Self.PointToMM(P).ToPoint.AngleBetween(Minimap.Center);
  Angle += Random(-Randomness, Randomness);

  Minimap.SetCompassAngle(Angle);
end;

(*
Options.SetZoomLevel
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;

Override to automatically update MM2MS.ZoomLevel.
*)
function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;
begin
  Result := inherited();
  if Result then
    MM2MS.ZoomLevel := Level;
end;

begin
  MM2MS.Setup();
end;
