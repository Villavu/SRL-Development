(*
Minimap to Mainscreen
=====================
The core for our minimap to mainscreen projection.
Supports rotation, and zoom, and resizable client.

MM2MS extends the Minimap interface as well as the mainscreen interface with
functionality to convert coordinates to & from the minimap to the mainscreen.
*)

{$DEFINE SRL_MM2MS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

(*
type TMM2MS
~~~~~~~~~~~
.. pascal:: 
  type
    TMM2MS = record
      BASE_W, BASE_H: Int32;        // the size of the area we project to (mainscreen size)
      MainScreen.Middle.X, MainScreen.Middle.Y: Int32;            // the center of the area we project to (mainscreen center)
      MMCX, MMCY: Int32;            // the center of the area we project from (minimap center)
      SCALE_MIN, SCALE_MAX: Double; // direct zoom (relates to BASE)
      ZOOM: Double;                 // current zoom
      YSHIFT: Double;               // zooming may cause mid-Y to shift
    end;
   
The comments explains it. This is the datastructure MM2MS uses.
*)
type
  TMM2MS = record(TSRLBaseRecord)
    ZoomLevel: Int32;
  end;

(*
var MM2MS
~~~~~~~~~
.. pascal::
  var MM2MS: TMM2MS;

The global variable which you would refer to.
*)
var
  MM2MS: TMM2MS;

procedure TMM2MS.DebugTiles(Dots: Boolean; Angle: Double = -1);
var
  BMP: TMufasaBitmap;
  X, Y: Int32;
  Tile: Vector3;
  TPA: TPointArray;
  Dot: TPoint;
begin
  if Angle = -1 then
    Angle := MInimap.GetCompassAngle(False);

  BMP := TMufasaBitmap.CreateFromClient();

  for X := Minimap.Center.X - 25 * 4 to Minimap.Center.X + 25 * 4 with 4 do
    for Y := Minimap.Center.Y - 25 * 4 to Minimap.Center.Y + 25 * 4 with 4 do
    begin
      Tile := Vec3(X, Y).RotateXY(Angle, Minimap.Center.X, Minimap.Center.Y);
      TPA := Minimap.VecToMsRect(Tile, 1, 1, Angle).ToTPA().Connect();

      BMP.DrawTPA(TPA, $00FF00);
    end;

  if Dots then
  begin
    //for Dot in Minimap.GetDots(ERSMinimapDot.NPC) do
    //  BMP.DrawRect(Minimap.VecToMSRect([Dot.X + 2, Dot.Y + 2], 1, 1, Angle), $00FFFF);
    //for Dot in Minimap.GetDots(ERSMinimapDot.ITEM) do
    //  BMP.DrawRect(Minimap.VecToMSRect([Dot.X + 2, Dot.Y + 2], 1, 1, Angle), $0000FF);
    //for Dot in Minimap.GetDots(ERSMinimapDot.PLAYER) do
    //  BMP.DrawRect(Minimap.VecToMSRect([Dot.X + 2, Dot.Y + 2], 1, 1, Angle), $FFFFFF);
  end;

  BMP.Show();
  BMP.Free();
end;

function TMM2MS.Run(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray;
var
  i: Int32;
  P: TPoint;
  Projector: TMM2MSProjector;
begin
  if (Self.ZoomLevel = -1) then
  begin
    Self.DebugLn('Unknown zoom level, reading from options...');
    Self.ZoomLevel := Options.GetZoomLevel();
    Self.DebugLn('Current zoom level: ' + ToString(Self.ZoomLevel));
  end;

  case RSClient.Mode of
    ERSClientMode.FIXED:
      Projector := MM2MS_PROJECTOR_FIXED;

    ERSClientMode.RESIZABLE_MODERN,
    ERSClientMode.RESIZABLE_CLASSIC:
      Projector := MM2MS_PROJECTOR_RESIZABLE;
  end;

  Projector.MainScreen := MainScreen.Bounds;
  Projector.Minimap := Minimap.Bounds;
  Projector.ZoomLevel := Self.ZoomLevel;

  P := Minimap.Center;
  for i := 0 to High(Arr) do
    Arr[i] := [Arr[i].X - P.X, P.Y - Arr[i].Y, Arr[i].Z];

  Result := Projector.Run(Arr, Vec3(0, 0, PI*2 - Roll));
end;

procedure TMM2MS.Setup;
begin
  Self.Name := 'MM2MS';
  Self.ZoomLevel := -1;
end;

(*
Minimap
------------------------------------------------------
Extend the minimap-functionality with MM2MS functions
*)

(*
Minimap.ArrToMs
~~~~~~~~~~~~~~~
.. pascal:: 
  function TRSMinimap.ArrToMs(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray; overload;
  function TRSMinimap.ArrToMs(Arr: TPointArray; Roll:Single=$FFFF): TPointArray; overload;

Takes array of points on the minimap, returns mainscreen projected array of points.
The first method takes a vector3 array as input, so we can pass height as well, and more detailed coordinates to scale.
*)
function TRSMinimap.ArrToMs(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray; overload;
var
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  for i:=0 to High(Arr) do
    Arr[i] := Arr[i].RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);
  
  Result := MM2MS.Run(Arr, Roll);
end;

function TRSMinimap.ArrToMs(Arr: TPointArray; Roll:Single=$FFFF): TPointArray; overload;
var
  VecArr: Vector3Array;
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  
  SetLength(VecArr, Length(Arr));
  for i:=0 to High(Arr) do
  begin
    VecArr[i].x := Arr[i].x;
    VecArr[i].y := Arr[i].y;
    VecArr[i] := VecArr[i].RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);
  end;
  Result := MM2MS.Run(VecArr, Roll);
end;

(*
Minimap.VecToMs
~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMs(Vec: Vector3; Roll:Single=$FFFF): TPoint;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a point on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMs(Vec: Vector3; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);
  
  Result := MM2MS.Run([Vec], Roll)[0];
end;

(*
Minimap.PointToMs
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMs(PT: TPoint; Roll:Single=$FFFF): TPoint;

Takes a single coordinate as a TPoint on the minimap, and converts it to a point on the mainscreen.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMs(PT: TPoint; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - Roll, Point(Minimap.Center.X, Minimap.Center.Y));
  
  Result := MM2MS.Run([Vec3(PT.x, PT.y)], Roll)[0];
end;


(*
Minimap.VecToMsRect
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.VecToMsRect(Vec: Vector3; WESize, NSSize: Double = 1; Roll:Single=$FFFF): TRectangle;

Takes a single coordinate as a Vector3 on the minimap, and converts it to a rectangle / tile on the mainscreen.

*WESize* is the size of the rectangle we want to get from west-to-east measured in RS tiles.
*NSSize* is the size of the rectangle we want to get from north-to-south measured in RS tiles.

By default this values are 1 which will return you one single tile.
If you wanted to get the tiles of a runecrafting altar for example which is 3 by 3 tiles you would set both to 3.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.VecToMsRect(Vec: Vector3; WESize, NSSize: Double = 1; Roll:Single=$FFFF): TRectangle;
var
  Arr: TPointArray;
begin
  if WESize <= 0 then WESize := 1;
  if NSSize <= 0 then NSSize := 1;

  //tiles are roughly 4 pixels height and width in the minimap.
  //so for our coordinate we will want to "expand" each tile 2 pixels north, south, east and west.
  WESize := 2 * WESize;
  NSSize := 2 * NSSize;

  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);

  Vec := Vec.RotateXY(PI*2 - Roll, Minimap.Center.X, Minimap.Center.Y);
  Arr := MM2MS.Run([Vec3(Vec.X-WESize, Vec.Y-NSSize, Vec.z),
                    Vec3(Vec.X+WESize, Vec.Y-NSSize, Vec.z),
                    Vec3(Vec.X+WESize, Vec.Y+NSSize, Vec.z),
                    Vec3(Vec.X-WESize, Vec.Y+NSSize, Vec.z)], Roll);

  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

(*
Minimap.PointToMsRect
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.PointToMsRect(PT: TPoint; Roll:Single=$FFFF): TRectangle;

Takes a single coordinate as a TPoint on the minimap, and converts it to a rectangle / tile on the mainscreen.

*WESize* is the size of the rectangle we want to get from west-to-east measured in RS tiles.
*NSSize* is the size of the rectangle we want to get from north-to-south measured in RS tiles.

By default this values are 1 which will return you one single tile.
If you wanted to get the tiles of a runecrafting altar for example which is 3 by 3 tiles you would set both to 3.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.PointToMsRect(PT: TPoint; WESize, NSSize: Double = 1; Roll:Single=$FFFF): TRectangle;
var
  Arr: TPointArray;
begin
  if WESize <= 0 then WESize := 1;
  if NSSize <= 0 then NSSize := 1;

  //tiles are roughly 4 pixels height and width in the minimap.
  //so for our coordinate we will want to "expand" each tile 2 pixels north, south, east and west.
  WESize := 2 * WESize;
  NSSize := 2 * NSSize;

  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);

  PT := PT.Rotate(PI*2 - Roll, Point(Minimap.Center.X, Minimap.Center.Y));
  
  Arr := MM2MS.Run([Vec3(PT.x-WESize, PT.y-NSSize),
                    Vec3(PT.x+WESize, PT.y-NSSize),
                    Vec3(PT.x+WESize, PT.y+NSSize),
                    Vec3(PT.x-WESize, PT.y+NSSize)], Roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

(*
Minimap.GetTileMS
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.GetTileMS(Loc: TPoint; TileVector: Vector3; Offset: Vector2 = [0, 0]; Roll: Single = $FFFF): TRectangle;

This is a more general usage version of the previous 2 functions. This one can take height into account throught the **TileVector**.

TileVector is used to specify the size and height of the tile:
**TileVector.X** is the size of the rectangle from west to east in game.
**TileVector.Y** is the size of the rectangle from north to south in game.
**TileVector.Z** is the height of the rectangle in game. There's no way to accurately measure it but for a rough idea, a player's height is about 6 or 7.

*ROLL is the compass angle, by leaving it default it will gather the compass angle itself.*
*)
function TRSMinimap.GetTileMS(Loc: TPoint; TileVector: Vector3 = [1, 1, 0]; Offset: Vector2 = [0, 0]; Roll: Single = $FFFF): TRectangle;
begin
  if not Self.IsPointOn(Loc) then
    Exit;

  //This check above prevents users running out of memory from fetching tiles too far away.
  //Everything at the very edge of the minimap is also roughly the same limit of the render distance.
  //So even though we could fetch tiles further that are visible they would be pitch black because they are not rendered and kind of pointless.
  //So this just won't go further if the point is not on the minimap and prevents users from accidentally trying to get tiles that are truly too far.

  if (Roll = $FFFF) then
    Roll := Self.GetCompassAngle(False);

  Result := Self.VecToMSRect(
                  Vec3(Loc.x - Offset.X, Loc.y - Offset.Y, TileVector.Z),
                  TileVector.X, TileVector.Y, Roll);
end;

(*
Minimap.StaticToMsRect
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.StaticToMsRect(StaticMMPoint: TPoint; Height:Int32=0): TRectangle;

Takes static minimap coordinate, rotates it to compass angle, and returns a rectangle on the mainscreen
The static point is therefor gathered at north, and it will rotate it as expected.

*WESize* is the size of the rectangle we want to get from west-to-east measured in RS tiles.
*NSSize* is the size of the rectangle we want to get from north-to-south measured in RS tiles.
*)
function TRSMinimap.StaticToMsRect(StaticMMPoint: TPoint; WESize, NSSize: Double = 1; Height: Double = 0): TRectangle;
var
  Angle: Double;
begin
  Angle  := Minimap.GetCompassAngle(False);
  with StaticMMPoint.Rotate(Angle, Minimap.Center) do
    Result := Minimap.VecToMSRect(Vec3(X, Y, Height), WESize, NSSize, Angle);
end;

(*
Minimap.StaticToMs
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.StaticToMs(StaticMMPoint: TPoint; Height:Int32=0): TPoint;

This is the same as the above, only that it returns a single point on the mainscreen.
*)
function TRSMinimap.StaticToMs(StaticMMPoint: TPoint; Height:Int32=0): TPoint;
var
  angle: Double;
begin
  angle := Minimap.GetCompassAngle(False);
  with StaticMMPoint.Rotate(angle, Point(Minimap.Center.X, Minimap.Center.Y)) do
    Result := Minimap.VecToMS(Vec3(X,Y, Height), angle);
end;


(*
Minimap.GetPolygonMS
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.GetPolygonMS(Loc: TPoint; TileVector: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]; Roll: Single = $FFFF): TPointArray;

To understand what this does, you should read about **TRSMinimap.GetTileMS()** and **TPointArray.ConvexHull()** and understand what they do.

To put it simply, this will will first calculate a floor rectangle with **TileVector.Z**, or **height** if you prefer
of 0 and then calculate the top rectangle of the **TileVector.Z** you specified.

After this 2 rectangles are calculated a polygon is then made out of the two, resulting in a ConvexHull which is returned.

This is perfect to to get an accurate bounding polygon of objects and NPCs which you can use to accurately color search after.

The example below will show you how it could be used to retrieve an accurate player bounding polygon.

Example
-------

  P := Minimap.GetDots(ERSMinimapDot.PLAYER)[0];         //find a player dot and returns it's coodinates.
  Offset := [2 , 2];                                     //Minimap dots are actually returned with a slight offset of -2, -2 when converting them to the mainscreen.
  Debug(Minimap.GetPolygonMS(P, [1, 1, 7], Offset));     //This will draw a polygon around the nearest player.
*)
function TRSMinimap.GetPolygonMS(Loc: TPoint; TileVector: Vector3 = [1, 1, 4]; Offset: Vector2 = [0, 0]; Roll: Single = $FFFF): TPointArray;
var
  TPA: TPointArray;
begin
  if (Roll = $FFFF) then
    Roll := Self.GetCompassAngle(False);

  TPA := Self.GetTileMs(Loc, [TileVector.Y, TileVector.X, 0], Offset, Roll).ToTPA();

  if TileVector.Z = 0 then
    Exit(TPA);

  Result := TPA.Combine(Self.GetTileMS(Loc, TileVector, Offset, Roll).ToTPA()).ConvexHull();
end;

(*
Minimap.GetPolygonArrayMS
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.GetPolygonArrayMS(LocArray: TPointArray; TileVector: Vector3; Offset: Vector2 = [0, 0]; Angle: Single = $FFFF): T2DPointArray;

Gives you an array of mainscreen polygons. Read **Minimap.GetPolygonMS** for more information.

Example
-------

  TPA := Minimap.GetDots(ERSMinimapDot.Player);   //find all player dots and returns their coodinates.
  Debug(Minimap.GetPolygonArrayMS(TPA, [2, 3, 5], [2, 2])); //This will draw a polygon that is 2 by 3 tiles and height 5 in the mainscreen where each NPC is.
*)
function TRSMinimap.GetPolygonArrayMS(LocArray: TPointArray; TileVector: Vector3; Offset: Vector2 = [0, 0]; Angle: Single = $FFFF): T2DPointArray;
var
  Loc: TPoint;
begin
  if (Angle = $FFFF) then Angle := Self.GetCompassAngle(False);

  for Loc in LocArray do
    Result += Self.GetPolygonMS(Loc, TileVector, Offset, Angle);
end;



(*
Minimap.GetZoomRectangle()
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function Minimap.GetZoomRectangle(): TRectangle;

This function returns an accurate rectangle of what's visible on the MainScreen on the Minimap.
This can be used to know if it's possible to make something visible by adjusting the zoom level or rotating the camera.

Example
-------

  Debug(Minimap.GetZoomRectangle());
*)
function Minimap.GetZoomRectangle(): TRectangle;
begin
  if MM2MS.ZoomLevel = -1 then
    MM2MS.ZoomLevel := Options.GetZoomLevel();

  Result := [
    MainScreen.PointToMM([MainScreen.Bounds.X1, MainScreen.Bounds.Y1]).ToPoint(),
    MainScreen.PointToMM([MainScreen.Bounds.X2, MainScreen.Bounds.Y1]).ToPoint(),
    MainScreen.PointToMM([MainScreen.Bounds.X2, MainScreen.Bounds.Y2]).ToPoint(),
    MainScreen.PointToMM([MainScreen.Bounds.X1, MainScreen.Bounds.Y2]).ToPoint()
  ];

  Result := Result.FixOrder;
end;

(*
Minimap.PointInZoomRectangle()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function Minimap.PointInZoomRectangle(P: TPoint): Boolean;

Check if a given point is within our zoom rectangle.

Example
-------

  P := Minimap.GetDots(ERSMinimapDot.ITEM)[0]; //find an item dot and returns it's coodinates.
  WriteLn Minimap.PointInZoomRadius(P);
*)
function Minimap.PointInZoomRectangle(P: TPoint): Boolean;
begin
  Result := P.InRect(Self.GetZoomRectangle());
end;


(*
Mainscreen
----------
Extend the mainscreen-functionality with MS2MM function
*)

(*
Mainscreen.PointToMM
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3;

Takes a mainscreen point and converts it to a point on the minimap.

Returns a Vector3 which includes input height. Conversion to a TPoint if that's what you need is simply 
done by calling `.ToPoint` on the result.

Example
-------

  WriteLn Mainscreen.PointToMM(Point(250,140), 2);
  WriteLn Mainscreen.PointToMM(Point(250,140), 2).ToPoint(); // as a TPoint (lost accuracy)
*)
function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3; override;
var
  a: Double := Minimap.GetCompassAngle(False);
  mid: TPoint := Minimap.Center();

  function FindNearest(Area, Step: Double; FromMM: Vector3; IsFinal: Boolean): Vector3;
  var
    i: Int32;
    TPA: TPointArray;
    arr,raw: Vector3Array;
    best: TPoint;
    x,y: Double;
  begin
    best := Point(-9999, -9999);
    x := FromMM.X-Area;
    while x <= FromMM.X+Area do
    begin
      y := FromMM.Y-Area;
      while y <= FromMM.Y+Area do
      begin
        raw += Vector3([x,y,height]);
        arr += raw[High(raw)].RotateXY(-a, mid.X, mid.Y);
        y += Step;
      end;
      x += Step;
    end;

    TPA := Minimap.ArrToMs(Copy(arr), a);
    if not IsFinal then Swap(arr, raw);
    for i:=0 to High(TPA) do
      if Distance(TPA[i], MS) < Distance(best, MS) then
      begin
        best := TPA[i];
        Result := arr[i];
      end;
    Result.z := Height;
  end;

var
  area: Double;
begin
  area := 48;
  Result := FindNearest(area, area, Vec3(mid.X, mid.Y), False);
  while area > accuracy do
  begin
    Result := FindNearest(area, area, Result, False);
    area /= 2;
  end;
  Result := FindNearest(area, accuracy, Result, True);
end;

(*
MainScreen.ConvertDistance
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.ConvertDistance(Dist: Int32; Accuracy: Single = 1.05): Int32;

Converts a distance acquired from the **fixed client* and **default zoom** to the
current mainscreen.

Example
-------

  // 20 pixels on the fixed client and default zoom(50) is currently x pixels at the current zoom & client size.
  WriteLn(MainScreen.TranslateDistance(20));
*)
function TRSMainScreen.ConvertDistance(Dist: Int32; Accuracy: Single = 1.05): Int32; override;
var
  Projector: TMM2MSProjector;
  Base: TPoint;

  function SearchUp(Value: Single; Target: Single; Inc: Single): Single;
  var
    P: TPoint;
  begin
    while True do
    begin
      P := Projector.Run([Value, 0, 0], [0, 0, 0]);
      if Base.DistanceTo(P) > Target then
        Exit(Value);

      Value *= Inc;
    end;
  end;

  function SearchDown(Value: Single; Target: Single; Dec: Single): Single;
  var
    P: TPoint;
  begin
    while True do
    begin
      P := Projector.Run([Value, 0, 0], [0, 0, 0]);
      if Base.DistanceTo(P) < Target then
        Exit(Value);

      Value /= Dec;
    end;
  end;

var
  lo, hi, mean: Single;
begin
  if (Dist = 0) then
    Exit;

  Projector := MM2MS_PROJECTOR_FIXED;
  Base := Projector.Run([0, 0, 0], [0, 0, 0]);

  hi := SearchUp(0.1, Dist, 1.50);
  lo := SearchDown(hi, Dist, 1.50);

  hi := SearchUp(lo, Dist, Accuracy);
  lo := SearchDown(hi, Dist, Accuracy);

  mean := lo + ((hi - lo) / 2);

  Result := Distance(Minimap.VecToMs([Minimap.Center.X, Minimap.Center.Y], 0),
                     Minimap.VecToMs([Minimap.Center.X + mean, Minimap.Center.Y], 0));

  if Result < 1 then
    Result := 1;
end;

(*
MainScreen.GetPlayerBox
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.GetPlayerBox: TBox;

Returns a box surrounding our player. Works at any zoom level.
*)
function TRSMainScreen.GetPlayerBox: TBox; override;
var
  A: Double := Minimap.GetCompassAngle(False);
  Center: TPoint := Minimap.Center;
  TPA: TPointArray;
begin
  TPA := [Minimap.VecToMS(Vec3(Center.X - 2, Center.Y, 10), A),
          Minimap.VecToMS(Vec3(Center.X + 2, Center.Y, -3), A)];

  Result := TPA.Bounds();
end;

(*
MainScreen.FacePoint
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.FacePoint(P: TPoint; Randomness: Int32 = 0): Boolean;

Rotates the camera to face point `P`.
*)
function TRSMainScreen.FacePoint(P: TPoint; Randomness: Int32 = 0): Boolean; override;
var
  Angle: Double;
  CurrentAngle: Double;
begin
  Angle := Self.PointToMM(P).ToPoint.AngleBetween(Minimap.Center);
  Angle += Random(-Randomness, Randomness);

  CurrentAngle := Minimap.GetCompassAngle;

  if CurrentAngle > 180 then
    CurrentAngle -= 360;

  Minimap.SetCompassAngle(-(Angle - CurrentAngle));
end;

(*
Options.SetZoomLevel
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;

Override to automatically update MM2MS.ZoomLevel.
*)
function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;
begin
  Result := inherited();
  if Result then
    MM2MS.ZoomLevel := Level;
end;

begin
  MM2MS.Setup();
end;
