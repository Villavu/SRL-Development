(*
Antiban
=======
Methods to handle antiban.
*)

{$DEFINE SRL_ANTIBAN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TAntibanMethod = procedure of object;
  TAntibanCondition = function: Boolean of object;

  PAntibanTask = ^TAntibanTask;
  PAntibanTaskArray = array of PAntibanTask;
  TAntibanTask = record
    Method: TAntibanMethod;
    Interval: Double;
    StdVar: Double;
    Countdown: TCountDown;
  end;

  PBreakTask = ^TBreakTask;
  TBreakTask = record
    Interval: Double;
    Length: Double;
    LogoutChance: Double;
    StdVar: Double;
    NextAtTime, PrevAtTime: Double;
  end;

  PSleepTask = ^TSleepTask;
  TSleepTask = record
    Time: String;
    Length: Double;
    Randomness: String;
    LogoutChance: Double;
    StdVar: Double;
    NextAtTime: Double;
  end;

  TAntiban = record(TSRLBaseRecord)
    Checking: Boolean;

    Debugging: Boolean;
    DebugRandoms: Boolean;

    Sleeps: array of TSleepTask;
    Breaks: array of TBreakTask;
    Tasks: array of TAntibanTask;

    Skills: array of ERSSkill;
    MinZoom, MaxZoom: Int32;

    OnStartSleep: procedure(Task: PSleepTask);
    OnSleeping: procedure(Task: PSleepTask; var Countdown: TCountdown);
    OnFinishSleep: procedure(Task: PSleepTask);

    OnStartBreak: procedure(Task: PBreakTask);
    OnBreaking: procedure(Task: PBreakTask; var Countdown: TCountdown);
    OnFinishBreak: procedure(Task: PBreakTask);

    OnStartTask: procedure(Task: PAntibanTask);
    OnFinishTask: procedure(Task: PAntibanTask);
  end;

function TAntiban.TimeRunningAtClock(TimeOfDay: String; Randomness: Double = 0.10): Int64;
var
  Res: TDateTime;
begin
  Res := (Date() + StrToTime(TimeOfDay)) - Now();
  if (Res < 0) then
    Res += 1;

  Result := GetTimeRunning() + Trunc(Res * SecsPerDay * MSecsPerSec);
  Result += Trunc(SRL.GaussRand(0, StrToTime(ToStr(Randomness * 10)) * SecsPerDay * MSecsPerSec));
  Result := Max(0, Result);
end;

function TAntiban.GetActiveTasks: PAntibanTaskArray;
var
  I: Int32;
begin
  for I := 0 to High(Self.Tasks) do
    if not Self.Tasks[I].Countdown.IsPaused then
      Result += @Self.Tasks[I];
end;


(*
Antiban.AddSleep
~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntiban.AddSleep(Time: String; Length: Double; Randomness: Double = 0.10; LogoutChance: Double = 0.50);

Schedule a sleep break. A sleep break is a large break, it can be any length but it's usually the several hours and also the largest one/ones.

**Time** is the aproximate time you want the break to occur and should be written in a **TTimeFormat.Time_Bare** format (00:00:00). https://ollydev.github.io/SRL-Development/time.html?highlight=ttime#ttimeformat
**Length** is how long we will sleep for in milliseconds.
**Randomness** is self explanatory, gives variance to the time our script will sleep at and it's length too.
**LogoutChance** is the probability of logging out for the sleep break or to simply afk and logout from inactivity.

This sleep break will only occur when **TAntiban.DoAntiban** is called.

Example
-------

.. code-block:: pascal

  Antiban.AddSleep('01:30:00', 8 * ONE_HOUR, 0.1, 0.8); //ONE_HOUR constant holds the value 3600000 which is one hour in milliseconds.
*)
procedure TAntiban.AddSleep(Time: String; Length: Double; Randomness: Double = 0.10; LogoutChance: Double = 0.50);
var
  Task: TSleepTask;
begin
  Task.Time := Time;
  Task.Length := Length;
  Task.StdVar := Randomness;
  Task.LogoutChance := LogoutChance;
  Task.NextAtTime := Self.TimeRunningAtClock(Task.Time, Task.StdVar);

  Self.Sleeps += Task;
end;

(*
Antiban.AddBreak
~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntiban.AddBreak(Interval, Length: Double; Randomness: Double = 0.2; LogoutChance: Double = 0.50);

Schedule a break. Breaks can be of short or medium length and should be shorter than any sleep breaks.

**Interval** is the aproximate interval of time that has to pass for the break to occur and it will be repeated everytime that interval passes. In other words this runs on a loop and interval is the time in between.
Length, Randomness and LogoutChance are the same as **TAntiban.AddSleep**.

This break will only occur when **TAntiban.DoAntiban** is called.

Example
-------

.. code-block:: pascal

  Antiban.AddBreak(30 * ONE_MINUTE, 5 * ONE_MINUTE); //Every 30 minutes the script will take a 5 minute break, subject to variance from the Randomness variable.
*)
procedure TAntiban.AddBreak(Interval, Length: Double; Randomness: Double = 0.2; LogoutChance: Double = 0.50);
var
  Task: TBreakTask;
begin
  Task.Interval := Interval;
  Task.Length := Length;
  Task.StdVar := Randomness;
  Task.LogoutChance := LogoutChance;
  Task.NextAtTime := GetTimeRunning() + Abs(SRL.GaussRand(Task.Interval, Task.Interval * Task.StdVar));

  Self.Breaks += Task;
end;

procedure TAntiban.TakeSleep(var Task: TSleepTask);
var
  Countdown: TCountDown;
  I: Int32;
  ActiveTasks: PAntibanTaskArray;
begin
  ActiveTasks := Self.GetActiveTasks();
  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Pause();

  Countdown.Init(Abs(Round(SRL.GaussRand(Task.Length, Task.Length * Task.StdVar))));

  Self.DebugLn('Sleeping for ' + SRL.MsToTime(Countdown.TimeRemaining(), TIME_FORMAL));

  if (@Self.OnStartSleep <> nil) then
    Self.OnStartSleep(@Task);

  if Random() < Task.LogoutChance then
  begin
    Self.DebugLn('Logging out');

    Logout.ClickLogout();
  end;

  if Random() < 0.50 then
    Self.LoseFocus();

  while not Countdown.IsFinished() do
  begin
    Self.DebugLn('Sleep time remaining: ' + SRL.MsToTime(Countdown.TimeRemaining(), TIME_FORMAL));

    if (@Self.OnSleeping <> nil) then
      Self.OnSleeping(@Task, Countdown);

    Wait(Min(Countdown.TimeRemaining(), 60000 * 5));
  end;

  Self.DebugLn('Sleep finished');

  if (@Self.OnFinishSleep <> nil) then
    Self.OnFinishSleep(@Task);

    {
  if InRange(CurrentPlayer, Low(Players), High(Players)) then
    Players[CurrentPlayer].Login();
}
  // Offset all tasks & breaks
  for I := 0 to High(Self.Breaks) do
    Self.Breaks[I].NextAtTime += GetTickCount() - (Countdown.Timeout - Countdown.Length);

  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Resume();

  // Setup next time this break happens
  Task.NextAtTime := Self.TimeRunningAtClock(Task.Time, Task.StdVar);
end;

procedure TAntiban.TakeBreak(var Task: TBreakTask);
var
  Countdown: TCountDown;
  I: Int32;
  ActiveTasks: PAntibanTaskArray;
begin
  ActiveTasks := Self.GetActiveTasks();
  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Pause();

  Countdown.Init(Abs(Round(SRL.GaussRand(Task.Length, Task.Length * Task.StdVar))));

  Self.DebugLn('Taking a break for ' + SRL.MsToTime(Countdown.TimeRemaining(), TIME_FORMAL));

  if (@Self.OnStartBreak <> nil) then
    Self.OnStartBreak(@Task);

  if Random() < Task.LogoutChance then
  begin
    Self.DebugLn('Logging out');

    Logout.ClickLogout();
  end;

  if Random() < 0.50 then
    Self.LoseFocus();

  I := 0;
  while not Countdown.IsFinished() do
  begin
    if (Inc(I) mod 12 = 0) then
      Self.DebugLn('Break time remaining: ' + ToString(CountDown.TimeRemaining() div 60000) + ' minutes');

    if (@Self.OnBreaking <> nil) then
      Self.OnBreaking(@Task, Countdown);

    Wait(5000);
  end;

  Self.DebugLn('Break finished');

  if (@Self.OnFinishBreak <> nil) then
    Self.OnFinishBreak(@Task);

 // if InRange(CurrentPlayer, Low(Players), High(Players)) then
 //   Players[CurrentPlayer].Login();

  // Offset all tasks & breaks
  for I := 0 to High(Self.Breaks) do
    Self.Breaks[I].NextAtTime += GetTickCount() - (Countdown.Timeout - Countdown.Length);

  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Resume();

  // Setup next time this break happens
  Task.NextAtTime := GetTimeRunning() + Abs(SRL.GaussRand(Task.Interval, Task.Interval * Task.StdVar));
end;

(*
Antiban.AddTask
~~~~~~~~~~~~~~~
.. pascal:: procedure TAntiban.AddTask(Interval: Double; Method: TAntibanMethod; Randomness: Double = 0.2); overload;

Schedule a antiban task. An antiban task can be any procedure but they are should be short things that won't break your main script.

**Interval** is the aproximate interval of time that has to pass for the antiban task to occur and it will be repeated everytime that interval passes.
**Method** is a pointer to the task you want to perform. SRL includes a couple of them.

This task will only occur when **TAntiban.DoAntiban** is called.

Example
-------

.. code-block:: pascal

  Antiban.AddTask(15 * ONE_MINUTE, @Antiban.HoverSkills); //Every 15 minutes the script will hover the skills.
*)
procedure TAntiban.AddTask(Interval: Double; Method: TAntibanMethod; Randomness: Double = 0.2);
var
  Task: TAntibanTask;
begin
  Task.Interval := Interval;
  Task.Method := @Method;
  Task.StdVar := Randomness;
  // Use Random() so the antiban "starts at an random sequence upon script start"
  Task.Countdown.Init(Random(Trunc(Abs(SRL.GaussRand(Task.Interval, Task.Interval * Task.StdVar)))));

  Self.Tasks += Task;
end;

function TAntiban.DoBreak: Boolean;
var
  I: Int32;
begin
  for I := 0 to High(Self.Breaks) do
    if GetTimeRunning() > Self.Breaks[I].NextAtTime then
    begin
      Self.TakeBreak(Self.Breaks[I]);

      Result := True;

      I := -1; // Restart loop
    end;
end;

function TAntiban.DoSleep: Boolean;
var
  I: Int32;
begin
  for I := 0 to High(Self.Sleeps) do
    if GetTimeRunning() > Self.Sleeps[I].NextAtTime then
    begin
      Self.TakeSleep(Self.Sleeps[I]);

      Result := True;

      I := -1; // Restart loop
    end;
end;

procedure TAntiban.PauseTask(Task: procedure of object);
var
  I: Int32;
begin
  for I := 0 to High(Self.Tasks) do
    if @Self.Tasks[I].Method = @Task then
      Self.Tasks[I].Countdown.Pause();
end;

procedure TAntiban.ResumeTask(Task: procedure of object);
var
  I: Int32;
begin
  for I := 0 to High(Self.Tasks) do
    if @Self.Tasks[I].Method = @Task then
      Self.Tasks[I].Countdown.Resume();
end;

(*
Antiban.DoAntiban
~~~~~~~~~~~~~~~~~
.. pascal:: function TAntiban.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean;

Antiban.DoAntiban should be called in your script when antiban sleeps, breaks or tasks won't break your script.
When this is called, the setup sleep breaks, breaks and tasks will be checked, if enough time has passed to perform any of them (subject to the parameters you pass in too), they will be performed, otherwise, nothing will happen.

Example
-------

.. code-block:: pascal

  Antiban.AddTask(15 * ONE_MINUTE, @Antiban.HoverSkills);

  while True do        //Infinite loop
    Antiban.DoAntiban; //Antiban.HoverSkills will be called every time 15 minutes passed when this is called.
*)
function TAntiban.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean;
var
  I, J: Int32;
  Task: PAntibanTask;
  ActiveTasks: array of PAntibanTask;
begin
  if not RSClient.IsLoggedIn() or Self.Checking then
    Exit;

  Self.Checking := True;

  ActiveTasks := Self.GetActiveTasks();
  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Pause();

  try
    for I := 0 to High(ActiveTasks) do
    begin
      Task := ActiveTasks[I];

      if Task^.Countdown.TimeRemaining() = 0 then
      begin
        if (@Self.OnStartTask <> nil) then
          Self.OnStartTask(Task);

        Task^.Method();
        Task^.Countdown.Init(Trunc(Abs(SRL.GaussRand(Task^.Interval, Task^.Interval * Task^.StdVar))));
        Task^.Countdown.Pause();
        if (@Self.OnFinishTask <> nil) then
          Self.OnFinishTask(Task);

        Result := True;
      end;
    end;

    // Resume now
    for I := 0 to High(ActiveTasks) do
      ActiveTasks[I]^.Countdown.Resume();

    if CheckBreaks and Self.DoBreak() then Result := True;
    if CheckSleeps and Self.DoSleep() then Result := True;
  finally
    Self.Checking := False;
  end;
end;


(*
Built in Antiban Tasks
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntiban.SmallRandomMouse;
.. pascal:: procedure TAntiban.RandomMouse;
.. pascal:: procedure TAntiban.RandomRotate;
.. pascal:: procedure TAntiban.HoverSkill(Skill: ERSSkill; HoverTime: Int32; ReturnToCurrentTab: Boolean);
.. pascal:: procedure TAntiban.HoverSkills;
.. pascal:: procedure TAntiban.LoseFocus;
.. pascal:: procedure TAntiban.LoseFocus(Idle: Int32); overload;
.. pascal:: procedure TAntiban.RandomTab;
.. pascal:: procedure TAntiban.RandomRightClick;
.. pascal:: procedure TAntiban.AdjustZoom;
.. pascal:: procedure TAntiban.SwivelNear(start: TBox; radius: Int32; Iterations: Int32=1); overload;
.. pascal:: procedure TAntiban.Swivel;

SRL built in Antiban Tasks that can be added with **TAntiban.AddTask**.

Example
-------

.. code-block:: pascal

  Antiban.AddTask(15 * ONE_MINUTE, @Antiban.HoverSkills);
*)
procedure TAntiban.SmallRandomMouse;
var
  B: TBox;
  P: TPoint;
begin
  Self.DebugLn('Random Mouse (Small)');

  B := Box(Mouse.Position(), 350, 350);
  repeat
    P := SRL.RandomPoint(B);
  until P.DistanceTo(B.Middle) < 50; // Make sure we move at least 50 distance

  Mouse.Move(P);
end;

procedure TAntiban.RandomMouse;
var
  CustomMouse: TMouse;
begin
  Self.DebugLn('Random Mouse');

  CustomMouse := Mouse;
  CustomMouse.Speed += Random(1, 5);

  for 1 to SRL.TruncatedGauss(1, 6) do
  begin
    if Random() < 0.30 then
      CustomMouse.Move(GetClientBounds().Expand(150), True, MOUSE_DISTRIBUTION_GAUSS)
    else
      CustomMouse.Move(GetClientBounds().Expand(150), True, MOUSE_DISTRIBUTION_RANDOM);

    if Random() < 0.50 then
      Wait(0, 1000, wdLeft);
  end;
end;

procedure TAntiban.RandomRotate;
begin
  Self.DebugLn('Random Rotate');

  case SRL.Dice(50) of
    True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - SRL.TruncatedGauss(30, 360, 3));
    False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + SRL.TruncatedGauss(30, 360, 3));
  end;
end;

procedure TAntiban.HoverSkill(Skill: ERSSkill; HoverTime: Int32; ReturnToCurrentTab: Boolean);
var
  Tab: ERSGameTab;
begin
  Self.DebugLn('Hover skill: ' + ToString(Skill));

  if ReturnToCurrentTab then
    Tab := GameTabs.GetCurrentTab();

  if Stats.MouseOver(Skill) then
  begin
    Wait(HoverTime);
    if ReturnToCurrentTab then
      GameTabs.Open(Tab);
  end;
end;

procedure TAntiban.HoverSkills;
begin
  if Self.Skills = [] then
  begin
    Self.DebugLn('HoverSkills: No skills declared');

    Exit;
  end;

  HoverSkill(Self.Skills[Random(Length(Self.Skills))], SRL.TruncatedGauss(1000, 10000), SRL.Dice(50));
end;

procedure TAntiban.LoseFocus;
begin
  RSClient.LoseFocus();
end;

procedure TAntiban.LoseFocus(Idle: Int32); overload;
begin
  RSClient.LoseFocus();

  Wait(Idle);
end;

procedure TAntiban.RandomTab;
begin
  Self.DebugLn('Random Tab');

  if Random() < 0.80 then
  begin
    if Random() < 0.50 then
    begin
      GameTabs.Open(ERSGameTab(SRL.NormalRange(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC), 6.0)));

      Wait(300, 3000, wdLeft);
    end;

    GameTabs.Open(ERSGameTab(Random(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC))));
  end else
  begin
    if Random() < 0.50 then
    begin
      GameTabs.Open(ERSGameTab(SRL.NormalRange(Ord(ERSGameTab.CLAN), Ord(ERSGameTab.MUSIC), 6.0)));

      Wait(0, 2500, wdLeft);
    end;

    GameTabs.Open(ERSGameTab(Random(Ord(ERSGameTab.CLAN), Ord(ERSGameTab.MUSIC))));
  end;

  Wait(0, 8000, wdLeft);
end;

procedure TAntiban.RandomRightClick;
begin
  Self.DebugLn('Random Right Click');

  Mouse.Move(GetClientBounds(), True, MOUSE_DISTRIBUTION_RANDOM);

  if ChooseOption.Open() then
  begin
    if Random() < 0.50 then
      Mouse.Move(ChooseOption.Bounds);

    Wait(0, 8000, wdLeft);

    ChooseOption.Close();
  end;
end;

procedure TAntiban.AdjustZoom;
var
  Zoom, NewZoom: Int32;
  Attempts: Int32;
begin
  if (Self.MaxZoom = 0) then
    Self.MaxZoom := 100;

  Zoom := Options.GetZoomLevel();

  repeat
    Inc(Attempts);
    if Attempts > 100 then
      Exit;

    NewZoom := SRL.SkewedRand(Zoom, Self.MinZoom - 10, Self.MaxZoom + 10);
  until (NewZoom >= Self.MinZoom) and (NewZoom <= Self.MaxZoom) and (Abs(Zoom - NewZoom) > 15);

  Self.DebugLn('Adjust zoom: ' + ToString(NewZoom));

  Options.SetZoomLevel(NewZoom);
end;

function TAntiban.DismissRandom: Boolean;
var
  Name: String;
  Number: Int32;
  B: TBox;
begin
  Name := Chat.GetDisplayName();

  if (Name <> '') then
  begin
    B := Box(MainScreen.Center, 250, 100);

    if OCR.LocateText(B, Name, RS_FONT_BOLD_12, TOCRColorRule.Create([$00FFFF, 0]), 0.85) then
    begin
      if Self.DebugRandoms then
      begin
        CreateDirectory('randoms');

        Number := Length(GetFiles('randoms/', 'png'));
        if Number > 1000 then
          TerminateScript('Lots of randoms debugged');

        SaveScreenshot('randoms/' + IntToStr(Number) + '.png');

        Wait(5000);
      end;
    end;
  end;
end;

function TAntiban.GenerateSwivelPoints(A: TPoint; invCircularity:Double; curls: Int32; baseRad:Int32; direction:Boolean): TPointArray;
var
  t,o,rr: Double;
  i,j,k,rad: Int32;
  vec,prev: Vector2;
  v,tmp: array of Vector2;
  pts: TPointArray;
  c: TPoint;
begin
  o := Random(360);
  for j:=1 to curls do
  begin
    v := [];
    rad := baseRad;
    c := Point(a.x+rad, a.y+rad).Rotate(180-o, A);

    pts := TPAFromCircle(c.x, c.y, rad);
    pts.SortCircle(c, Round(o), Direction);
    pts := pts.Offset(a.x-pts[0].x, a.y-pts[0].y);

    rr := Round(rad*invCircularity);

    v += [pts[0].x, pts[0].y];
    for i:=1 to High(pts) with 35 do
      v += [pts[i].x+Random(-rr, rr), pts[i].y+Random(-rr, rr)];
    v += [pts[High(pts)].x+Random(-rr, rr), pts[High(pts)].y+Random(-rr, rr)];

    rad := Round(rad * Round(srl.SkewedRand(1.2,0.9,1.7)));

    t := 0;
    prev := v[0];
    while t <= 1 do
    begin
      tmp := Copy(v);
      for i:=High(tmp) downto 1 do
        for k:=0 to i-1 do
        begin
          tmp[k].x := tmp[k].x + (tmp[k+1].x - tmp[k].x) * t;
          tmp[k].y := tmp[k].y + (tmp[k+1].y - tmp[k].y) * t;
        end;
      vec := tmp[0];

      Result += TPAFromLine(Round(prev.x),Round(prev.y), Round(vec.x),Round(vec.y));
      prev := vec;
      t += 0.01;
    end;

    a := Result[High(Result)];
  end;
end;

procedure TAntiban.SwivelNear(start: TPoint; invCircularity: Double; curls, radius: Int32; dir:Boolean; maxSpeed: Double=22; minSpeed: Double=9; baseSpeed: Double=14);
var
  p,q: TPoint;
  i: Int32;
  swivel: TPointArray;
  speed, d1, d2, asc: Double;
  fastMouse: TMouse;
begin
  fastMouse := Mouse;
  fastMouse.Speed := Random(15,20);
  fastMouse.CanIdle := False;

  q := Point(-1,-1);
  swivel := Self.GenerateSwivelPoints([start.x, start.y], invCircularity, curls, radius, dir);
  speed := baseSpeed;
  for i:=0 to High(swivel) do
  begin
    p := swivel[i];
    if p.DistanceTo(q) > Max(4, speed * 2) then
      fastMouse.Move(p.x, p.y);
    fastMouse.Teleport(p.x+Random(-1,1), p.y+Random(-1,1));

    q := p;
    d1 := swivel[i].AngleBetween(swivel[Min(High(swivel), i+20)]);
    d2 := swivel[i].AngleBetween(swivel[Min(High(swivel), i+40)]);
    asc := abs(srl.DeltaAngle(d1, d2));

    if High(swivel)-i < Speed then speed -= 1;

    if asc < 2.0 then speed += 2;
    speed := Min(maxSpeed, speed);
    speed := Max(minSpeed, speed - Random() * 0.5);

    Sleep(1);
    Inc(i, Round(speed));
  end;
end;

procedure TAntiban.SwivelNear(start: TBox; radius: Int32; Iterations: Int32=1); overload;
begin
  for 1 to Iterations do
  begin
    Self.SwivelNear(srl.RandomPoint(start), 1/2, Round(srl.TruncatedGauss(1,4)), radius, srl.TruncatedGauss(0.0,1.25) > 0.5, Random(12,22), 9, 14);
    if Random() < 0.5 then Wait(0, 300, wdLeft);
  end;
end;

procedure TAntiban.Swivel(); overload;
begin
  for 1 to Round(srl.TruncatedGauss(1,4)) do
  begin
    Self.SwivelNear(mouse.Position, 1/2, Round(srl.TruncatedGauss(1,4)), Random(25,40), srl.TruncatedGauss(0.0,1.25) > 0.5, Random(12,22), 9, 14);
    if Random() < 0.5 then Wait(0, 300, wdLeft);
  end;
end;

//
//
// ---------------- End of random taks ----------------


function TAntiban.TimeUntilBreak(Task: TBreakTask): String;
begin
  Result := SRL.MsToTime(Max(0, Round(Task.NextAtTime - GetTimeRunning())), TIME_BARE);
end;

procedure TAntiban.SimulateBreaks;
const
  TEST_DAYS: UInt64 = 1000;
var
  Active, Inactive, Len, Prev: Double;
  I: Int32;
  Task: PBreakTask;
begin
  while (Active + Inactive < TEST_DAYS * ONE_DAY) do
  begin
    Task := @Self.Breaks[0];
    for I := 0 to High(Self.Breaks) do
      if Self.Breaks[I].NextAtTime < Task^.NextAtTime then
        Task := @Self.Breaks[I];

    Len := Abs(SRL.GaussRand(Task^.Length, Task^.Length * Task^.StdVar));
    Active += Task^.NextAtTime - Prev;
    Inactive += Len;

    for I := 0 to High(Self.Breaks) do
      Self.Breaks[I].NextAtTime += Len;

    Prev := Task^.NextAtTime;

    Task^.NextAtTime += Abs(SRL.GaussRand(Task^.Interval, Task^.Interval * Task^.StdVar));
  end;

  Inactive /= TEST_DAYS;
  Active /= TEST_DAYS;

  WriteLn('Running for ', SRL.MsToTime(Round(Active), TIME_FORMAL_LONG), ' per day, on average.');
end;

(*
var Antiban
~~~~~~~~~~~
  Global Antiban variable.
*)
var
  Antiban: TAntiban;

begin
  Antiban.Name := 'Antiban';
end;
