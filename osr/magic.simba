{$DEFINE SRL_MAGIC_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSSpellBook = (
    STANDARD,
    ANCIENT,
    LUNAR,
    ARCEUUS
  );

  ERSStandardSpell = (
    UNKNOWN,
    
    LUMBRIDGE_HOME_TELEPORT,
    WIND_STRIKE,
    CONFUSE,
    ENCHANT_CROSSBOW_BOLT,
    WATER_STRIKE,
    LVL1_ENCHANT,
    EARTH_STRIKE,

    WEAKEN,
    FIRE_STRIKE,
    BONES_TO_BANANAS,
    WIND_BOLT,
    CURSE,
    BIND,
    LOW_LEVEL_ALCHEMY,

    WATER_BOLT,
    VARROCK_TELEPORT,
    LVL2_ENCHANT,
    EARTH_BOLT,
    LUMBRIDGE_TELEPORT,
    TELEKINETIC_GRAB,
    FIRE_BOLT,

    FALADOR_TELEPORT,
    CRUMBLE_UNDEAD,
    TELEPORT_TO_HOUSE,
    WIND_BLAST,
    SUPERHEAT_ITEM,
    CAMELOT_TELEPORT,
    WATER_BLAST,

    LVL3_ENCHANT,
    IBAN_BLAST,
    SNARE,
    MAGIC_DART,
    ARDOUGNE_TELEPORT,
    EARTH_BLAST,
    HIGH_LEVEL_ALCHEMY,

    CHARGE_WATER_ORB,
    LVL4_ENCHANT,
    WATCHTOWER_TELEPORT,
    FIRE_BLAST,
    CHARGE_EARTH_ORB,
    BONES_TO_PEACHES,
    SARADOMIN_STRIKE,

    CLAWS_OF_GUTHIX,
    FLAMES_OF_ZAMORAK,
    TROLLHEIM_TELEPORT,
    WIND_WAVE,
    CHARGE_FIRE_ORB,
    TELEPORT_TO_APE_ATOLL,
    WATER_WAVE,

    CHARGE_AIR_ORB,
    VULNERABILITY,
    LVL5_ENCHANT,
    TELEPORT_TO_KOUREND,
    EARTH_WAVE,
    ENFEEBLE,
    TELEOTHER_LUMBRIDGE,

    FIRE_WAVE,
    ENTANGLE,
    STUN,
    CHARGE,
    WIND_SURGE,
    TELEOTHER_FALADOR,
    WATER_SURGE,

    TELE_BLOCK,
    STANDARD_TARGET_TELEPORT,
    LVL6_ENCHANT,
    TELEOTHER_CAMELOT,
    EARTH_SURGE,
    LVL7_ENCHANT,
    FIRE_SURGE
  );

  ERSAncientSpell = (
    UNKNOWN,
    
    EDGEVILLE_HOME_TELEPORT,
    SMOKE_RUSH,
    SHADOW_RUSH,
    PADDEWWA_TELEPORT,

    BLOOD_RUSH,
    ICE_RUSH,
    SENNTISTEN_TELEPORT,
    SMOKE_BURST,

    SHADOW_BURST,
    KHARYRLL_TELEPORT,
    BLOOD_BURST,
    ICE_BURST,

    LASSAR_TELEPORT,
    SMOKE_BLITZ,
    SHADOW_BLITZ,
    DAREEYAK_TELEPORT,

    BLOOD_BLITZ,
    ICE_BLITZ,
    CARRALLANGAR_TELEPORT,
    ANCIENT_TARGET_TELEPORT,

    SMOKE_BARRAGE,
    SHADOW_BARRAGE,
    ANNAKARL_TELEPORT,
    BLOOD_BARRAGE,

    ICE_BARRAGE,
    GHORROCK_TELEPORT
  );

  ERSLunarSpell = (
    UNKNOWN,
    
    LUNAR_HOME_TELEPORT,
    BAKE_PIE,
    GEOMANCY,
    CURE_PLANT,
    MONSTER_EXAMINE,

    NPC_CONTACT,
    CURE_OTHER,
    HUMIDIFY,
    MOONCLAN_TELEPORT,
    TELE_GROUP_MOONCLAN,

    CURE_ME,
    OURANIA_TELEPORT,
    HUNTER_KIT,
    WATERBIRTH_TELEPORT,
    TELE_GROUP_WATERBIRTH,

    CURE_GROUP,
    STAT_SPY,
    BARBARIAN_TELEPORT,
    TELE_GROUP_BARBARIAN,
    SPIN_FLAX,

    SUPERGLASS_MAKE,
    TAN_LEATHER,
    KHAZARD_TELEPORT,
    TELE_GROUP_KHAZARD,
    DREAM,

    STRING_JEWELLERY,
    STAT_RESTORE_POT_SHARE,
    MAGIC_IMBUE,
    FERTILE_SOIL,
    BOOST_POTION_SHARE,

    FISHING_GUILD_TELEPORT,
    BOUNTY_TELEPORT,
    TELE_GROUP_FISHING_GUILD,
    PLANK_MAKE,
    CATHERBY_TELEPORT,

    TELE_GROUP_CATHERBY,
    RECHARGE_DRAGONSTONE,
    ICE_PLATEU_TELEPORT,
    TELE_GROUP_ICE_PLATEU,
    ENERGY_TRANSFER,

    HEAL_OTHER,
    VENGEANCE_OTHER,
    VENGEANCE,
    HEAL_GROUP,
    SPELLBOOK_SWAP
  );

  ERSArceuusSpell = (
    UNKNOWN,
    
    ARCEUUS_HOME_TELEPORT,
    REANIMATE_GOBLIN,
    LUMBRIDGE_GRAVEYARD_TELEPORT,
    REANIMATE_MONKEY,

    REANIMATE_IMP,
    REANIMATE_MINOTAUR,
    DRAYNOR_MANOR_TELEPORT,
    REANIMATE_SCORPION,

    REANIMATE_BEAR,
    REANIMATE_UNICORN,
    BATTLEFRONT_TELEPORT,
    REANIMATE_DOG,

    MIND_ALTAR_TELEPORT,
    REANIMATE_CHAOS_DRUID,
    RESPAWN_TELEPORT,
    REANIMATE_GIANT,

    SALVE_GRAVEYARD_TELEPORT,
    REANIMATE_OGRE,
    REANIMATE_ELF,
    REANIMATE_TROLL,

    FENKENSTRAINS_CASTLE_TELEPORT,
    REANIMATE_HORROR,
    REANIMATE_KALPHITE,
    WEST_ARDOUGNE_TELEPORT,

    REANIMATE_DAGANNOTH,
    REANIMATE_BLOODVELD,
    HARMONY_ISLAND_TELEPORT,
    REANIMATE_TZHAAR,

    CEMETERY_TELEPORT,
    REANIMATE_DEMON,
    REANIMATE_AVIANSIE,
    RESURRECT_CROPS,

    BARROWS_TELEPORT,
    REANIMATE_ABYSSAL_CREATURE,
    APE_ATOLL_TELEPORT,
    REANIMATE_DRAGON
  );

  TRSMagic = type TRSInterface;

procedure TRSMagic.Setup; override;
begin
  inherited;
  
  Self.Name := 'Magic';
end;

procedure TRSMagic.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSMagic.GetSpellBook(): ERSSpellBook;
var
  TabBox: TBox;
begin
  TabBox := GameTabs.GetTabBox(ERSGameTab.MAGIC);
  if SRL.CountColor(CTS2(4747414, 30, 0.10, 0.65), TabBox) > 250 then
    Exit(ERSSpellBook.STANDARD)
  else if SRL.CountColor(CTS2(7425690, 28, 0.84, 0.41), TabBox) > 270 then
    Exit(ERSSpellBook.ANCIENT)
  else if SRL.CountColor(CTS2(10850229, 26, 1.83, 0.68), TabBox) > 290 then
    Exit(ERSSpellBook.LUNAR)
  else if SRL.CountColor(CTS2(5584975, 17, 1.20, 1.22), TabBox) > 290 then
    Exit(ERSSpellBook.ARCEUUS)
  else
    Exit(ERSSpellBook.STANDARD);
end;

function TRSMagic.IsSpellBook(SpellBook: ERSSpellBook): Boolean;
begin
  Result := SpellBook = Self.GetSpellBook();
end;

function TRSMagic.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.MAGIC);
end;

function TRSMagic.Open: Boolean;
begin
  Result := Self.IsOpen() or GameTabs.Open(ERSGameTab.MAGIC);
end;

function TRSMagic.GetSpellBoxes: TBoxArray;
begin
  if Self.IsSpellBook(ERSSpellBook.STANDARD) then
    Result := Grid(7, 10, 23, 23, [3, 1], [Self.X1 + 2, Self.Y1 + 1])
  else if Self.IsSpellBook(ERSSpellBook.ANCIENT) then
    Result := Result := Grid(4, 7, 23, 23, [25, 13], [Self.X1 + 8, Self.Y1 + 1])
  else if Self.IsSpellBook(ERSSpellBook.LUNAR) then
    Result := Grid(5, 9, 23, 23, [17, 4], [Self.X1 + 2, Self.Y1 + 1])
  else if Self.IsSpellBook(ERSSpellBook.ARCEUUS) then
    Result := Result := Grid(4, 9, 23, 23, [25, 4], [Self.X1 + 8, Self.Y1 + 1])
  else
    Result := Grid(7, 10, 23, 23, [3, 1], [Self.X1 + 2, Self.Y1 + 1]);
end;

function TRSMagic.GetSpellBox(Spell: ERSStandardSpell): TBox; overload;
begin
  Result := Self.GetSpellBoxes()[Spell-1]; // -1 to skip ERSStandardSpell.UNKNOWN
end;

function TRSMagic.GetSpellBox(Spell: ERSAncientSpell): TBox; overload;
begin
  Result := Self.GetSpellBoxes()[Spell-1];
end;

function TRSMagic.GetSpellBox(Spell: ERSLunarSpell): TBox; overload;
begin
  Result := Self.GetSpellBoxes()[Spell-1];
end;

function TRSMagic.GetSpellBox(Spell: ERSArceuusSpell): TBox; overload;
begin
  Result := Self.GetSpellBoxes()[Spell-1];
end;

function TRSMagic.PointToSpell(P: TPoint): Int32;
var
  I: Int32;
  Spells: TBoxArray;
begin
  Spells := Self.GetSpellBoxes();
  for I := 0 to High(Spells) do
    if Spells[I].Contains(P) then
      Exit(I);

  Result := -1;
end;

function TRSMagic.MouseOver(Spell: ERSStandardSpell): Boolean; overload;
begin
  Result := Self.Open() and Self.IsSpellBook(ERSSpellBook.STANDARD);

  if Result then
    Mouse.Move(Self.GetSpellBox(Spell));
end;

function TRSMagic.MouseOver(Spell: ERSAncientSpell): Boolean; overload;
begin
  Result := Self.Open() and Self.IsSpellBook(ERSSpellBook.ANCIENT);

  if Result then
    Mouse.Move(Self.GetSpellBox(Spell));
end;

function TRSMagic.MouseOver(Spell: ERSLunarSpell): Boolean; overload;
begin
  Result := Self.Open() and Self.IsSpellBook(ERSSpellBook.LUNAR);

  if Result then
    Mouse.Move(Self.GetSpellBox(Spell));
end;

function TRSMagic.MouseOver(Spell: ERSArceuusSpell): Boolean; overload;
begin
  Result := Self.Open() and Self.IsSpellBook(ERSSpellBook.ARCEUUS);

  if Result then
    Mouse.Move(Self.GetSpellBox(Spell));
end;

function TRSMagic.CanActivate(Spell: ERSStandardSpell): Boolean;
begin
  Result := (Spell <> ERSStandardSpell.UNKNOWN) and Self.Open() and (SRL.PeakBrightness(Self.GetSpellBox(Spell)) > 35);
end;

function TRSMagic.CanActivate(Spell: ERSAncientSpell): Boolean; overload;
begin
Result := (Spell <> ERSAncientSpell.UNKNOWN) and Self.Open() and (SRL.PeakBrightness(Self.GetSpellBox(Spell)) > 35);
end;

function TRSMagic.CanActivate(Spell: ERSLunarSpell): Boolean; overload;
begin
Result := (Spell <> ERSLunarSpell.UNKNOWN) and Self.Open() and (SRL.PeakBrightness(Self.GetSpellBox(Spell)) > 35);
end;

function TRSMagic.CanActivate(Spell: ERSArceuusSpell): Boolean; overload;
begin
Result := (Spell <> ERSArceuusSpell.UNKNOWN) and Self.Open() and (SRL.PeakBrightness(Self.GetSpellBox(Spell)) > 35);
end;

function TRSMagic.IsSpellSelected(Spell: ERSStandardSpell): Boolean; overload;
begin
  Result := (Spell <> ERSStandardSpell.UNKNOWN) and (SRL.CountColor($FFFFFF, Self.GetSpellBox(Spell)) > 10);
end;

function TRSMagic.IsSpellSelected(Spell: ERSAncientSpell): Boolean; overload;
begin
  Result := (Spell <> ERSAncientSpell.UNKNOWN) and (SRL.CountColor($FFFFFF, Self.GetSpellBox(Spell)) > 10);
end;

function TRSMagic.IsSpellSelected(Spell: ERSLunarSpell): Boolean; overload;
begin
  Result := (Spell <> ERSLunarSpell.UNKNOWN) and (SRL.CountColor($FFFFFF, Self.GetSpellBox(Spell)) > 10);
end;

function TRSMagic.IsSpellSelected(Spell: ERSArceuusSpell): Boolean; overload;
begin
  Result := (Spell <> ERSArceuusSpell.UNKNOWN) and (SRL.CountColor($FFFFFF, Self.GetSpellBox(Spell)) > 10);
end;

function TRSMagic.GetSelectedStandardSpell: ERSStandardSpell;
var
  Spell: ERSStandardSpell;
begin
  if (not Self.IsSpellBook(ERSSpellBook.STANDARD)) or (not Self.Open()) then
    Exit;
    
  for Spell in ERSStandardSpell do
    if Self.IsSpellSelected(Spell) then
      Exit(Spell);
end;

function TRSMagic.GetSelectedAncientSpell: ERSAncientSpell;
var
  Spell: ERSAncientSpell;
begin
  if (not Self.IsSpellBook(ERSSpellBook.ANCIENT)) or (not Self.Open()) then
    Exit;

  for Spell in ERSAncientSpell do
    if Self.IsSpellSelected(Spell) then
      Exit(Spell);
end;

function TRSMagic.GetSelectedLunarSpell: ERSLunarSpell;
var
  Spell: ERSLunarSpell;
begin
  if (not Self.IsSpellBook(ERSSpellBook.LUNAR)) or (not Self.Open()) then
    Exit;

  for Spell in ERSLunarSpell do
    if Self.IsSpellSelected(Spell) then
      Exit(Spell);
end;

function TRSMagic.GetSelectedArceuusSpell: ERSArceuusSpell;
var
  Spell: ERSArceuusSpell;
begin
  if (not Self.IsSpellBook(ERSSpellBook.ARCEUUS)) or (not Self.Open()) then
    Exit;
    
  for Spell in ERSArceuusSpell do
    if Self.IsSpellSelected(Spell) then
      Exit(Spell);
end;

function TRSMagic.CastSpell(Spell: ERSStandardSpell): Boolean; overload;
var
  Selected: ERSStandardSpell;
begin
  if not Self.IsSpellBook(ERSSpellBook.STANDARD) or not Self.Open() then
    Exit;

  Selected := Self.GetSelectedStandardSpell();
  if Selected = Spell then
    Exit(True);

  if (Selected <> ERSStandardSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen() and (Self.GetSelectedStandardSpell() = Spell)) or Inventory.IsOpen(), 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSMagic.CastSpell(Spell: ERSAncientSpell): Boolean; overload;
var
  Selected: ERSAncientSpell;
begin
  if not Self.Open() or not Self.IsSpellBook(ERSSpellBook.ANCIENT) then
    Exit(False);

  Selected := Self.GetSelectedAncientSpell();
  if Selected = Spell then
    Exit(True);

  if (Selected <> ERSAncientSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen and (Self.GetSelectedAncientSpell() = Spell)) or Inventory.IsOpen(), 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSMagic.CastSpell(Spell: ERSLunarSpell): Boolean; overload;
var
  Selected: ERSLunarSpell;
begin
  if not Self.Open() or not Self.IsSpellBook(ERSSpellBook.LUNAR) then
    Exit(False);

  Selected := Self.GetSelectedLunarSpell();
  if Selected = Spell then
    Exit(True);

  if (Selected <> ERSLunarSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen and (Self.GetSelectedLunarSpell() = Spell)) or Inventory.IsOpen(), 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSMagic.CastSpell(Spell: ERSArceuusSpell): Boolean; overload;
var
  Selected: ERSArceuusSpell;
begin
  if not Self.Open() or not Self.IsSpellBook(ERSSpellBook.ARCEUUS) then
    Exit(False);

  Selected := Self.GetSelectedArceuusSpell();
  if Selected = Spell then
    Exit(True);

  if (Selected <> ERSArceuusSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen and (Self.GetSelectedArceuusSpell() = Spell)) or Inventory.IsOpen(), 50, SRL.TruncatedGauss(1000, 2000));
end;

procedure TRSMagic.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Self.GetSpellBoxes(), False, $00FFFF);
end;

var
  Magic: TRSMagic;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Magic.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Magic.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Magic.Draw(Bitmap);
end;
