{$DEFINE SRL_COMBAT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  COMBAT_STYLE_ACCURATE  = 'Accurate';
  COMBAT_STYLE_RAPID     = 'Rapid';
  COMBAT_STYLE_LONGRANGE = 'Longrange';
  COMBAT_STYLE_BASH      = 'Bash';
  COMBAT_STYLE_POUND     = 'Pound';
  COMBAT_STYLE_FOCUS     = 'Focus';
  COMBAT_STYLE_CHOP      = 'Chop';
  COMBAT_STYLE_SLASH     = 'Slash';
  COMBAT_STYLE_LUNGE     = 'Lunge';
  COMBAT_STYLE_BLOCK     = 'Block';
  COMBAT_STYLE_FLICK     = 'Flick';
  COMBAT_STYLE_LASH      = 'Lash';
  COMBAT_STYLE_DEFLECT   = 'Deflect';
  COMBAT_STYLE_SWIPE     = 'Swipe';
  COMBAT_STYLE_SMASH     = 'Smash';
  
var
  COMBAT_STYLES = [
    COMBAT_STYLE_ACCURATE,
    COMBAT_STYLE_RAPID,
    COMBAT_STYLE_LONGRANGE,
    COMBAT_STYLE_BASH,
    COMBAT_STYLE_POUND,
    COMBAT_STYLE_FOCUS,
    COMBAT_STYLE_CHOP,
    COMBAT_STYLE_SLASH,
    COMBAT_STYLE_LUNGE,
    COMBAT_STYLE_BLOCK,
    COMBAT_STYLE_FLICK,
    COMBAT_STYLE_LASH,
    COMBAT_STYLE_DEFLECT,
    COMBAT_STYLE_SWIPE,
    COMBAT_STYLE_SMASH
  ];

type
  TRSCombat = type TRSInterface;

procedure TRSCombat.Setup; override;
begin
  inherited;

  Self.Name := 'Combat';
end;

procedure TRSCombat.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSCombat.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.COMBAT);
end;

function TRSCombat.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.COMBAT);
end;

function TRSCombat.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[69,45], [148,24], [148,42], [69,30], [69,48]])
end;

function TRSCombat.GetCombatStyle: String;
var
  I: Int32;
  Buttons: TRSButtonArray;
begin
  if not Self.Open() then
    Exit;

  Buttons := Self.GetButtons();
  
  for I := 0 to High(Buttons) do
  begin
    if not Buttons[I].Enabled() then
      Continue;
      
    if Buttons[I].FindText(COMBAT_STYLES, RS_FONT_PLAIN_11, Result) then
      Exit;
  end;
end;

function TRSCombat.SetCombatStyle(Style: String): Boolean;
var
  Buttons: TRSButtonArray;
  Button: TRSButton;
begin
  if not Self.Open() then
    Exit;
    
  Buttons := Self.GetButtons();
  for Button in Buttons do
    if Button.FindText(Style, RS_FONT_PLAIN_11) then
    begin
      Result := Button.Enable();
      
      Exit;
    end;
end;

function TRSCombat.GetAutoRetaliate: Boolean;
var
  Buttons: TRSButtonArray;
  Button: TRSButton;
begin
  if not Self.Open() then
    Exit;
    
  Buttons := Self.GetButtons();
  for Button in Buttons do
    if Button.FindText('Auto Retaliate', RS_FONT_PLAIN_12) then
    begin
      Result := Button.Enabled();
      
      Exit;
    end;
end;

function TRSCombat.SetAutoRetaliate(Value: Boolean): Boolean;
var
  Buttons: TRSButtonArray;
  Button: TRSButton;
begin
  if not Self.Open() then
    Exit;
    
  Buttons := Self.GetButtons();
  for Button in Buttons do
    if Button.FindText('Auto Retaliate', RS_FONT_PLAIN_12) then
    begin
      Result := (Value and Button.Enable()) or (not Value and Button.Disable());
      
      Exit;
    end;
end;

function TRSCombat.GetWeapon: String;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit;

  B := Self.Bounds;
  B.Y2 := B.Y1 + 25;

  Result := OCR.Recognize(B, [2070783], RS_FONT_QUILL_8, False);
end;

var
  Combat: TRSCombat;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Combat.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Combat.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Combat.Draw(Bitmap);
end;

