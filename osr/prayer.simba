(*
Prayer
======
Methods to interact with the prayer tab and quick prayers.
*)

{$DEFINE SRL_PRAYER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSPrayer = (
    THICK_SKIN,
    BURST_OF_STRENGTH,
    CLARITY_OF_THOUGHT,
    SHARP_EYE,
    MYSTIC_WILL,

    ROCK_SKIN,
    SUPERHUMAN_STRENGTH,
    IMPROVED_REFLEXES,
    RAPID_RESTORE,
    RAPID_HEAL,

    PROTECT_ITEM,
    HAWK_EYE,
    MYSTIC_LORE,
    STEEL_SKIN,
    ULTIMATE_STRENGTH,

    INCREDIBLE_REFLEXES,
    PROTECT_FROM_MAGIC,
    PROTECT_FROM_MISSILES,
    PROTECT_FROM_MELEE,
    EAGLE_EYE,

    MYSTIC_MIGHT,
    RETRIBUTION,
    REDEMPTION,
    SMITE,
    PRESERVE,

    CHIVALRY,
    PIETY,
    RIGOUR,
    AUGURY
  );

  TRSPrayer = type TRSInterface;
  TRSQuickPrayer = type TRSInterface;


(*
Prayer.Setup
~~~~~~~~~~~~
.. pascal:: procedure TRSPrayer.Setup;

Initializes Prayer variables.

.. note:: This is automatically called on the **Prayer** variable.
*)
procedure TRSPrayer.Setup; overload;
begin
  if Self <> [] then
    Exit;
  Self.Name := 'Prayer';
end;

(*
Prayer.SetupAlignment
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSPrayer.SetupAlignment(Mode: ERSClientMode); override;

Setups up the interface aligment for the current client mode.

.. note:: This is automatically called on the **TRSClient.ClientModeChanged** function.
*)
procedure TRSPrayer.SetupAlignment(Mode: ERSClientMode); override;
begin
  Self.Mode := Mode;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

(*
Prayer.GetPrayerLevel
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.GetPrayerLevel: Int32;

**Prayer.GetPrayerLevel** is used to retrieve the prayer level from the prayer tab.

Example
-------

.. code-block:: pascal

  Writeln Prayer.GetPrayerLevel;
*)
function TRSPrayer.GetPrayerLevel: Int32;
var
  Text: String;
begin
  Result := -1;

  if (GameTabs.GetCurrentTab() = ERSGameTab.PRAYER) then
  begin
    Text := OCR.Recognize(Self.Bounds, TOCRColorRule.Create([$1F98FF]), RS_FONT_PLAIN_12); 
    
    Result := Text.Before('/').ExtractNumber();
  end;
end;

(*
Prayer.IsOpen
~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.IsOpen: Boolean;

Returns true if the Prayer tab is open.
*)
function TRSPrayer.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.PRAYER) and (Self.GetPrayerLevel <> -1);
end;

(*
Prayer.Open
~~~~~~~~~~~
.. pascal:: function TRSPrayer.Open: Boolean;

Attempts to open the prayer tab.

Example
-------

.. code-block:: pascal

  Prayer.Open;
*)
function TRSPrayer.Open: Boolean;
begin
  Result := Self.IsOpen() or GameTabs.Open(ERSGameTab.PRAYER);
end;

(*
Prayer.GetPrayerBoxes
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.GetPrayerBoxes: TBoxArray;
.. pascal:: function TRSPrayer.GetPrayerBoxes(Prayers: array of ERSPrayer): TBoxArray; overload;

Internal function to get the bounds of all or the specified prayers.
*)
function TRSPrayer.GetPrayerBoxes: TBoxArray;
begin
  Result := Grid(5, 6, 33, 33, [4, 4], [Self.X1 + 1, Self.Y1 + 10])
end;

(*
Prayer.GetPrayerBox
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.GetPrayerBox(Prayer: ERSPrayer): TBox;

Internal function to get the bounds of a single prayer.
*)
function TRSPrayer.GetPrayerBox(Prayer: ERSPrayer): TBox;
begin
  Result := Self.GetPrayerBoxes[Prayer];
end;

function TRSPrayer.GetPrayerBoxes(Prayers: array of ERSPrayer): TBoxArray; overload;
var
  Prayer: ERSPrayer;
begin
  for Prayer in Prayers do
    Result += Self.GetPrayerBox(Prayer);
end;

(*
Prayer.PointToPrayer
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.PointToPrayer(P: TPoint): Int32;

Returns the prayer number that **P** is part of.
-1 is returned if there's no result.

Example
-------

.. code-block:: pascal

  WriteLn('Mouse is hovering prayer ', Prayer.PointToPrayer(Mouse.Position));
*)
function TRSPrayer.PointToPrayer(P: TPoint): Int32;
var
  I: Int32;
  Prayers: TBoxArray;
begin
  Prayers := Self.GetPrayerBoxes;
  for I := 0 to High(Prayers) do
    if Prayers[I].Contains(P) then
      Exit(I);

  Result := -1;
end;

(*
Prayer.MouseOver
~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.MouseOver(Prayer: ERSPrayer): Boolean;

Hovers the specified prayer.

Example
-------

.. code-block:: pascal

  Prayer.MouseOver(ERSPrayer.PROTECT_FROM_MELEE);
*)
function TRSPrayer.MouseOver(Prayer: ERSPrayer): Boolean;
begin
  if not Self.Open() then
    Exit();

  Result := True;
  Mouse.Move(Self.GetPrayerBox(Prayer));
end;

(*
Prayer.CanActivate
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.CanActivate(Prayer: ERSPrayer): Boolean;

Returns true if we have enough level and have unlocked the specified prayer.

Example
-------

.. code-block:: pascal

  WriteLn Prayer.CanActivate(ERSPrayer.PROTECT_FROM_MELEE);
*)
function TRSPrayer.CanActivate(Prayer: ERSPrayer): Boolean;
begin
  if not Self.IsOpen then
    Exit;

  Result := SRL.PeakBrightness(Self.GetPrayerBox(Prayer)) > 55;
end;

(*
Prayer.GetAvailablePrayers
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.GetAvailablePrayers: array of ERSPrayer;

Returns an array of all available prayers.
*)
function TRSPrayer.GetAvailablePrayers: array of ERSPrayer;
var
  Prayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen() then
    Exit;

  for Prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.CanActivate(ERSPrayer(Prayer)) then
      Result += Prayer;
end;

(*
Prayer.IsPrayerActive
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.IsPrayerActive(Prayer: ERSPrayer): Boolean;

Returns true if the specified prayer is active right now.

Example
-------

.. code-block:: pascal

  WriteLn Prayer.IsPrayerActive(ERSPrayer.SMITE);
*)
function TRSPrayer.IsPrayerActive(Prayer: ERSPrayer): Boolean;
var
  B: TBox;
begin
  if not Self.IsOpen() then
    Exit(False);

  B := Self.GetPrayerBox(Prayer);
  Result := SRL.CountColor(CTS0(7315120, 27), B) > 10;
end;

(*
Prayer.GetActivePrayers
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.GetActivePrayers: array of ERSPrayer;

Returns an array of all active prayers.
*)
function TRSPrayer.GetActivePrayers: array of ERSPrayer;
var
  Prayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen() then
    Exit;

  for Prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.IsPrayerActive(ERSPrayer(Prayer)) then
      Result += Prayer;
end;

(*
Prayer.PrayerActive
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.PrayerActive: Boolean;

Returns true if any prayer is active.
*)
function TRSPrayer.PrayerActive: Boolean;
begin
  if not Self.Open then
    Exit;

  Result := Self.GetActivePrayers <> [];
end;

(*
Prayer.ActivatePrayer
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.ActivatePrayer(Prayer: ERSPrayer): Boolean;

Attempts to activate the specified prayer.

Example
-------

.. code-block:: pascal

  Prayer.ActivatePrayer(ERSPrayer.PROTECT_FROM_MELEE);
*)
function TRSPrayer.ActivatePrayer(Prayer: ERSPrayer): Boolean;
begin
  if not Self.Open or not Self.CanActivate(Prayer) then
    Exit(False);

  if Self.IsPrayerActive(Prayer) then
    Exit(True);

  Mouse.Click(Self.GetPrayerBox(Prayer), MOUSE_LEFT);

  Result := WaitUntil(Self.IsPrayerActive(Prayer), 50, SRL.TruncatedGauss(1000, 2000));
end;

(*
Prayer.ActivatePrayer
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.ActivatePrayer(Prayers: array of ERSPrayer): Boolean; overload;

Attempts to activate the several prayers.

Example
-------

.. code-block:: pascal

  Prayer.ActivatePrayer([ERSPrayer.PROTECT_FROM_MELEE, ERSPrayer.PIETY]);
*)
function TRSPrayer.ActivatePrayer(Prayers: array of ERSPrayer): Boolean; overload;
var
  Prayer: ERSPrayer;
begin
  for Prayer in Prayers do
    Self.ActivatePrayer(Prayer);
end;

procedure TRSPrayer.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Self.GetPrayerBoxes, $00FFFF);
  Bitmap.DrawBoxes(Self.GetPrayerBoxes(Self.GetAvailablePrayers), $00FF22);
  Bitmap.DrawBoxes(Self.GetPrayerBoxes(Self.GetActivePrayers), $FFFFFF);
end;

(*
var Prayer
~~~~~~~~~~
  Global Prayer variable.
*)
var
  Prayer: TRSPrayer;

(*
QuickPrayer.Setup
~~~~~~~~~~~~~~~~~
.. pascal:: procedure QuickPrayer.Setup;

Initializes QuickPrayer variables.

.. note:: This is automatically called on the **QuickPrayer** variable.
*)

(*
QuickPrayer.Setup
~~~~~~~~~~~~
.. pascal:: procedure QuickPrayer.Setup;

Initializes QuickPrayer variables.

.. note:: This is automatically called on the **QuickPrayer** variable.
*)
procedure TRSQuickPrayer.Setup; overload;
begin
  if Self <> [] then
    Exit;
  Self.Name := 'QuickPrayer';
end;

(*
QuickPrayer.SetupSetupAlignment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure QuickPrayer.SetupSetupAlignment(Mode: ERSClientMode); override;

Setups up the interface aligment for the current client mode.

.. note:: This is automatically called on the **TRSClient.ClientModeChanged** function.
*)
procedure TRSQuickPrayer.SetupAlignment(Mode: ERSClientMode); override;
begin
  Self.Mode := Mode;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

(*
QuickPrayer.IsOpen
~~~~~~~~~~~~~~~~~~
.. pascal:: function QuickPrayer.IsOpen: Boolean;
.. pascal:: function QuickPrayer.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;

Returns true if the quick prayers are open.
*)
function TRSQuickPrayer.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.PRAYER) and (Prayer.GetPrayerLevel = -1);
end;

function TRSQuickPrayer.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), Interval, WaitTime);
end;

(*
QuickPrayer.Open
~~~~~~~~~~~~~~~~
.. pascal:: function QuickPrayer.Open: Boolean;

Attempts to open the quick prayers.

Example
-------

.. code-block:: pascal

  QuickPrayer.Open;
*)
function TRSQuickPrayer.Open: Boolean;
begin
  if Self.IsOpen then
    Exit(True);

  Mouse.Move(Minimap.GetPrayerCircle);
  ChooseOption.Open;
  if ChooseOption.Select('Setup') then
    Result := Self.IsOpen(2000);
end;

(*
QuickPrayer.GetButton
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function QuickPrayer.GetButton: TBox;

Internal function that returns the bounds of the quick prayers close button.
*)
function TRSQuickPrayer.GetButton: TBox;
begin
  Result := [Self.X1 + 50, Self.Y1 + 233, Self.X2 - 49, Self.Y2 - 7];
end;

(*
QuickPrayer.Close
~~~~~~~~~~~~~~~~~
.. pascal:: function QuickPrayer.Close: Boolean;

Attempts to close the quick prayers.

Example
-------

.. code-block:: pascal

  QuickPrayers.Close;
*)
function TRSQuickPrayer.Close: Boolean;
begin
  if not Self.IsOpen then
    Exit(True);

  Mouse.Click(Self.GetButton, MOUSE_LEFT);

  Result := WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(0, 1500), Random(1500, 3000));
end;

(*
QuickPrayer.IsPrayerSelected
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function QuickPrayer.IsPrayerSelected(QPrayer: ERSPrayer): Boolean;

Returns true if the specified quick prayer is selected.

Example
-------

.. code-block:: pascal

  WriteLn QuickPrayers.IsPrayerSelected(ERSPrayer.PROTECT_FROM_MAGIC);
*)
function TRSQuickPrayer.IsPrayerSelected(QPrayer: ERSPrayer): Boolean;
var
  TPA: TPointArray;
begin
  if not Self.IsOpen then
    Exit;

  Result := SRL.FindColors(TPA, CTS0($080CEF), Prayer.GetPrayerBox(QPrayer)) > 0;
end;

(*
QuickPrayer.GetSelectedPrayers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function QuickPrayer.GetSelectedPrayers: array of ERSPrayer;

Returns an array of all selected quick prayers

Example
-------

.. code-block:: pascal

  WriteLn QuickPrayers.GetSelectedPrayers;
*)
function TRSQuickPrayer.GetSelectedPrayers: array of ERSPrayer;
var
  QPrayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen() then
    Exit;

  for QPrayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.IsPrayerSelected(ERSPrayer(QPrayer)) then
      Result += QPrayer;
end;

(*
QuickPrayer.SelectPrayer
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function QuickPrayer.SelectPrayer(QPrayer: ERSPrayer): Boolean;
.. pascal:: function QuickPrayer.SelectPrayer(QPrayers: array of ERSPrayer): Boolean; overload;

Attempts to select the specified quick prayer/prayers.

Example
-------

.. code-block:: pascal

  QuickPrayers.SelectPrayer(ERSPrayer.PROTECT_ITEM);
*)
function TRSQuickPrayer.SelectPrayer(QPrayer: ERSPrayer): Boolean;
begin
  if not Self.Open then
    Exit;

  if Self.IsPrayerSelected(QPrayer) then
    Exit(True);

  Mouse.Click(Prayer.GetPrayerBox(QPrayer), MOUSE_LEFT);

  Result := WaitUntil(Self.IsPrayerSelected(QPrayer), 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSQuickPrayer.SelectPrayer(QPrayers: array of ERSPrayer): Boolean; overload;
var
  QPrayer: ERSPrayer;
begin
  for QPrayer in QPrayers do
    Self.SelectPrayer(QPrayer);
end;

procedure TRSQuickPrayer.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Prayer.GetPrayerBoxes(), $00FFFF);
  Bitmap.DrawBoxes(Prayer.GetPrayerBoxes(Prayer.GetAvailablePrayers), $00ff22);
  Bitmap.DrawBoxes(Prayer.GetPrayerBoxes(Self.GetSelectedPrayers), $FFFFFF);
  Bitmap.DrawBox(Self.GetButton, $00FFFF);
end;

(*
var QuickPrayer
~~~~~~~~~~~~~~~
  Global QuickPrayer variable.
*)
var
  QuickPrayer: TRSQuickPrayer;

(*
Minimap
=======

Methods to handle the minimap prayer orb.
*)

(*
Minimap.GetPrayerLevel
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.GetPrayerLevel: Int32;

**Minimap.GetPrayerLevel** is used to retrieve the prayer level from the minimap orb.

Example
-------

.. code-block:: pascal

  Writeln Minimap.GetPrayerLevel;
*)
function TRSMinimap.GetPrayerLevel: Int32;
begin
  Result := Self.GetOrbLevel(Self.GetPrayerCircle);
end;

(*
Minimap.IsPrayerEnabled
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.IsPrayerEnabled: Boolean;

**Minimap.IsPrayerEnabled** is used to retrieve the quick prayer state (enabled or disabled).

Example
-------

.. code-block:: pascal

  Writeln Minimap.IsPrayerEnabled;
*)
function TRSMinimap.IsPrayerEnabled: Boolean;
begin
  Result := SRL.CountColor(CTS0(1168105, 33), Self.GetPrayerCircle().Bounds) > 20;
end;

(*
Minimap.EnablePrayer
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.EnablePrayer: Boolean;

**Minimap.EnablePrayer** is used to enable quick prayers.

Example
-------

.. code-block:: pascal

  Minimap.EnablePrayer;
*)
function TRSMinimap.EnablePrayer: Boolean;
var
  T: UInt64;
begin
  if not Self.IsPrayerEnabled() then
  begin
    Mouse.Click(Self.GetPrayerCircle(), MOUSE_LEFT);

    T := GetTickCount() + Round(SRL.TruncatedGauss(1000, 2000));
    while (T > GetTickCount()) do
    begin
      if Self.IsPrayerEnabled() then
        Exit(True);

      Wait(0, 1000, wdLeft);
    end;
  end;
end;

(*
Minimap.DisablePrayer
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.DisablePrayer: Boolean;

**Minimap.DisablePrayer** is used to disable quick prayers.

Example
-------

.. code-block:: pascal

  Minimap.DisablePrayer;
*)
function TRSMinimap.DisablePrayer: Boolean;
var
  T: UInt64;
begin
  if Self.IsPrayerEnabled() then
  begin
    Mouse.Click(Self.GetPrayerCircle(), MOUSE_LEFT);

    T := GetTickCount() + Round(SRL.TruncatedGauss(1000, 2000));
    while (T > GetTickCount()) do
    begin
      if not Self.IsPrayerEnabled() then
        Exit(True);

      Wait(0, 1000, wdLeft);
    end;
  end;
end;



(*
Prayer.Open
~~~~~~~~~~~
.. pascal:: function TRSPrayer.Open: Boolean; override;

Overrides **Prayer.Open** to handle quick prayers if they are open.
*)
function TRSPrayer.Open: Boolean; override;
begin
  Result := Self.IsOpen or (GameTabs.Open(ERSGameTab.PRAYER) and QuickPrayer.Close);
end;

(*
Prayer.CanActivate
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.CanActivate(Prayer: ERSPrayer): Boolean; override;

Overrides **Prayer.CanActivate** to handle quick prayers.
*)
function TRSPrayer.CanActivate(Prayer: ERSPrayer): Boolean; override;
begin
  if not Self.IsOpen and not QuickPrayer.IsOpen then
    Exit;

  Result := SRL.PeakBrightness(Self.GetPrayerBox(Prayer)) > 55;
end;

(*
Prayer.GetAvailablePrayers
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSPrayer.GetAvailablePrayers: array of ERSPrayer; override;

Overrides **Prayer.GetAvailablePrayers** to handle quick prayers.
*)
function TRSPrayer.GetAvailablePrayers: array of ERSPrayer; override;
var
  Prayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen and not QuickPrayer.IsOpen then
    Exit;

  for Prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.CanActivate(ERSPrayer(Prayer)) then
      Result += Prayer;
end;



procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Prayer.SetupAlignment(Self.Mode);
  QuickPrayer.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Prayer.Setup();
  QuickPrayer.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Prayer.Draw(Bitmap);
  QuickPrayer.Draw(Bitmap);
end;
