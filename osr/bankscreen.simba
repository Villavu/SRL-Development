(*
BankScreen
==========
Methods to interact with the bankscreen.
*)

{$DEFINE SRL_BANKSCREEN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  BANK_WITHDRAW_ALL         = -1;
  BANK_WITHDRAW_ALL_BUT_ONE = -2;

  BANK_WITHDRAW_1  = 1;
  BANK_WITHDRAW_5  = 5;
  BANK_WITHDRAW_10 = 10;

const
  BANK_DEPOSIT_ALL = -1;

  BANK_DEPOSIT_1  = 1;
  BANK_DEPOSIT_5  = 5;
  BANK_DEPOSIT_10 = 10;

type
  ERSBankLocation = (
    BANK_LOCATION_CASTLE_WARS,
    BANK_LOCATION_FEROX,
    BANK_LOCATION_GRAND_EXCHANGE,
    BANK_LOCATION_FALADOR_EAST,
    BANK_LOCATION_WINTERTODT
  );

  TRSBankScreen = record(TRSInterface)
    BUTTON_REARRANGE_SWAP_OFF: TRSInterfaceButton;
    BUTTON_REARRANGE_SWAP_ON: TRSInterfaceButton;

    BUTTON_REARRANGE_INSERT_OFF: TRSInterfaceButton;
    BUTTON_REARRANGE_INSERT_ON: TRSInterfaceButton;

    BUTTON_WITHDRAW_ITEM_OFF: TRSInterfaceButton;
    BUTTON_WITHDRAW_ITEM_ON: TRSInterfaceButton;

    BUTTON_WITHDRAW_NOTE_OFF: TRSInterfaceButton;
    BUTTON_WITHDRAW_NOTE_ON: TRSInterfaceButton;

    BUTTON_QUANTITY_1_OFF: TRSInterfaceButton;
    BUTTON_QUANTITY_1_ON: TRSInterfaceButton;

    BUTTON_QUANTITY_5_OFF: TRSInterfaceButton;
    BUTTON_QUANTITY_5_ON: TRSInterfaceButton;

    BUTTON_QUANTITY_10_OFF: TRSInterfaceButton;
    BUTTON_QUANTITY_10_ON: TRSInterfaceButton;

    BUTTON_QUANTITY_CUSTOM_OFF: TRSInterfaceButton;
    BUTTON_QUANTITY_CUSTOM_ON: TRSInterfaceButton;

    BUTTON_QUANTITY_ALL_OFF: TRSInterfaceButton;
    BUTTON_QUANTITY_ALL_ON: TRSInterfaceButton;

    BUTTON_DEPOSIT_INVENTORY: TRSInterfaceButton;
    BUTTON_DEPOSIT_INVENTORY_HOVER: TRSInterfaceButton;

    BUTTON_DEPOSIT_EQUIPMENT: TRSInterfaceButton;
    BUTTON_DEPOSIT_EQUIPMENT_HOVER: TRSInterfaceButton;

    BUTTON_PLACEHOLDERS: TRSInterfaceButton;
    BUTTON_PLACEHOLDERS_HOVER: TRSInterfaceButton;

    BUTTON_SEARCH_OFF: TRSInterfaceButton;
    BUTTON_SEARCH_OFF_HOVER: TRSInterfaceButton;
    BUTTON_SEARCH_ON: TRSInterfaceButton;
    BUTTON_SEARCH_ON_HOVER: TRSInterfaceButton;

    BUTTON_CLOSE: TRSInterfaceButton;
    BUTTON_CLOSE_HOVER: TRSInterfaceButton;

    BUTTON_SCROLLED_TOP: TRSInterfaceButton;

    FINDER_UPTEXT: TStringArray;
    FINDER_OPTION: TStringArray;
  end;

//Gets the whole area of the item slots. This should probably named differently.
function TRSBankScreen.GetSlotsArea: TBox; constref;
begin
  Result.X1 := Self.X1 + 57;
  Result.Y1 := Self.Y1 + 77;
  Result.X2 := Self.Width - 48;
  Result.Y2 := Self.Height - 37;
end;

function TRSBankScreen.GetTabBoxes: TBoxArray; constref;
begin
  Result := Grid(10, 1, 36, 30, [4, 0], [Self.X1 + 46, Self.Y1 + 42]);
end;

//Gets the Button up, Slider and Button down boxes.
function TRSBankScreen.GetScrollBoxes: TBoxArray; constref;
var
  Box: TBox;
begin
  Box.X1 := Self.X2 - 21;
  Box.X2 := Box.X1 + 15;

  Box.Y1 := Self.Y1 + 77;
  Box.Y2 := Box.Y1 + 15;   //up arrow
  Result += Box;

  Box.Y1 += 16;
  Box.Y2 := Self.Y2 - 60;  //slider
  Result += Box;

  Box.Y2 := Self.Y2 - 44;
  Box.Y1 := Box.Y2 - 15;  //down arrow
  Result += Box;
end;

//Splits the slot area according to the tabs divider lines
function TRSBankScreen.GetTabAreas: TBoxArray;
var
  Spacer: Int32;
  TPA: TPointArray;
  Box, Tab, TabDivider: TBox;
begin
  Box := Self.GetSlotsArea;

  while True do
  begin
    Tab.Y1 := Box.Y1;
    Tab.X1 := Box.X1;
    Tab.X2 := Box.X2;
    if Box.Y1>Box.Y2 then
      Exit(Result);

    if SRL.FindColors(TPA, CTS2(2832191, 1, 0.48, 1.53), Box) > 0 then
    begin
      TabDivider := TPA.Bounds;
      Tab.Y2 := TabDivider.Y1 - 1;
      Result += Tab;
      Box.Y1 := TabDivider.Y1 + 7;
    end
    else
    begin
      Tab.Y2 := Box.Y2;
      Result += Tab;
      Exit(Result);
    end;
  end;
end;

(*
BankScreen.GetSlotBoxesFromTab
~~~~~~~~~~~~~~~~~~~

Gets the slot boxes independently of the scroll position
within a tab area (BankScreen.GetTabAreas).

For the top most "Tab area" the slots are aligned with their amount text.
(See SRL.GetItemAmount(Area: TBox)) to see what I mean).

*)
function TRSBankScreen.GetSlotBoxesFromTab(Tab: TBox): TBoxArray;
  (*
    function GetAmountsTPA(Box: TBox): TPointArray;
    returns a TPA containing the item amounts in the bank.
  *)
  function GetAmountsTPA(Box: TBox): TPointArray;
  const
    TEXT_COLORS: TIntegerArray = [$00FFFF, $00FEFE, $FFFFFF, $80FF00]; // Million = white | Billion = green etc.
  var
    i: Int32;
    TPA: TPointArray;
  begin
    for i := 0 to High(TEXT_COLORS) do
    begin
      if SRL.FindColors(TPA,  CTS0(TEXT_COLORS[i]), Box) > 0 then
        Result += TPA;
    end;
  end;

  function GetTabY1(TPA: TPointArray; BoxY1: Int32): Int32;
  var
    AmountBox: TBox;
    BoxArray: TBoxArray;
  begin
    BoxArray := TPA.Cluster(1000, 5).ToTBA;  // Splits the TPA into rows
    BoxArray.SortByY(False);
    AmountBox := BoxArray[0];         // Gets the bottom most "row of amounts"

    // Gets amount of possible rows and calculates the highest Y1.
    Result := AmountBox.Y1 - (((AmountBox.Y1 - BoxY1) div 36) * 36);
  end;

var
  Rows: Int32;
  ColorTPA: TPointArray;
  Box: TBox;
begin
  Box := Self.GetSlotsArea;
  Rows := (Tab.Y2 - Tab.Y1) div 36;

  if Tab = Box then // Checks if there's tab splitter lines.
  begin
    if Tab.Y1 <= Tab.Y2 then // avoids crashes!?
    begin
      ColorTPA := GetAmountsTPA(Tab);
      if ColorTPA <> [] then
        Tab.Y1 := GetTabY1(ColorTPA, Tab.Y1);
    end;
  end
  else if Tab.Y2 <> Box.Y2 then // Checks if it's the last row.
    Tab.Y1 := Tab.Y2 - (Rows * 36);

  Result := Grid(8, Rows, 31, 31, [17, 5], [Tab.X1, Tab.Y1]);
end;

//Gets the slot boxes taking into account the tab divider lines.
function TRSBankScreen.GetSlotBoxes: TBoxArray;
var
  Box: TBox;
  BoxArray: TBoxArray;
begin
  BoxArray := Self.GetTabAreas;

  for Box in BoxArray do
    Result += Self.GetSlotBoxesFromTab(Box);
end;


(*
BankScreen.IsOpen
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.IsOpen(WaitForItems: Boolean = True): Boolean;

Returns true if the bankscreen is visible.

**WaitForItems** determines if the method waits 1-2 seconds items to load as there
can be a small delay before items are visible.
*)
function TRSBankScreen.IsOpen(WaitForItems: Boolean = True): Boolean; overload;
begin
  Result := Self.FindButton([Self.BUTTON_REARRANGE_SWAP_ON, Self.BUTTON_REARRANGE_SWAP_OFF]);

  // Wait 1-2 seconds to items to load
  if Result and WaitForItems then
    WaitUntil(SRL.CountColor(CTS0(65536), Self.GetSlotBoxes().Merge()) > 0, 100, Random(1000, 2000));
end;

function TRSBankScreen.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), Interval, WaitTime);
end;

procedure TRSBankScreen.Debug(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited;

  Bitmap.DrawBoxes(Self.GetTabBoxes(), False, $00FFFF);

  // I have this next one off and in a different color because
  // it's trippy as hell to have everything on.

  //Bitmap.DrawBoxes(Self.GetTabAreas(), False, $FFFFFF);
  Bitmap.DrawBoxes(Self.GetSlotBoxes(), False, $00FFFF);
  Bitmap.DrawBoxes(Self.GetScrollBoxes(), False, $00FFFF);
  Bitmap.DrawBox(Self.GetScrollSlider(), False, $00FFFF);
end;

(*
BankScreen.Setup
~~~~~~~~~~~~~~~~
.. pascal:: procedure BankScreen.Setup;

Initializes bankscreen variables.

.. note:: This is automatically called on the **BankScreen** variable.
*)
procedure TRSBankScreen.Setup; overload;
begin
  if Self <> [] then
    Exit;

  Self.Name := 'BankScreen';

  Self.FINDER_UPTEXT := ['Use Bank', 'Bank chest', 'Bank Bank', 'Bank booth', 'Banker'];
  Self.FINDER_OPTION := ['Use Bank', 'Bank Bank'];

  Self.BUTTON_REARRANGE_SWAP_OFF := Self.AddBitmapButton('bank_rearrange_swap_off.png');
  Self.BUTTON_REARRANGE_SWAP_ON := Self.AddBitmapButton('bank_rearrange_swap_on.png');

  Self.BUTTON_REARRANGE_INSERT_OFF := Self.AddBitmapButton('bank_rearrange_insert_off.png');
  Self.BUTTON_REARRANGE_INSERT_ON := Self.AddBitmapButton('bank_rearrange_insert_on.png');

  Self.BUTTON_WITHDRAW_ITEM_OFF := Self.AddBitmapButton('bank_withdraw_item_off.png');
  Self.BUTTON_WITHDRAW_ITEM_ON := Self.AddBitmapButton('bank_withdraw_item_on.png');

  Self.BUTTON_WITHDRAW_NOTE_OFF := Self.AddBitmapButton('bank_withdraw_note_off.png');
  Self.BUTTON_WITHDRAW_NOTE_ON := Self.AddBitmapButton('bank_withdraw_note_on.png');

  Self.BUTTON_QUANTITY_1_OFF := Self.AddBitmapButton('bank_quantity_1_off.png');
  Self.BUTTON_QUANTITY_1_ON := Self.AddBitmapButton('bank_quantity_1_on.png');

  Self.BUTTON_QUANTITY_5_OFF := Self.AddBitmapButton('bank_quantity_5_off.png');
  Self.BUTTON_QUANTITY_5_ON := Self.AddBitmapButton('bank_quantity_5_on.png');

  Self.BUTTON_QUANTITY_10_OFF := Self.AddBitmapButton('bank_quantity_10_off.png');
  Self.BUTTON_QUANTITY_10_ON := Self.AddBitmapButton('bank_quantity_10_on.png');

  Self.BUTTON_QUANTITY_CUSTOM_OFF := Self.AddBitmapButton('bank_quantity_custom_off.png');
  Self.BUTTON_QUANTITY_CUSTOM_ON := Self.AddBitmapButton('bank_quantity_custom_on.png');

  Self.BUTTON_QUANTITY_ALL_OFF := Self.AddBitmapButton('bank_quantity_all_off.png');
  Self.BUTTON_QUANTITY_ALL_ON := Self.AddBitmapButton('bank_quantity_all_on.png');

  Self.BUTTON_DEPOSIT_INVENTORY := Self.AddBitmapButton('bank_deposit_inventory.png');
  Self.BUTTON_DEPOSIT_INVENTORY_HOVER := Self.AddBitmapButton('bank_deposit_inventory_hover.png');

  Self.BUTTON_DEPOSIT_EQUIPMENT := Self.AddBitmapButton('bank_deposit_equipment.png');
  Self.BUTTON_DEPOSIT_EQUIPMENT_HOVER := Self.AddBitmapButton('bank_deposit_equipment_hover.png');

  Self.BUTTON_PLACEHOLDERS := Self.AddBitmapButton('bank_placeholders.png');
  Self.BUTTON_PLACEHOLDERS_HOVER := Self.AddBitmapButton('bank_placeholders_hover.png');

  Self.BUTTON_SEARCH_OFF := Self.AddBitmapButton('bank_search_off.png');
  Self.BUTTON_SEARCH_OFF_HOVER := Self.AddBitmapButton('bank_search_off_hover.png');
  Self.BUTTON_SEARCH_ON := Self.AddBitmapButton('bank_search_on.png');
  Self.BUTTON_SEARCH_ON_HOVER := Self.AddBitmapButton('bank_search_on_hover.png');

  Self.BUTTON_CLOSE := Self.AddBitmapButton('bank_close.png');
  Self.BUTTON_CLOSE_HOVER := Self.AddBitmapButton('bank_close_hover.png');

  Self.BUTTON_SCROLLED_TOP := Self.AddBitmapButton('bank_scrolled_top.png');
end;

procedure TRSBankScreen.Setup(Mode: ERSClientMode); overload;
begin
  Self.Mode := Mode;

  case Self.Mode of
    RS_CLIENT_FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -1];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;

    RS_CLIENT_RESIZABLE_CLASSIC, RS_CLIENT_RESIZABLE_BOTTOM:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;
  end;
end;

(*
BankScreen.GetTitle
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.GetTitle: String;

Returns the title of the bankscreen. Useful when searching.

Example
-------

  WriteLn BankScreen.GetTitle();
*)
function TRSBankScreen.GetTitle: String;
var
  B: TBox;
  Filter: TCompareRules;
begin
  B := Self.Bounds;
  B.X1 += 50;
  B.Y1 += 10;
  B.X2 -= 50;
  B.Y2 := B.Y1 + 15;
  B.LimitTo(Self.Bounds);

  Filter.Threshold := True;
  Filter.ThresholdAmount := 15;

  Result := OCR.Recognize(B, Filter, RS_FONTSET_BOLD_12);
end;

function TRSBankScreen.IsTitle(Text: String): Boolean; overload;
begin
  Result := Text in Self.GetTitle();
end;

function TRSBankScreen.IsTitle(Text: String; WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsTitle(Text), 100, WaitTime);
end;

(*
BankScreen.Search
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Search(Item: String): Boolean;

Searches for an item.
If no item is passed, the current search will be cleared.

Example
-------

  BankScreen.Search('logs'); // Search for logs
  BankScreen.Search(''); // Clear current search
*)
function TRSBankScreen.Search(Item: String): Boolean;
begin
  if (Item = '') then
  begin
    Result := Self.FindButton([Self.BUTTON_SEARCH_OFF, Self.BUTTON_SEARCH_OFF_HOVER]) or
              Self.ClickButton([Self.BUTTON_SEARCH_ON, Self.BUTTON_SEARCH_ON_HOVER], MOUSE_LEFT);

    Exit;
  end;

  if Self.IsTitle('Showing items: ' + LowerCase(Item)) then
    Exit(True);

  // Clear current search
  if Self.IsTitle('Showing items:') and (not Self.ClickButton(Self.BUTTON_SEARCH_OFF, MOUSE_LEFT)) then
    Exit(False);

  if Self.ClickButton(Self.BUTTON_SEARCH_ON, MOUSE_LEFT) and Chatbox.AnswerQuery('Show items', Item, Random(2000, 2500)) then
    Result := Self.IsTitle('Showing items: ' + LowerCase(Item), Random(2000, 2500));
end;

function TRSBankScreen.FindItems: TBoxArray; constref;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Row: TPointArray;
  Rows: T2DPointArray;
  B: TBox;
  BA: TBoxArray;
begin
  if SRL.FindColors(TPA, CTS2(3358280, 1, 0.80, 0.41), Self.GetSlotsArea) > 0 then
  begin
    TPA := TPA.Invert();

    Rows := TPA.Cluster(100, 3);
    with GetATPABounds(Rows) do
      Rows.SortByIndex([X1, Y1]); // Sort top to bottom

    for Row in Rows do
    begin
      ATPA := Row.Cluster(3);
      with GetATPABounds(ATPA) do
        ATPA.SortByIndex([X1, Y1]); // Sort left to right

      for TPA in ATPA do
      begin
        B := TPA.Bounds();
        if (B.Width <= 36) and (B.Height <= 36) then
          Result := Result + TPA.Bounds();
      end;
    end;
  end;
end;


// Get scroll slider box
function TRSBankScreen.GetScrollSlider: TBox;
var
  X, Y: Int32;
  Box: TBox;
  TPA: TPointArray;
begin
  Box := Self.GetScrollBoxes[1];
  Box.X1 += 1;
  Box.X2 -= 1;

  SRL.FindColors(TPA, CTS0(65536), Box);

  Result := TPA.Bounds;
end;
// Get scroll slider position
function TRSBankScreen.GetScrollPosition: Int32;
begin
  Result := Self.GetScrollSlider.Y1 - 99;
end;

// Checks if the bank is scrollable up (false) or down (true)
function TRSBankScreen.CanScroll(Down: Boolean): Boolean;
begin
  if Down then
    Result := (Self.GetScrollSlider.Y2 - Self.GetScrollBoxes[1].Y2) < 0
  else
    Result := Self.GetScrollPosition > 0;
end;

// Checks if the bank is scrollable at all.
// Should only return false if you are in a bank tab with few items.
function TRSBankScreen.CanScroll: Boolean; overload;
begin
  Result := Self.CanScroll(True) or Self.CanScroll(False);
end;

//Scrolls up or down the bank
function TRSBankScreen.Scroll(Down: Boolean = True; MinSteps: Int32 = 2; MaxSteps: Int32 = 5): Boolean;
var
  ScrollPosition: Int32;
begin
  if not Self.CanScroll(Down) then
    Exit(True);
  ScrollPosition := Self.GetScrollPosition;

  Mouse.Scroll(Self.GetSlotBoxes().Merge(), Random(MinSteps, MaxSteps), Down);

  Result := ScrollPosition <> Self.GetScrollPosition();
end;

//Scrolls to top or bottom of the bank
function TRSBankScreen.ScrollToEnd(Down: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit;

  while Self.CanScroll(Down) do
    Mouse.Scroll(Self.GetSlotBoxes().Merge(), Random(1, 3), Down);
end;





(*
BankScreen._Withdraw
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen._Withdraw(B: TBox; Amount: Int32; Noted: Boolean): Boolean;

Internal functon.
*)
function TRSBankScreen._Withdraw(B: TBox; Amount: Int32; Noted: Boolean): Boolean;
var
  T: UInt64;
begin
  if Noted then
  begin
    if not Self.FindButton(Self.BUTTON_WITHDRAW_NOTE_ON) and
       not Self.ClickButton(Self.BUTTON_WITHDRAW_NOTE_OFF, MOUSE_LEFT) then
      Exit(False);
  end else
  begin
    if not Self.FindButton(Self.BUTTON_WITHDRAW_ITEM_ON) and
       not Self.ClickButton(Self.BUTTON_WITHDRAW_ITEM_OFF, MOUSE_LEFT) then
      Exit(False);
  end;

  Mouse.Move(B);

  case Amount of
    BANK_WITHDRAW_ALL:
      Result := ChooseOption.Select('Withdraw-All');
    BANK_WITHDRAW_ALL_BUT_ONE:
      Result := ChooseOption.Select('Withdraw-All-but-1');
    else
    begin
      Result := ChooseOption.Select('Withdraw-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False);
      if not Result then
        Result := ChooseOption.Select('Withdraw-X') and Chatbox.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
    end;
  end;
end;

(*
BankScreen._WithdrawQuantity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen._WithdrawQuantity(B: TBox; Amount: Int32; Noted: Boolean): Boolean;

Internal functon.
*)
function TRSBankScreen._WithdrawQuantity(B: TBox; Amount: Int32; Noted: Boolean): Boolean;
var
  Options: TRSChooseOption_OptionArray;
begin
  if Noted then
  begin
    if not Self.FindButton(Self.BUTTON_WITHDRAW_NOTE_ON) and
       not Self.ClickButton(Self.BUTTON_WITHDRAW_NOTE_OFF, MOUSE_LEFT) then
      Exit(False);
  end else
  begin
    if not Self.FindButton(Self.BUTTON_WITHDRAW_ITEM_ON) and
       not Self.ClickButton(Self.BUTTON_WITHDRAW_ITEM_OFF, MOUSE_LEFT) then
      Exit(False);
  end;

  case Amount of
    BANK_WITHDRAW_1:   Self.ClickButton(Self.BUTTON_QUANTITY_1_OFF, MOUSE_LEFT);
    BANK_WITHDRAW_5:   Self.ClickButton(Self.BUTTON_QUANTITY_5_OFF, MOUSE_LEFT);
    BANK_WITHDRAW_10:  Self.ClickButton(Self.BUTTON_QUANTITY_10_OFF, MOUSE_LEFT);
    BANK_WITHDRAW_ALL: Self.ClickButton(Self.BUTTON_QUANTITY_ALL_OFF, MOUSE_LEFT);
    else
    begin
      Self.ClickButton(Self.BUTTON_QUANTITY_CUSTOM_OFF, MOUSE_LEFT);

      Mouse.Move(B);

      // This sets the custom amount, and works if uptext fails.
      if (not MainScreen.IsUpText('Withdraw-' + ToString(Amount))) then
      begin
        Result := ChooseOption.Select('Withdraw-X') and Chatbox.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));

        Exit;
      end;
    end;
  end;

  case Amount of
    BANK_WITHDRAW_1:   Result := Self.FindButton(Self.BUTTON_QUANTITY_1_ON);
    BANK_WITHDRAW_5:   Result := Self.FindButton(Self.BUTTON_QUANTITY_5_ON);
    BANK_WITHDRAW_10:  Result := Self.FindButton(Self.BUTTON_QUANTITY_10_ON);
    BANK_WITHDRAW_ALL: Result := Self.FindButton(Self.BUTTON_QUANTITY_ALL_ON);
    else
      Result := Self.FindButton(Self.BUTTON_QUANTITY_CUSTOM_ON);
  end;

  if Result then
    Mouse.Click(B, MOUSE_LEFT);
end;

(*
BankScreen.Withdraw
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Withdraw(Item: String; Amount: Int32; Noted: Boolean): Boolean;

Withdraws the specified amount ``Amount`` of the item ``Item``.

``Item`` can be either name or ID. An item list is available at ``Includes\SRL\osr\itemfinder\items``.
``BANK_WITHDRAW_ALL`` and ``BANK_WITHDRAW_ALL_BUT_ONE`` constants can be used for ``Amount``.

Example
-------

  BankScreen.Withdraw('logs', 10, False); // Withdraw 10 logs
  BankScreen.Withdraw('lobster', WITHDRAW_ALL, True); // Withdraw all lobsters as noted
*)
function TRSBankScreen.Withdraw(Item: String; Amount: Int32; Noted: Boolean): Boolean;
begin
  // Implemented in itemfinder.simba
end;

(*
BankScreen.WithdrawQuantity
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.WithdrawQuantity(Item: String; Amount: Int32; Noted: Boolean): Boolean;

Withdraws the specified amount ``Amount`` of the item ``Item``.
The quantity buttons are used for picking the amount.

``Item`` can be either name or ID. An item list is available at ``Includes\SRL\osr\itemfinder\items``.
``BANK_WITHDRAW_ALL`` constants can be used for ``Amount``.

Example
-------

  BankScreen.WithdrawQuantity('logs', 10, False); // Withdraw 10 logs using the `10` quantity button
  BankScreen.Withdraw('lobster', 2, True); // Withdraw all lobsters as noted using the `X` quantity button
*)
function TRSBankScreen.WithdrawQuantity(Item: String; Amount: Int32; Noted: Boolean): Boolean;
begin
  // Implemented in itemfinder.simba
end;

(*
BankScreen.Deposit
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Deposit(Slots: TIntegerArray): Boolean;

Deposits an array of slots.

Example
-------

  BankScreen.Deposit([0, 1]); // Deposit the items in inventory slot 0 & 1.
  BankScreen.Deposit([1..10]); // Deposit the items in inventory slots 1 to 10.
*)
function TRSBankScreen.Deposit(Slots: TIntegerArray): Boolean; overload;
var
  Slot: Int32;
begin
  Result := True;

  for Slot in Slots do
    if Inventory.IsSlotUsed(Slot) and not Deposit(Slot, BANK_DEPOSIT_ALL) then
      Result := False;
end;

(*
BankScreen.Deposit
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Deposit(Slot: Int32; Amount: Int32): Boolean;

Deposits the specified amount ``Amount`` of the item in the inventory slot ``Slot``.
The quantity buttons are used for picking the amount.

``BANK_DEPOSIT_ALL`` constant can be used for ``Amount``.

Example
-------

  BankScreen.Deposit(1, 10); // Deposit 10 logs using inventory slot 1 using the `10` quantity button.
  BankScreen.Deposit(0, BANK_DEPOSIT_ALL); // Deposit all logs using inventory slot 1 using the `ALL` quantity button.
*)
function TRSBankScreen.Deposit(Slot: Int32; Amount: Int32): Boolean; overload;
begin
  if not Self.IsOpen() then
    Exit;

  Result := not Inventory.IsSlotUsed(Slot);

  if not Result then
  begin
    Mouse.Move(Inventory.GetSlotBox(Slot));

    if (Amount = BANK_DEPOSIT_ALL) then
    begin
      if Result := MainScreen.IsUpText('Deposit-All ') then
        Mouse.Click(MOUSE_LEFT)
      else
        Result := ChooseOption.Select('Deposit-All ')
    end else
    begin
      if Result := MainScreen.IsUpText('Deposit-' + ToString(Amount) + ' ') then
        Mouse.Click(MOUSE_LEFT)
      else
      begin
        Result := ChooseOption.Select('Deposit-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False);
        if not Result then
          Result := ChooseOption.Select('Deposit-X') and Chatbox.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
      end;
    end;

    if Result then
      Result := WaitUntil(not Inventory.IsSlotUsed(Slot), 100, 4000);
  end;
end;

(*
BankScreen.DepositQuantity
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.DepositQuantity(Slot: Int32; Amount: Int32): Boolean;

Deposits the specified amount ``Amount`` of the item in the inventory slot ``Slot``.
The quantity buttons are used for picking the amount.

``BANK_DEPOSIT_ALL`` constant can be used for ``Amount``.

Example
-------

 BankScreen.DepositQuantity(1, 10); // Deposit 10 logs using inventory slot 1 using the `10` quantity button.
 BankScreen.DepositQuantity(0, BANK_DEPOSIT_ALL); // Deposit all logs using inventory slot 1 using the `ALL` quantity button.
*)
function TRSBankScreen.DepositQuantity(Slot: Int32; Amount: Int32): Boolean;
var
  Options: TRSChooseOption_OptionArray;
begin
  if not Self.IsOpen() then
    Exit;

  Result := not Inventory.IsSlotUsed(Slot);

  if not Result then
  begin
    case Amount of
      BANK_DEPOSIT_1:   Self.ClickButton(Self.BUTTON_QUANTITY_1_OFF, MOUSE_LEFT);
      BANK_DEPOSIT_5:   Self.ClickButton(Self.BUTTON_QUANTITY_5_OFF, MOUSE_LEFT);
      BANK_DEPOSIT_10:  Self.ClickButton(Self.BUTTON_QUANTITY_10_OFF, MOUSE_LEFT);
      BANK_DEPOSIT_ALL: Self.ClickButton(Self.BUTTON_QUANTITY_ALL_OFF, MOUSE_LEFT);
      else
      begin
        Self.ClickButton(Self.BUTTON_QUANTITY_CUSTOM_OFF, MOUSE_LEFT);

        Mouse.Move(Inventory.GetSlotBox(Slot));

        // This sets the custom amount, and works if uptext fails.
        if (not MainScreen.IsUpText('Deposit-' + ToString(Amount))) then
        begin
          Result := ChooseOption.Select('Deposit-X') and Chatbox.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
          if not Result then
            Exit;
        end;
      end;
    end;

    case Amount of
      BANK_DEPOSIT_1:   Result := Self.FindButton(Self.BUTTON_QUANTITY_1_ON);
      BANK_DEPOSIT_5:   Result := Self.FindButton(Self.BUTTON_QUANTITY_5_ON);
      BANK_DEPOSIT_10:  Result := Self.FindButton(Self.BUTTON_QUANTITY_10_ON);
      BANK_DEPOSIT_ALL: Result := Self.FindButton(Self.BUTTON_QUANTITY_ALL_ON);
      else
        Result := Self.FindButton(Self.BUTTON_QUANTITY_CUSTOM_ON);
    end;

    if Result then
      Mouse.Click(Inventory.GetSlotBox(Slot), MOUSE_LEFT);
  end;
end;

(*
BankScreen.DepositQuantity
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.DepositQuantity(Item: String; Amount: Int32): Boolean;

Deposits the specified amount ``Amount`` of the item ``Item``.
The quantity buttons are used for picking the amount.

``Item`` can be either name or ID. An item list is available at ``Includes\SRL\osr\itemfinder\items``.
``BANK_DEPOSIT_ALL`` constant can be used for ``Amount``.

Example
-------

 BankScreen.DepositQuantity('logs', 10); // Deposit 10 logs using using the `10` quantity button.
 BankScreen.DepositQuantity('lobster', BANK_DEPOSIT_ALL); // Deposit all lobsters using inventory slot 1 using the `ALL` quantity button.
*)
function TRSBankScreen.DepositQuantity(Item: String; Amount: Int32): Boolean; overload;
begin
  // Implemented in itemfinder.simba
end;

(*
BankScreen.Deposit
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Deposit(Items: TStringArray): Boolean;

Deposits an array of items.
``Items`` can be either name or ID. An item list is available at ``Includes\SRL\osr\itemfinder\items``.

Example
-------

 BankScreen.Deposit(['logs', 'lobster']);
*)
function TRSBankScreen.Deposit(Items: TStringArray): Boolean; overload;
begin
  // Implemented in itemfinder.simba
end;

(*
BankScreen.Deposit
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Deposit(Item: String; Amount: Int32): Boolean;

Deposits the specified amount ``Amount`` of the item ``Item``.
The quantity buttons are used for picking the amount.

``Item`` can be either name or ID. An item list is available at ``Includes\SRL\osr\itemfinder\items``.
``BANK_DEPOSIT_ALL`` constant can be used for ``Amount``.

Example
-------

 BankScreen.Deposit('lobster', 10); // Deposit 10 logs using the `10` quantity button.
 BankScreen.Deposit('logs', BANK_DEPOSIT_ALL); // Deposit 10 logs using the `ALL` quantity button.
*)
function TRSBankScreen.Deposit(Item: String; Amount: Int32): Boolean; overload;
begin
  // Implemented in itemfinder.simba
end;

function TRSBankScreen.Open(P: TPoint): Boolean; overload;
begin
  Mouse.Move(P);

  Result := ChooseOption.IsOpen() and ChooseOption.Select(Self.FINDER_OPTION);

  if not Result then
  begin
    if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    begin
      if ('Banker' in MainScreen.GetUpText()) or SRL.Dice(10) then
        Result := ChooseOption.Select(Self.FINDER_OPTION)
      else
      begin
        Mouse.Click(MOUSE_LEFT);

        Result := MainScreen.DidRedClick();
      end;
    end;
  end;

  if Result then
  begin
    if Minimap.HasFlag(Random(200, 400)) then
      Minimap.WaitFlag();

    Result := Self.IsOpen(Random(3000, 4000));
  end;
end;

function TRSBankScreen._FindFaladorEast: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.Colors += CTS2(4086642, 5, 0.08, 0.55);
  Finder.ClusterDistance := 15;
  Finder.Erode := 2;
  Finder.Grow := 3;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;

  Result.SortByLongSide();
  Result := Result[0].Cluster(5);
  Result.SortByMiddle(Result.Merge.Mean());
end;

function TRSBankScreen._FindCastleWars: T2DPointArray;
var
  TPA, ChestTPA: TPointArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  if SRL.FindColors(TPA, CTS2(5526875, 35, 0.19, 0.06), MainScreen.Bounds) > 0 then
  begin
    ATPA := TPA.Cluster(1);

    for I := 0 to High(ATPA) do
      if SRL.FindColors(TPA, CTS2(2503237, 40, 0.10, 0.14), ATPA[I].Bounds) > 5 then
      begin
        TPA := ATPA[I].MinAreaRect.Filter(TPA);
        TPA := TPA.Erode(MainScreen.ConvertDistance(3));
        if Length(TPA) > 0 then
          ChestTPA += TPA;
      end;

    Result := ChestTPA.Cluster(2);
  end;
end;

function TRSBankScreen._FindFerox: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.Colors += CTS2(931652, 12, 0.07, 0.89);
  Finder.ClusterDistance := 1;
  Finder.Erode := 1;

  Result := MainScreen.FindObject(Finder);
end;

function TRSBankScreen._FindGrandExchange: T2DPointArray;
begin
  Result := GrandExchange.FindNPC(GrandExchange.FINDER_BANKER);
end;

function TRSBankScreen._FindWintertodt: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.ColorClusters += [
    CTS2(3289384, 4, 0.51, 0.37),  //Dark hole
    CTS2(13025214, 17, 0.13, 0.11), //Snow color
    10
  ];

  Finder.ClusterDistance := 2;
  Finder.Grow := 3;
  Finder.Erode := 2;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;
  Result.SortByLongSide();
  Result := Result[0].Cluster(3);
  Result.SortByMiddle(Result.Merge.Mean());
end;


function TRSBankScreen.Open(Location: ERSBankLocation): Boolean; overload;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
  Attempt: Int32;
begin
  if Self.IsOpen() or Self.Open(Mouse.Position()) then
    Exit(True);

  for Attempt := 1 to 3 do
  begin
    if Attempt = 2 then
    begin
      Self.Debug('Bank not found, rotating...');

      if SRL.Dice(50) then
        Minimap.SetCompassAngle(Minimap.GetCompassAngle() + Random(100, 200))
      else
        Minimap.SetCompassAngle(Minimap.GetCompassAngle() - Random(100, 200));
    end;

    case Location of
      BANK_LOCATION_FALADOR_EAST:   ATPA := Self._FindFaladorEast();
      BANK_LOCATION_CASTLE_WARS:    ATPA := Self._FindCastleWars();
      BANK_LOCATION_FEROX:          ATPA := Self._FindFerox();
      BANK_LOCATION_GRAND_EXCHANGE: ATPA := Self._FindGrandExchange();
      BANK_LOCATION_WINTERTODT:     ATPA := Self._FindWintertodt();
    end;

    // Check three largest clusters
    ATPA.SortBySize();
    ATPA := Copy(ATPA, 0, 3);

    for TPA in ATPA do
    begin
      P := TPA[Random(Length(TPA))];
      P.X += Random(-2, 2);
      P.Y += Random(-2, 2);

      if Self.Open(P) then
        Exit(True);
    end;
  end;
end;

function TRSBankScreen.Hover(Location: ERSBankLocation; RightClick: Boolean): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if ChooseOption.IsOpen() or MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    Exit(True);

  case Location of
    BANK_LOCATION_FALADOR_EAST:   ATPA := Self._FindFaladorEast();
    BANK_LOCATION_CASTLE_WARS:    ATPA := Self._FindCastleWars();
    BANK_LOCATION_FEROX:          ATPA := Self._FindFerox();
    BANK_LOCATION_GRAND_EXCHANGE: ATPA := Self._FindGrandExchange();
    BANK_LOCATION_WINTERTODT:     ATPA := Self._FindWintertodt();
  end;

  // Check three largest clusters
  ATPA.SortBySize();
  ATPA := Copy(ATPA, 0, 3);

  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);

   if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
   begin
     if RightClick then
       ChooseOption.Hover(['Use Bank', 'Bank Bank']);

     Exit(True);
   end;
  end;
end;

(*
BankScreen.Close
~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Close(UseKeyboard: Boolean = False): Boolean;

Closes the bank, Depending on `UseKeyboard` the function will either click the button
or press backspace.

Example
-------

 WriteLn BankScreen.Close();
*)
function TRSBankScreen.Close(UseKeyboard: Boolean = False): Boolean;
begin
  if (not Self.IsOpen()) then
    Exit(True);

  if UseKeyboard then
    Keyboard.PressKey(VK_ESCAPE)
  else
    Self.ClickButton([Self.BUTTON_CLOSE, Self.BUTTON_CLOSE_HOVER], MOUSE_LEFT);

  Result := WaitUntil(not Self.IsOpen(False), SRL.TruncatedGauss(0, 1500), Random(2500, 5000));
end;

(*
BankScreen.DepositAll
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.DepositAll(): Boolean;

Depositis your inventory by clicking the deposit inventory button
*)
function TRSBankScreen.DepositAll(): Boolean;
begin
  if (Inventory.Count = 0) then
    Exit(True);

  Result := Self.ClickButton(Self.BUTTON_DEPOSIT_INVENTORY, MOUSE_LEFT) and Inventory.IsCount(0, 3000);
end;

function TRSBankScreen.Count(Identifer: String): Int32;
begin
  // Implemented in itemfinder.simba
end;

function TRSBankScreen.CountStack(Identifer: String): Int32;
begin
  // Implemented in itemfinder.simba
end;

function TRSBankScreen.Find(Item: String; out Bounds: TBox): Boolean;
begin
  // Implemented in itemfinder.simba
end;

(*
var BankScreen
~~~~~~~~~~~~~~
  Global bankscreen variable.
*)
var
  BankScreen: TRSBankScreen;

(*
Inventory.IsOpen
~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.IsOpen: Boolean; override;

Overrides **Inventory.IsOpen** to return true if the bankscreen is open.
*)
function TRSInventory.IsOpen: Boolean; override;
begin
  Result := inherited() or BankScreen.IsOpen;
end;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  BankScreen.Setup(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  BankScreen.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  BankScreen.Debug(Bitmap);
end;

