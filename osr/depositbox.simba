(*
DepositBox
==========
Methods to interact with the deposit box interface.
*)

{$DEFINE SRL_DEPOSITBOX_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSDepositButton = (
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL,

    DEPOSIT_INVENTORY,
    DEPOSIT_WORN,
    DEPOSIT_LOOT
  );

  TRSDepositBox = type TRSTitledInteface;

procedure TRSDepositBox.Setup(); override;
begin
  inherited;

  Self.Name := 'Deposit Screen';
end;

procedure TRSDepositBox.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;
  end;
end;

function TRSDepositBox.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[34,34]]);
end;

function TRSDepositBox.GetButton(Button: ERSDepositButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSDepositButton)) then
    Result := Buttons[Button];
end;

function TRSDepositBox.GetSlotBoxes(): TBoxArray;
begin
  Result := Grid(7, 4, 31, 31, [25, 17], [Self.X1 + 38, Self.Y1 + 42]);
end;

function TRSDepositBox.IsOpen(): Boolean; overload;
begin
  Result := Self.GetButton(ERSDepositButton.QUANTITY_1).Visible();
end;

function TRSDepositBox.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSDepositBox.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

procedure TRSDepositBox.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetSlotBoxes(), $00FFFF);
end;

var
  DepositBox: TRSDepositBox;

(*
GameTabs.GetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSGameTabs.GetCurrentTab: ERSGametab; override;

Overrides **GameTabs.GetCurrentTab** to return the inventory tab if bank or depositbox is open.
*)
function TRSGameTabs.GetCurrentTab: ERSGametab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and (Bank.IsOpen or DepositBox.IsOpen) then
    Result := ERSGameTab.INVENTORY;
end;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  DepositBox.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  DepositBox.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  DepositBox.Draw(Bitmap);
end;
