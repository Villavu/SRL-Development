{$DEFINE SRL_STATS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSSkill = (
    SKILL_ATTACK,
    SKILL_HITPOINTS,
    SKILL_MINING,
    SKILL_STRENGTH,
    SKILL_AGILITY,
    SKILL_SMITHING,
    SKILL_DEFENCE,
    SKILL_HERBLORE,
    SKILL_FISHING,
    SKILL_RANGE,
    SKILL_THIEVING,
    SKILL_COOKING,
    SKILL_PRAYER,
    SKILL_CRAFTING,
    SKILL_FIREMAKING,
    SKILL_MAGIC,
    SKILL_FLETCHING,
    SKILL_WOODCUTTING,
    SKILL_RUNECRAFTING,
    SKILL_SLAYER,
    SKILL_FARMING,
    SKILL_CONSTRUCTION,
    SKILL_HUNTER,
    SKILL_TOTAL
  );

const
  SKILLNAMES = [
   'Attack',
   'Hitpoints',
   'Mining',
   'Strength',
   'Agility',
   'Smithing',
   'Defence',
   'Herblore',
   'Fishing',
   'Range',
   'Thieving',
   'Cooking',
   'Prayer',
   'Crafting',
   'Firemaking',
   'Magic',
   'Fletching',
   'Woodcutting',
   'Runecraft',
   'Slayer',
   'Farming',
   'Construction',
   'Hunter',
   'Total'
  ];

type
  TRSSkillInfo = record
    Level:     Int32;
    XP:        Int32;
    Next:      Int32;
    Remainder: Int32;
  end;

type
  TRSStats = type TRSInterface;

procedure TRSStats.Setup; override;
begin
  inherited;

  Self.Name := 'Stats';
end;

procedure TRSStats.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSStats.GetSkillBoxes: TBoxArray;
begin
  Result := Grid(3, 8, 53, 23, [10, 9], [Self.X1 + 2, Self.Y1 + 6]);
end;

function TRSStats.GetSkillBox(Skill: ERSSkill): TBox;
begin
  Result := Self.GetSkillBoxes()[Ord(Skill)];
end;

function TRSStats.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.STATS);
end;

function TRSStats.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.STATS);
end;

function TRSStats.MouseOver(Skill: ERSSkill): Boolean;
begin
  Result := Self.Open();

  Mouse.Move(Self.GetSkillBox(Skill));
end;

function TRSStats.GetSkillInfo(Skill: ERSSkill; WaitTime: Int32 = 1000): TRSSkillInfo;
var
  TPA: TPointArray;
  Lines: TStringArray;
  T: UInt64;
  B: TBox;
  I: Int32;
begin
  if not Self.MouseOver(Skill) then
    Exit();

  T := GetTickCount() + WaitTime;
  repeat
    if SRL.FindColors(TPA, CTS0($A0FFFF), Self.Bounds) then
    begin
      B := TPA.Bounds;

      SetLength(Lines, B.Height div 12);
      for I := 0 to High(Lines) do
        Lines[I] := OCR.Recognize([B.X1, B.Y1 + (I * 12), B.X2, B.Y1 + ((I+1) * 12) + 3], [0], RS_FONT_PLAIN_12, False);

      if Length(Lines) = 0 then
        Continue;
      if not (SKILLNAMES[Skill] in Lines[0]) then
        Continue;

      Result.XP := StrToIntDef(ExtractFromStr(Lines[0], Numbers), 0);
      Result.Level := SRL.GetLevelAtXP(Result.XP);

      if Length(Lines) = 3 then
      begin
        Result.Next := StrToIntDef(ExtractFromStr(Lines[1], Numbers), 0);
        Result.Remainder := StrToIntDef(ExtractFromStr(Lines[2], Numbers), 0);
      end;

      Break;
    end;

    Wait(50);
  until GetTickCount() >= T;
end;

function TRSStats.GetCurrentLevel(Skill: ERSSkill): Int32;
var
  Text: String;
  B: TBox;
begin
  if not Self.Open() then
    Exit(-1);

  B := Self.GetSkillBox(Skill);
  B.Y2 := B.Y1 + (B.Height div 2);

  Text := OCR.Recognize(B, [65535], RS_FONT_PLAIN_11);
  Result := StrToIntDef(ExtractFromStr(Text, Numbers), -1);
end;

procedure TRSStats.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Self.GetSkillBoxes(), False, $00FFFF);
end;

var
  Stats: TRSStats;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Stats.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Stats.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Stats.Draw(Bitmap);
end;

