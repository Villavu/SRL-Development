(*
Walker
======
*)

{.$DEFINE SRL_DEBUG_WALKER}

{$DEFINE SRL_WALKER_INCLUDED}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$I webgraph.simba}
{$I world.graph}
{$I zeah.graph}

type
  PRSWalker = ^TRSWalker;

  TRSWalker_OnWalkEvent = procedure(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
  TRSWalker_OnWalkEventEx = procedure(Walker: PRSWalker; Position: TPoint; Destination: TPoint) of object;

  TRSWalker = record(TSRLBaseRecord)
    Cache: TMatchTemplateRGBCache;

    World: TMufasaBitmap;

    WebGraph: TWebGraph;

    EnableRunAtEnergy: Int32;

    Scaling: Int32;
    Similarity: Single;
    ScreenWalk: Boolean;

    ClickRandomness: Int32;

    Path: TPointArray;
    PathIndex: Int32;
    
    Enabled: Boolean;

    OnWalkEvent: TRSWalker_OnWalkEvent;
    OnWalkEventEx: TRSWalker_OnWalkEventEx;

    OnWalkingEvent: TRSWalker_OnWalkEvent;
  end;

function TRSWalker.FindMap(Map: String): String; static;
var
  Mask: String = '.png;.bmp;';
  Files: TStringArray;
begin
  if FileExists(Map) then
    Exit(ExpandFileName(Map));

  Mask := StringReplace(Mask, '.', Map + '.', [rfReplaceAll]);

  Files := FindFile(ExtractFileDir(Map), Mask, False, False) +
           FindFile({$MACRO CURRENT_DIRECTORY}, Mask, True, False);

  if Length(Files) > 0 then
    Result := Files[0];
end;

function TRSWalker.LoadMap(Path: String): TMufasaBitmap; static;
const
  MAPS = {$MACRO CURRENT_DIRECTORY} + DirectorySeparator + 'maps' + DirectorySeparator;
var
  Cache: String;
begin
  Result.Init(Client.GetMBitmaps());

  if ExtractFileExt(Path) <> '.bmp' then
  begin
    Cache := MAPS + SHA1File(Path) + '.bmp';

    // Save as bitmap for much faster loading
    if not FileExists(Cache) then
    begin
      Result.LoadFromFile(Path);
      Result.SaveToFile(Cache);
    end;

    if FileExists(Cache) then
      Path := Cache;
  end;

  Result.LoadFromFile(Path);
end;

procedure TRSWalker.Free;
begin
  if Self.World <> nil then
  begin
    Self.World.Free();
    Self.World := nil;
  end;
end;

(*
TRSWalker.Setup
~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.Setup(Map: String; Manage: Boolean = True; Scaling: Int32 = 10);

Setup a RSWalker variable.
This only needs calling once per variable so it's suggested to use a global variable.

Parameters
----------

Map
	File path to an image or a map name found in *SRL/osr/walker/maps*.

Manage  
  Automatically free walker at the end of the script. Only works if the TRSWalker variable is global. (Default: True)
    
Scaling
	Multipler to downscale the map. Lower will bring more accuracy at the cost of speed. (Default: 9)
	
Example
-------

  var Walker: TRSWalker;

  Walker.Setup('world'); // Setup using the world map found in the maps directory
*)
procedure TRSWalker.Setup(Map: String; Manage: Boolean = True; Scaling: Int32 = 9);
var
  Path: String;
  Bitmap, Mask, Sample: TMufasaBitmap;
  X, Y: Int32;
begin
  Self.Name := 'Walker';
  
  Path := Self.FindMap(Map);
  if (Path = '') then
    Self.Fatal('Unable to find map: ' + Map);

  Self.Scaling := Scaling;
  Self.ClickRandomness := 4;

  case Map.Lower() of
    'world': Self.WebGraph := WorldWeb;
    'zeah':  Self.WebGraph := ZeahWeb;
  end;

  Self.World := Self.LoadMap(Path);
  if Manage then 
    AddOnTerminate(@Self.Free);

  // Fixed or resizable, doesn't matter.
  Sample := Self.World.Downsample(Self.Scaling); 
  Bitmap := Self.GetCleanMinimap();
  Mask := Self.ScaleMinimap(Bitmap, Self.Scaling);

  for X := 0 to Mask.getWidth() - 1 do
    for Y := 0 to Mask.getHeight() - 1 do
      if (Mask.GetPixel(X, Y) <> 0) then
        Mask.SetPixel(X, Y, $FFFFFF);
        
  Self.Cache := TMatchTemplateRGBCache.Create(Sample.ToMatrix(), Mask.ToMatrix());

  Sample.Free();
  Bitmap.Free();
  Mask.Free();
end;

procedure TRSWalker.CleanMinimap(Bitmap: TMufasaBitmap);

  procedure Find(P: TPoint);
  var
    Area: TBox;
    Pixel: Int32;
    X, Y: Int32;
  begin
    Area := [P.X - 5, P.Y - 5, P.X + 5, P.Y + 5];
    
    for Y := Area.Y1 to Area.Y2 do
      for X := Area.X1 to Area.X2 do
        if Bitmap.PointInBitmap(X, Y) then
        begin
          Pixel := Bitmap.GetPixel(X, Y);
  
          SetToleranceSpeed2Modifiers(0.001, 0.001);
          if SimilarColors($FFFFFF, Pixel, 30) then
            Bitmap.SetPixel(X, Y, 0);
  
          SetToleranceSpeed2Modifiers(0.05, 1);
          if SimilarColors($00FFFF, Pixel, 30) then
            Bitmap.SetPixel(X, Y, 0);
  
          SetToleranceSpeed2Modifiers(0.05, 1);
          if SimilarColors($0000FF, Pixel, 30) then
            Bitmap.SetPixel(X, Y, 0);
  
          SetToleranceSpeed2Modifiers(50, 100);
          if SimilarColors($000000, Pixel, 1) then
            Bitmap.SetPixel(X, Y, 0);
        end;
  end;

var
  Dots: TPointArray;
  Dot: TPoint;
  TPA: TPointArray;
begin
  Dots := Minimap.GetDotsBitmap(Bitmap, [ERSMinimapDot.NPC, ERSMinimapDot.ITEM, ERSMinimapDot.PLAYER]);

  SetColorToleranceSpeed(2);

  for Dot in Dots do
    Find(Dot);
  Find([Bitmap.GetWidth() div 2, Bitmap.GetHeight() div 2]); // our own player

  SetColorToleranceSpeed(1);
  SetToleranceSpeed2Modifiers(0.2, 0.2);

  // TODO: account for tolerance
  Bitmap.ReplaceColor(255,0);
  Bitmap.ReplaceColor(284358,0);
  Bitmap.ReplaceColor(1127261,0);
  
  Bitmap.DrawPolyFilled(Minimap.GetPolygon().Offset(-Minimap.X1, -Minimap.Y1), True, 0);  

  Bitmap.FindColors(TPA, 0);
  Bitmap.Blend(TPA.Sorted(Bitmap.GetCenter()), 5); 
  Bitmap.Pad(10); 
end;

function TRSWalker.GetCleanMinimap: TMufasaBitmap;
var
  Bitmap: TMufasaBitmap;
begin
  Bitmap := GetMufasaBitmap(BitmapFromClient(Minimap.Bounds));
  Bitmap.ReplaceColor(0, 1); // We need zero to be unique

  Self.CleanMinimap(Bitmap);

  Result.Init();
  
  Bitmap.RotateBitmapEx(Minimap.GetCompassAngle(False), False, True, Result);
  Bitmap.Free();
end;

function TRSWalker.ScaleMinimap(Bitmap: TMufasaBitmap; Scaling: Int32): TMufasaBitmap;
var
  RADIUS = 67;
var
  P: TPoint;
  Temp: TMufasaBitmap;
  TPA: TPointArray;
begin
  Temp := Bitmap.Copy();
  
  P := Temp.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, -8).Rotate(-Minimap.GetCompassAngle(False), P); // fixed
 
  Temp.DrawCircleFilled(P.X, P.Y, RADIUS, True, 0);

  RADIUS += 3;
  
  Temp.Crop(P.X - RADIUS, P.Y - RADIUS, P.X + RADIUS, P.Y + RADIUS);
  Temp.FindColors(TPA, 0);
  Temp.Blend(TPA.Sorted(Temp.GetCenter()), 3); 
  Temp.DrawCircleFilled(Temp.GetCenter().X, Temp.GetCenter().Y, RADIUS, True, 0);

  Result := Temp.Downsample(Scaling, False);
  
  Temp.Free();
end;

function TRSWalker.ScaledSearch(Bitmap: TMufasaBitmap; Samples: Int32): TPointArray;
var
  Sample: TMufasaBitmap;
  Matrix: TSingleMatrix;
begin
  Sample := Self.ScaleMinimap(Bitmap, Self.Scaling);

  Matrix := MatchTemplateMask(Cache, Sample.ToMatrix, TM_CCOEFF_NORMED);

  while Length(Result) < Samples do
    with Matrix.ArgMax() do
    begin
      Result += Offset(Sample.GetWidth() div 2, Sample.GetHeight() div 2) * Self.Scaling;;
      
      Matrix.Fill([X - 5, Y - 5, X + 5, Y + 5], 0);
    end;
    
  Result := Result.Offset(Self.Scaling div 2, Self.Scaling div 2);
      
  Sample.Free();
end;

function TRSWalker.FullSearch(Templ, World: TMufasaBitmap; Position: TPoint; out Match: Single): TPoint;
const
  TEMPL_SIZE = 25;
  SLICE_SIZE = TEMPL_SIZE + 45;
  SCALING = 2;
var
  Slice, SliceScaled, TemplScaled: TMufasaBitmap;
  Matrix: TSingleMatrix;
  Area: TBox;
begin
  Area := [
    Max(0, Position.X - SLICE_SIZE),
    Max(0, Position.Y - SLICE_SIZE),
    Min(World.GetWidth()  - 1, Position.X + SLICE_SIZE),
    Min(World.GetHeight() - 1, Position.Y + SLICE_SIZE)
  ];  

  Slice := World.Copy(Area.X1, Area.Y1, Area.X2, Area.Y2);
  SliceScaled := Slice.Downsample(SCALING);
  
  TemplScaled := Templ.Downsample(SCALING);
  with TemplScaled.GetCenter() do
    TemplScaled.Crop(X - TEMPL_SIZE, Y - TEMPL_SIZE, X + TEMPL_SIZE, Y + TEMPL_SIZE);

  Matrix := SliceScaled.MatchTemplate(TemplScaled, TM_CCOEFF_NORMED);
    
  with Matrix.ArgMax() do
  begin
    Match := Matrix[Y, X];
      
    Result.X := Area.X1 + (X + TEMPL_SIZE) * SCALING;
    Result.Y := Area.Y1 + (Y + TEMPL_SIZE) * SCALING;
  end;
  
  TemplScaled.Free();
  SliceScaled.Free();
  Slice.Free();
end;

(*
TRSWalker.GetMyPos
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.GetMyPos: TPoint;

Returns the players current position on the loaded map.

Example
-------

  WriteLn(Walker.GetMyPos());
  
  // Check to see the match percentage if needed
  WriteLn(Walker.Similarity);
*)
function TRSWalker.GetMyPos: TPoint;
const
  SAMPLES = 3;
var
  Bitmap: TMufasaBitmap;
  TPA: TPointArray;
  I: Int32;
  Hit: TPoint;
  Match: Single;
begin
  Self.Similarity := 0;

  Bitmap := GetCleanMinimap();

  TPA := Self.ScaledSearch(Bitmap, SAMPLES);
  for I := 0 to High(TPA) do
  begin
    Hit := FullSearch(Bitmap, Self.World, TPA[I], Match);

    if Match > Self.Similarity then
    begin
      Self.Similarity := Match;
      
      Result := Hit;
    end;
  end;

  Bitmap.Free();
end;

function TRSWalker.WorldToMM(PlayerPoint, WorldPoint: TPoint; Radians: Double): TPoint; overload;
begin
  Result := WorldPoint - PlayerPoint + Minimap.Center;
  Result := Result.Rotate(Radians, Minimap.Center);
end;

function TRSWalker.WorldToMM(WorldPoint: TPoint): TPoint; overload;
begin
  Result := Self.WorldToMM(Self.GetMyPos(), WorldPoint, Minimap.GetCompassAngle(False));
end;

procedure TRSWalker.CheckRunEnergy;
begin
  if Minimap.IsRunEnabled() or (Minimap.GetRunEnergy() < Self.EnableRunAtEnergy) then
    Exit;

  Self.EnableRunAtEnergy := SRL.SkewedRand(40, 10, 100);

  Minimap.EnableRun();
end;

procedure TRSWalker.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32);
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.GetMyPos();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    Position.Previous := Position.Current;
    Position.Current := Self.GetMyPos();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    if (@OnWalkingEvent <> nil) then
      OnWalkingEvent(@Self, Position.Current, Destination);

    if not Self.Enabled then
      Break;

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean;
var
  P: TPoint;
begin
  Result := True;

  if Self.ScreenWalk then
  begin
    Mouse.Move(Minimap.PointToMsRect(MinimapPoint).Mean);

    if not MainScreen.IsUpText('Walk here') then
      Exit(ChooseOption.Select('Walk here'));
  end else
  begin
    P := MinimapPoint.Random(-Randomness, Randomness);
    while not Minimap.IsPointOn(P) do
      P := MinimapPoint.Random(-Randomness, Randomness);

    Mouse.Move(P);
  end;

  Mouse.Click(MOUSE_LEFT);

  // 15% chance of spam clicking
  if (Randomness > 0) and (Random() < 0.15) then
    for 0 to Random(3) do
    begin
      Mouse.Click(Mouse.Position(), MOUSE_LEFT);

      Wait(0, 150, wdLeft);
    end;
end;

// Walks to the final point in the path
function TRSWalker.WalkFinalStep(PlayerPoint, WorldPoint: TPoint; WaitUntilDistance: Int32): Boolean;
var
  MinimapPoint: TPoint;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, 0);
  if Result then
    Self.WaitMoving(WorldPoint, WaitUntilDistance);
end;

// Walks to a (non final) point in the path
function TRSWalker.WalkStep(PlayerPoint, WorldPoint: TPoint): Boolean;
var
  MinimapPoint: TPoint;
  WaitUntilDistance: Int32;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, Self.ClickRandomness);

  if Result then
  begin
    if (Random() < 0.15) then // 15% chance of randomness else mean
      WaitUntilDistance := Random(Distance(Minimap.Center, MinimapPoint))
    else
      WaitUntilDistance := SRL.NormalRange(0, Distance(Minimap.Center, MinimapPoint) + 10);

    Self.WaitMoving(WorldPoint, WaitUntilDistance);
  end
end;

function TRSWalker.IsWalkable(WorldPoint: TPoint; PlayerPoint: TPoint; Angle: Double): Boolean;
var
  MinimapPoint: TPoint;
  B: TBox;
begin
  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Angle);

  case Self.ScreenWalk of
    True:
      begin
        B := Minimap.PointToMSRect(MinimapPoint, Angle).Bounds;
        if MainScreen.IsVisible(B.Middle) then
          Result := CountColor($000000, B.Expand(0, MainScreen.Bounds())) = 0; // Client doesn't always render everything when zoomed out
      end;

    False:
      begin
        Result := Minimap.IsPointOn(MinimapPoint, -1);
      end;
  end;
end;

(*
TRSWalker.WalkPath
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

Walks a path of points taken from the loaded map. 

Parameters
----------

Path
	Array of points taken from the loaded map to walk. Must be ordered from start to finish.	
	
WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example
-------

  Walker.WalkPath([[100,100],[120,120],[140,140],[160,160],[180,180]]);
*)
function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

  function BuildPath(TPA: TPointArray): TPointArray;
  var
    I, J: Int32;
    Line: TPointArray;
  begin
    for I := 1 to High(TPA) do
    begin
      Line := TPAFromLine(TPA[I-1], TPA[I]);

      J := 0;
      while J < High(Line) do
      begin
        Result += Line[J];

        Inc(J, Random(5, 15));
      end;
    end;

    Result += TPA[High(TPA)];
  end;

  function AdvancePath(var Index: Int32; PlayerPoint: TPoint): Boolean;
  var
    Angle: Double := Minimap.GetCompassAngle(False);
    Previous: Int32 := Index;
    Nearest, Furthest: Int32;
  begin
    Nearest := Self.Path.Find(Self.Path.Sorted(PlayerPoint)[0]);

    while (Nearest < High(Self.Path)) and (not Self.IsWalkable(Self.Path[Nearest+1], PlayerPoint, Angle)) do
      Inc(Nearest);
      
    Furthest := Nearest;
    while (Furthest < High(Self.Path)) and Self.IsWalkable(Self.Path[Furthest+1], PlayerPoint, Angle) do
      Inc(Furthest);
    
    // 15% chance of randomness else furthest
    Index := Furthest;
    if Random() < 0.15 then
      Index := Random(Nearest, Furthest);

    Result := Index > Previous;
  end;
  
var
  PlayerPoint: TPoint;
  Index, Fails: Int32;
begin
  Self.Enabled := True;
  Self.Path := BuildPath([Self.GetMyPos()] + Path);

  while Self.Enabled and (Fails < 10) do
  begin
    PlayerPoint := Self.GetMyPos();

    if AdvancePath(Index, PlayerPoint) then
      Fails := 0
    else
    begin
      Inc(Fails);

      // Likely haven't moved far enough to advance to next point
      if (Fails < 5) then
      begin
        Wait(300);

        Continue;
      end;

      if (Fails mod 2 = 0) then
        Minimap.WaitFlag();
    end;

    if Index = High(Self.Path) then
    begin
      if Self.WalkFinalStep(PlayerPoint, Self.Path[Index], WaitUntilDistance) then
        Exit(True);
    end else
      Self.WalkStep(PlayerPoint, Self.Path[Index]);
  end;

  if Fails = 10 then
    Self.DebugLn('Failed to advance path');
end;

(*
TRSWalker.WalkBlind
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;

"Blindly" walks to a point taken from the loaded map.
A straight line is generated between the player's position and destination which is then walked.

Parameters
----------

Destination
	Destination point taken from the loaded map.
	
WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example
-------

  Walker.WalkBlind([300, 300]);
*)
function TRSWalker.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;
begin
  Result := WalkPath([Destination], WaitUntilDistance);
end;

(*
TRSWalker.WebWalk
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WebWalk(Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean;

Web walks to the destination point on the loaded map. Does **not** handle any obstacles.
Please run ``webber.simba`` to see how webgraphs are built.

Pre built webgraphs are available for "World" and "Zeah" when used.

Parameters
----------

Destination
	Destination point taken from the loaded map.
	
WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

PathRandomness
	Randomness to add to the path so the absoulte shortest path isn't always taken. Must be between 0..1

Example
-------

  var Walker: TRSWalker;

  Walker.Setup('world');
  Walker.WebWalk([4595, 3575]); // Lumbridge

  // Or use a location from the webgraph
  Walker.WebWalk(WorldWeb.LOCATION_LUMBRIDGE);
*)
function TRSWalker.WebWalk(Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean;
var
  Path: TPointArray;
begin
  if not InRange(PathRandomness, 0, 1) then
    Self.Fatal('TRSWalker.WebWalk `PathRandomness` must be within 0..1');

  Path   := Self.WebGraph.PathBetween(Self.GetMyPos, Destination, PathRandomness);
  Result := Self.WalkPath(Path, WaitUntilDistance);
end;

procedure TRSWalker.DebugPosition;
var
  X1, Y1, X2, Y2, X, Y: Int32;
  P: TPoint;
  Bitmap, WorldBitmap, MinimapBitmap: TMufasaBitmap;
  Time: Double;
  Position: TPoint;
  Lines: TStringArray;
begin
  Freeze();
  
  Time := PerformanceTimer();
  Position := Self.GetMyPos();
  Time := PerformanceTimer() - Time;

  X1 := Max(0, Position.X - 200);
  Y1 := Max(0, Position.Y - 200);
  X2 := Min(X1 + 400, Self.World.GetWidth()  - 1);
  Y2 := Min(Y1 + 400, Self.World.GetHeight() - 1);

  X := Position.X - X1;
  Y := Position.Y - Y1;

  WorldBitmap := Self.World.Copy(X1, Y1, X2, Y2);
  WorldBitmap.LineTo(Point(0, Y), Point(X2 - X1, Y), $00FF00);
  WorldBitmap.LineTo(Point(X, 0), Point(X, Y2 - Y1), $00FF00);
  WorldBitmap.DrawBox(Box(X - 2, Y - 2, X + 2, Y + 2), False, $FFFFFF);

  MinimapBitmap := ScaleMinimap(GetCleanMinimap(), 1);
  
  P := MinimapBitmap.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), P);
    
  MinimapBitmap.DrawBox(P.X - 1, P.Y - 1, P.X + 1, P.Y + 1, True, $FFFFFF);
  MinimapBitmap.SetTransparentColor(0);

  Bitmap.Init();
  Bitmap.SetSize(400 + MinimapBitmap.GetWidth() + 30, 420);
  Bitmap.DrawClear($403027);

  Lines := [
    '('      + ToStr(Position.X, ', ', Position.Y) + ')',
    'Acc: '  + ToStr(Round(Self.Similarity, 3)),
    'Time: ' + ToStr(Round(Time)) + ' ms'
  ];

  Bitmap.SetFontName('Consolas');
  Bitmap.SetFontSize(18);
  Bitmap.SetFontAntialiasing(True);
  
  Bitmap.DrawText(Lines[0], [420, 20 + MinimapBitmap.GetHeight()], $FFFFFF);
  Bitmap.DrawText(Lines[1] + LineEnding + Lines[2], [420, 370], $FFFFFF);

  WorldBitmap.DrawTransparent(10, 10, Bitmap);
  WorldBitmap.Free();

  MinimapBitmap.DrawTransparent(420, 10, Bitmap);
  MinimapBitmap.Free();

  Bitmap.Debug();
  Bitmap.Free();

  UnFreeze();
end;

function TRSWalker.GetTileMSEx(Me, Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
var
  angle: Double;
begin
  Loc   := Minimap.Center + (Loc - Me);
  angle := Minimap.GetCompassAngle(False);
  Loc   := Loc.Rotate(angle, Minimap.Center);
  Result := Minimap.VecToMSRect(Vec3(Loc.x - offx, Loc.y - offy, Height), angle);
end;

function TRSWalker.GetTileMS(Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
begin
  Result := GetTileMSEx(Self.GetMyPos(), Loc, Height, Offx, Offy);
end;

function TRSWalker.MSToWorldEx(Me, Loc: TPoint; Height: Int32 = 0; Accuracy: Double = 0.2): TPoint;
begin
  Result := Me + (MainScreen.PointToMM(Loc, Height, Accuracy).ToPoint() - Minimap.Center);
  Result := Result.Rotate(-Minimap.GetCompassAngle(False), Me);
end;

function TRSWalker.MSToWorld(Loc: TPoint; Height: Int32=0; Accuracy:Double=0.2): TPoint;
begin
  Result := Self.MSToWorldEx(Self.GetMyPos(), Loc, Height, Accuracy);
end;
