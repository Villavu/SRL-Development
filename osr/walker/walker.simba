(*
Walker
======

Walker, also commonly refered to as RSWalker and RSW is the go to tool for walking and accurate positioning.

How does it work?
~~~~~~~~~~~~~~~~~
The details are quite complex but to put it simply, the way it works is:
- A large image of the game map is loaded. This image has to include the region you are on or things won't work as expected.
- A screenshot of your minimap is taken and, rotated north and cleaned (player, npc and item dots are removed).
- This minimap screenshot is then searched on our loaded map image, the closest match is then returned as our position.
- Once we have an accurate position, we can do all sort of things:
  - Accurately get the position of a tile
  - Accurately hover any visible tile with the help of mm2ms
  - Color search a tile

Things to keep in mind with TRSWalker:
- Coordinates are relative to the map loaded. They are literally your pixel position in the map image.
  If you load map A and B and map B contains map A somewhere that is not it's top-left corner,
  their coordinates will not match even if you are standing in the same tile.
  So if you get your position and it tells you are at X = 300 and Y = 500 it means you are in the pixel X = 300 and Y = 500 of your map image.
- Because we search our minimap inside our map to find our position, smaller maps are much faster.
  It's not exactly porportional but almost, so if you have a map that has a total of 1000 pixels and it takes 50ms to get your position,
  a map with 2000 pixels will take almost exactly 100ms.
- A map image cannot be smaller than the minimap and should not even be anywhere close to it's size.
  Any area you think you might be standing on on your script should have at the very minimum a 75 extra pixels of "padding"
  because that's the maximum visible distance of the minimap and even then, slightly more is recommended.

Variables for users to tweak:
- ScreenWalk: When set to true, walker will use only the mainscreen to walk instead of the minimap.
- AdaptiveWalk: When set to true, will enable and disable ScreenWalk depending on your distance to the target,
                making walking use a mix of minimap and mainscreen walking. The closer your are to the target
                the more likely it is to use the mainscreen and the further you are the less likely.
                You can also play with RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES values to customize the behavior.
*)

{$DEFINE SRL_WALKER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  SRL_WALKER_DIR = {$MACRO CURRENT_DIRECTORY};
  SRL_WALKER_MAP = {$MACRO CURRENT_DIRECTORY} + 'map.png';

{$I webgraph.simba}
{$I world.graph}
{$I zeah.graph}

// not a const, allow people to edit.
var
  RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES: TPoint = [25,110];

type
(*
type PRSWalker
~~~~~~~~~~~~~~
TRSWalker pointer.
*)
  PRSWalker = ^TRSWalker;

(*
type TRSWalker_OnWalkEvent
~~~~~~~~~~~~~~~~~~~~~~~~~~
Callback method to use while walking. This can be used to perform custom tasks while walking.

Example
-------

  procedure WalkerTasks(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
  begin
    Antiban.RandomTab();
  end;

  var
    rsw: TRSWalker;

  begin
    rsw.Setup('world');
    rsw.OnWalkingEvent := @WalkerTasks;
  end;
*)
  TRSWalker_OnWalkEvent = procedure(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
(*
type TRSWalker_OnWalkEventEx
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Callback object method to use while walking. This can be used to perform custom tasks while walking.

Example
-------

  procedure TRSWalker.WalkerTasks(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
  begin
    Antiban.RandomTab();
  end;

  var
    rsw: TRSWalker;

  begin
    rsw.Setup('world');
    rsw.OnWalkingEventEx := @rsw.WalkerTasks;
  end;
*)
  TRSWalker_OnWalkEventEx = procedure(Walker: PRSWalker; Position: TPoint; Destination: TPoint) of object;

(*
type TRSWalker
~~~~~~~~~~~~~~
TRSWalker is the record responsbile for walking and position.
*)
  TRSWalker = record(TSRLBaseRecord)
    Region: TBox;
    RegionIndex: Integer;

    Map: TRSWalkerMap;
    Cache: TMatchTemplateRGBCache;

    WebGraph: TWebGraph;

    EnableRunAtEnergy: Int32;

    Scaling: Int32;
    Similarity: Single;
    ScreenWalk: Boolean;
    AdaptiveWalk: Boolean;
    NearZoomMode: Boolean;

    ClickRandomness: Int32;
    AdaptiveToggleDistances: TPoint;

    Path: TPointArray;
    PathIndex: Int32;

    FancyMouse: Boolean;
    MouseAheadTimer: Int32;

    Enabled: Boolean;

    OnWalkEvent: TRSWalker_OnWalkEvent;
    OnWalkEventEx: TRSWalker_OnWalkEventEx;

    OnWalkingEvent: TRSWalker_OnWalkEvent;
  end;

(*
Walker.InternalSetup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.InternalSetup();

Internal walker method automatically called by Walker.Setup().
You probably will never need to call this directly.
*)
procedure TRSWalker.InternalSetup();
var
  MinimapImage, MinimapSample: TMufasaBitmap;
begin
  Self.Name := 'Walker';

  MinimapImage := Self.GetCleanMinimap();
  MinimapSample := Self.ScaleMinimap(MinimapImage, Self.Scaling);

  Self.Cache := TMatchTemplateRGBCache.Create(Self.Map.ScaledMap.ToMatrix(), MinimapSample.ToMatrix());

  MinimapSample.Free();
  MinimapImage.Free();
end;

(*
Walker.Free
~~~~~~~~~~~
.. pascal:: procedure TRSWalker.Free;

Internal walker method automatically called on script termination.
You probably will never need to call this directly. If you do, you won't be able to use your walker until you set it up again.
*)
procedure TRSWalker.Free;
begin
  if Assigned(Self.Map) then
    Self.Map.Free();
end;

(*
Walker.Setup
~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.Setup(Map: String; Scaling: Int32 = 8);
.. pascal:: procedure TRSWalker.Setup(Map: String; Regions: TBoxArray; Scaling: Integer = 8); overload;
.. pascal:: procedure TRSWalker.Setup(Regions: TBoxArray; Scaling: Integer = 8); overload;

Setup method to be called in scripts.
There's 4 versions of the method you can call depending on the parameters you pass in.
All of them have a scaling parameter in common that defaults to 8.
This is used to adjust the downscaling of the map used, lower downscaling makes walker more accurate at the cost of speed.
The speed difference is more or less porportional to the scaling, higher being faster. Unless you have issues with wrong positions you should probably not touch it.

Map is the map name you want to load. The file is assumed to be in the walker maps directory: Simba/Includes/SRL/osr/walker/maps
If the map is not there, an error will be thrown.
You can optionally load only certain regions of the map. This is useful if there's a map that has the area you want but it's too slow due to it's size.
The regions are specified as a TBoxArray and they are cropped from the map you specify on setup and joined into a single map image. This type of setup retains the coordinates of the original map image.
You can also optionally omit the Map name to make walker use the default SRL map which you can find in: Simba/Includes/SRL/osr/walker/map.png

Example
-------

  //The following are several setup examples. Keep in mind that if the file doesn't exist in the maps folder, Walker will throw an error.
  var
    rsw: TRSWalker;

  begin
    rsw.Setup('world');
    rsw.Setup('world.png');
    rsw.Setup('world', 6);
    rsw.Setup();
    rsw.Setup([[4460, 1900, 4800, 2250], [75, 75, 1000, 1000]]); //loads GE and lunar isle.
  end;
*)
procedure TRSWalker.Setup(Scaling: Integer = 8);
begin
  Self.Scaling := Scaling;
  Self.Map.Load(SRL_WALKER_MAP, Scaling);

  Self.InternalSetup();
end;

procedure TRSWalker.Setup(Map: String; Scaling: Int32 = 8); overload;
begin
  Self.Scaling := Scaling;
  Self.Map.Load(Map, Scaling);

  Self.InternalSetup();
end;

procedure TRSWalker.Setup(Map: String; Regions: TBoxArray; Scaling: Integer = 8); overload;
begin
  Self.Scaling := Scaling;
  Self.Map.Load(Map, Regions, Scaling);

  Self.InternalSetup();
end;

procedure TRSWalker.Setup(Regions: TBoxArray; Scaling: Integer = 8); overload;
begin
  Self.Scaling := Scaling;
  Self.Map.Load(SRL_WALKER_MAP, Regions, Scaling);

  Self.InternalSetup();
end;

(*
Walker.CleanMinimap
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.CleanMinimap(Bitmap: TMufasaBitmap);

Internal walker method used to clear minimap dots from the minimap.
You probably don't need to use this.
*)
procedure TRSWalker.CleanMinimap(Bitmap: TMufasaBitmap);

  procedure Find(P: TPoint);
  var
    Area: TBox;
    Pixel: Int32;
    X, Y: Int32;
  begin
    Area := [P.X - 5, P.Y - 5, P.X + 5, P.Y + 5];

    for Y := Area.Y1 to Area.Y2 do
      for X := Area.X1 to Area.X2 do
        if Bitmap.PointInBitmap(X, Y) then
        begin
          Pixel := Bitmap.GetPixel(X, Y);

          SetToleranceSpeed2Modifiers(0.001, 0.001);
          if SimilarColors($FFFFFF, Pixel, 30) then
            Bitmap.SetPixel(X, Y, 0);

          SetToleranceSpeed2Modifiers(0.05, 1);
          if SimilarColors($00FFFF, Pixel, 30) then
            Bitmap.SetPixel(X, Y, 0);

          SetToleranceSpeed2Modifiers(0.05, 1);
          if SimilarColors($0000FF, Pixel, 30) then
            Bitmap.SetPixel(X, Y, 0);

          SetToleranceSpeed2Modifiers(50, 100);
          if SimilarColors($000000, Pixel, 1) then
            Bitmap.SetPixel(X, Y, 0);
        end;
  end;

var
  Dots: TPointArray;
  Dot: TPoint;
  TPA: TPointArray;
begin
  Dots := Minimap.GetDotsBitmap(Bitmap, [ERSMinimapDot.NPC, ERSMinimapDot.ITEM, ERSMinimapDot.PLAYER]);

  SetColorToleranceSpeed(2);

  for Dot in Dots do
    Find(Dot);
  Find([Bitmap.GetWidth() div 2, Bitmap.GetHeight() div 2]); // our own player

  SetColorToleranceSpeed(1);
  SetToleranceSpeed2Modifiers(0.2, 0.2);

  // TODO: account for tolerance
  Bitmap.ReplaceColor(255,0);
  Bitmap.ReplaceColor(284358,0);
  Bitmap.ReplaceColor(1127261,0);

  Bitmap.DrawPolyFilled(Minimap.GetPolygon().Offset(-Minimap.X1, -Minimap.Y1), True, 0);

  Bitmap.FindColors(TPA, 0);
  Bitmap.Blend(TPA.Sorted(Bitmap.GetCenter()), 5);
  Bitmap.Pad(10);
end;

(*
Walker.GetCleanMinimap
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.GetCleanMinimap(): TMufasaBitmap;

Internal walker method used to "screenshot" the minimap and clean it with Walker.CleanMinimap().
You probably don't need to use this directly but you can see what it does in the following example.

Example
-------

  var
    rsw: TRSWalker;

  begin
    rsw.GetCleanMinimap().Debug();
  end;
*)
function TRSWalker.GetCleanMinimap(): TMufasaBitmap;
var
  Bitmap: TMufasaBitmap;
begin
  Bitmap := GetMufasaBitmap(BitmapFromClient(Minimap.Bounds));
  Bitmap.ReplaceColor(0, 1); // We need zero to be unique

  Self.CleanMinimap(Bitmap);

  Result.Init();

  Bitmap.RotateBitmapEx(Minimap.GetCompassAngle(False), False, True, Result);
  Bitmap.Free();
end;

(*
Walker.ScaleMinimap
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.ScaleMinimap(Bitmap: TMufasaBitmap; Scaling: Int32): TMufasaBitmap;

Internal walker method used to scale down the minimap to whatever TRSWalker.Scaling is.
You probably don't need to use this directly but you can see what it does in the following example.

Example
-------

  var
    rsw: TRSWalker;

  begin
    rsw.ScaleMinimap(rsw.GetCleanMinimap(), rsw.Scaling).Debug();
  end;
*)
function TRSWalker.ScaleMinimap(Bitmap: TMufasaBitmap; Scaling: Int32): TMufasaBitmap;
var
  RADIUS = 67;
var
  P: TPoint;
  Temp: TMufasaBitmap;
  TPA: TPointArray;
begin
  Temp := Bitmap.Copy();

  P := Temp.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, -8).Rotate(-Minimap.GetCompassAngle(False), P); // fixed

  Temp.DrawCircleFilled(P.X, P.Y, RADIUS, True, 0);

  RADIUS += 3;

  Temp.Crop(P.X - RADIUS, P.Y - RADIUS, P.X + RADIUS, P.Y + RADIUS);
  Temp.FindColors(TPA, 0);
  Temp.Blend(TPA.Sorted(Temp.GetCenter()), 3);
  Temp.DrawCircleFilled(Temp.GetCenter().X, Temp.GetCenter().Y, RADIUS, True, 0);

  Result := Temp.Downsample(Scaling, False);

  Temp.Free();
end;

(*
Walker.ScaledSearch
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.ScaledSearch(Bitmap: TMufasaBitmap; Samples: Int32): TPointArray;

Internal walker method used to get an initial TPointArray of possible positions.
This is performed in a scaled down map with a scaled down minimap. This is very innacurate by itself but by ruling down most of the map
in a scaled search before doing a full sized search speed has a dramatic boost.
You probably won't ever need to call this directly.
*)
function TRSWalker.ScaledSearch(Bitmap: TMufasaBitmap; Samples: Int32): TPointArray;
var
  Sample: TMufasaBitmap;
  Matrix: TSingleMatrix;
begin
  Sample := Self.ScaleMinimap(Bitmap, Self.Scaling);
  Matrix := MatchTemplateMask(Self.Cache, Sample.ToMatrix, TM_CCOEFF_NORMED);

  while Length(Result) < Samples do
    with Matrix.ArgMax() do
    begin
      Result += Offset(Sample.GetWidth() div 2, Sample.GetHeight() div 2) * Self.Scaling;
      Matrix.Fill([X - 5, Y - 5, X + 5, Y + 5], 0);
    end;

  Result := Result.Offset(Self.Scaling div 2, Self.Scaling div 2);

  Sample.Free();
end;

(*
Walker.FullSearch
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.FullSearch(Templ, World: TMufasaBitmap; Position: TPoint; out Match: Single): TPoint;

Internal walker method used to get the player position.
This is used by TRSWalker.GetMyPos() to determine how likely is the **Position** passed in, our actual position.
This likelyhood is returned with **Match** which ranges from 0 to 1.
You probably won't ever need to call this directly.
*)
function TRSWalker.FullSearch(Templ, World: TMufasaBitmap; Position: TPoint; out Match: Single): TPoint;
const
  TEMPL_SIZE = 25;
  SLICE_SIZE = TEMPL_SIZE + 45;
  SCALING = 2;
var
  Slice, SliceScaled, TemplScaled: TMufasaBitmap;
  Matrix: TSingleMatrix;
  Area: TBox;
begin
  Area := [
    Max(0, Position.X - SLICE_SIZE),
    Max(0, Position.Y - SLICE_SIZE),
    Min(World.GetWidth()  - 1, Position.X + SLICE_SIZE),
    Min(World.GetHeight() - 1, Position.Y + SLICE_SIZE)
  ];

  Slice := World.Copy(Area.X1, Area.Y1, Area.X2, Area.Y2);
  SliceScaled := Slice.Downsample(SCALING);

  TemplScaled := Templ.Downsample(SCALING);
  with TemplScaled.GetCenter() do
    TemplScaled.Crop(X - TEMPL_SIZE, Y - TEMPL_SIZE, X + TEMPL_SIZE, Y + TEMPL_SIZE);

  Matrix := SliceScaled.MatchTemplate(TemplScaled, TM_CCOEFF_NORMED);
  with Matrix.ArgMax() do
  begin
    Match := Matrix[Y, X];

    Result.X := Area.X1 + (X + TEMPL_SIZE) * SCALING;
    Result.Y := Area.Y1 + (Y + TEMPL_SIZE) * SCALING;
  end;

  TemplScaled.Free();
  SliceScaled.Free();
  Slice.Free();
end;


(*
Walker.GetMyPos
~~~~~~~~~~~~~~~
function TRSWalker.GetMyPos: TPoint;

Returns the players current position on the loaded map.

Example::

  WriteLn(Walker.GetMyPos());

  // Check to see the match percentage if needed
  WriteLn(Walker.Similarity);
*)
function TRSWalker.GetMyPos(): TPoint;
const
  SAMPLES = 3;
var
  Bitmap: TMufasaBitmap;
  TPA: TPointArray;
  I: Int32;
  Hit: TPoint;
  Match: Single;
begin
  Self.RegionIndex := -1;
  Self.Region := [];
  Self.Similarity := 0;

  Bitmap := Self.GetCleanMinimap();

  TPA := Self.ScaledSearch(Bitmap, SAMPLES);
  for I := 0 to High(TPA) do
  begin
    Hit := Self.FullSearch(Bitmap, Self.Map.Map, TPA[I], Match);

    if Match > Self.Similarity then
    begin
      Self.Similarity := Match;

      Result := Hit;
    end;
  end;

  Self.RegionIndex := Self.Map.RegionIndexFromPoint(Result);
  if Self.RegionIndex > -1 then
  begin
    Self.Region := Self.Map.Regions[Self.RegionIndex];

    Result := Self.Map.RegionToGlobal(Result);
  end;

  Bitmap.Free();
end;

(*
Walker.WorldToMM
~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WorldToMM(PlayerPoint, WorldPoint: TPoint; Radians: Double): TPoint;
.. pascal:: function TRSWalker.WorldToMM(WorldPoint: TPoint): TPoint; overload;

Converts a walker coordinate to a point in the minimap.

Example::

  var
    rsw: TRSWalker;
    p: TPoint;
    bitmap: TMufasaBitmap;

  begin
    rsw.Setup([RSWalkerRegions.GRAND_EXCHANGE]); //Make sure you are in GE for this example.
    p := rsw.WorldToMM([4620, 2100]);            //This is just a random point in the ge with SRL map.

    bitmap.FromClient();
    bitmap.DrawCross(p, 4, $FFFFFF);
    bitmap.Free();
  end;
*)
function TRSWalker.WorldToMM(PlayerPoint, WorldPoint: TPoint; Radians: Double): TPoint;
begin
  Result := WorldPoint - PlayerPoint + Minimap.Center;
  Result := Result.Rotate(Radians, Minimap.Center);
end;

function TRSWalker.WorldToMM(WorldPoint: TPoint): TPoint; overload;
begin
  Result := Self.WorldToMM(Self.GetMyPos(), WorldPoint, Minimap.GetCompassAngle(False));
end;

(*
Walker.CheckRunEnergy
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.CheckRunEnergy();

Internal method used to check and enable the player run.
You will probably never need to call this directly.

The values used are hardcoded and if you don't like them, it's recommended you override the method.
The following example shows how one could override the function to enable run at 50% energy everytime, keep in mind though, you shouldn't do this, you should add randomness to it!

Example
-------

  procedure TRSWalker.CheckRunEnergy(); override;
  begin
    if Minimap.IsRunEnabled() or (Minimap.GetRunEnergy() < 50) then
      Exit;
    Minimap.EnableRun();
  end;
*)
procedure TRSWalker.CheckRunEnergy();
begin
  if Minimap.IsRunEnabled() or (Minimap.GetRunEnergy() < Self.EnableRunAtEnergy) then
    Exit;

  Self.EnableRunAtEnergy := SRL.SkewedRand(40, 10, 100);

  Minimap.EnableRun();
end;

(*
Walker.AdaptiveWalkCheck
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.AdaptiveWalkCheck(Position: TPoint);

Internal method used to check if adaptive walk should toggle and toggle TRSWalker.ScreenWalk.
You will probably never need to call this directly.
*)
procedure TRSWalker.AdaptiveWalkCheck(Position: TPoint);
var
  wasEnabled: Boolean;
begin
  wasEnabled := Self.ScreenWalk;
  Self.ScreenWalk := False;
  if ((Position.DistanceTo(Self.Path[0]) < Self.AdaptiveToggleDistances.X) or
      (Position.DistanceTo(Self.Path[High(Self.Path)]) < Self.AdaptiveToggleDistances.Y)) and
     (Random() > 0.05) then
    Self.ScreenWalk := True

  else if Random() < 0.02 then
    Self.ScreenWalk := True;

  if (not wasEnabled) and (Self.ScreenWalk) and (Self.FancyMouse) and (Random() < 0.75) and (Minimap.IsPointOn(Mouse.Position)) then
    Self.DoMouseAhead(Position, True);
end;

(*
Walker.DoMouseAhead
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.DoMouseAhead(Position: TPoint; Forced: Boolean = False);

Internal method used to pre-hover the next walking step.
You will probably never need to call this directly.
*)
procedure TRSWalker.DoMouseAhead(Position: TPoint; Forced: Boolean = False);
var
  flag: TPoint;
  dist: Int32;

  procedure MouseToNextPoint(myPos: TPoint);
  var
    mmPos: TPoint;
    idx: Int32;
    angle: Double;
    SlowMouse: TMouse;
  begin
    angle := Minimap.GetCompassAngle(False);
    idx := Self.PathIndex;
    while (idx < High(Self.Path)) and Self.IsWalkable(Self.Path[idx+1], myPos, angle) do
      Inc(idx);

    if (Idx = High(Self.Path)) and (Random(10) > 2) then Exit();

    mmPos := Self.Path[idx] - myPos + minimap.Center;
    mmPos := mmPos.Rotate(angle, Minimap.Center);

    if Self.ScreenWalk then
      mmPos := Minimap.PointToMsRect(mmPos).Mean();

    SlowMouse := Mouse;
    SlowMouse.Speed := Random(6,10);
    if not Self.ScreenWalk then
      SlowMouse.Move(Box(mmPos, Random(5,16), Random(5,16)))
    else
      SlowMouse.Move(Box(mmPos, Random(15,36), Random(15,36)));
  end;
begin
  if (not Forced) then
    if (GetTimeRunning() < Self.MouseAheadTimer) or (not Minimap.FindFlag(Flag)) then
      Exit();

  dist := Trunc(flag.DistanceTo(Minimap.Center()));
  if InRange(dist, Random(5,10), Random(60,70)) then
    MouseToNextPoint(Position);

  Self.MouseAheadTimer := GetTimeRunning() + SRL.SkewedRand(0,50,500);
  if Self.ScreenWalk then
    Self.MouseAheadTimer += SRL.SkewedRand(0,50,500);
end;

(*
Walker.WaitMoving
~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32);

Internal method used to wait while we are moving using walker.
You will probably never need to call this directly.

This is where TRSWalker.OnWalkingEvent are called.
*)
procedure TRSWalker.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32);
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
  awct: Int64;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));

  // initial timeout needs to be longer, as we might not have started walking yet.
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.GetMyPos();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    Position.Previous := Position.Current;
    Position.Current := Self.GetMyPos();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    if (@Self.OnWalkingEvent <> nil) then
      Self.OnWalkingEvent(@Self, Position.Current, Destination);

    if (Self.AdaptiveWalk) and (GetTickCount() > awct) then
    begin
      Self.AdaptiveWalkCheck(Position.Current);
      awct := GetTickCount() + 1000;
    end;

    if Self.FancyMouse then
      Self.DoMouseAhead(Position.Current);

    if not Self.Enabled then
      Break;

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

(*
Walker.Click
~~~~~~~~~~~~
.. pascal:: function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean;

Internal method used by walker to handle clicking while walking.
You will probably never need to call this directly.

If you wish to modify certain walker behaviors, it's a good approach to override this function.
For example, if you are screenwalking and you don't like it right clicking > walk here when it hovers a tree you could use the following example.

Example
-------

  function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean; override;
  var
    P: TPoint;
  begin
    Result := True;

    if Self.ScreenWalk then
    begin
      Mouse.Move(Minimap.PointToMsRect(MinimapPoint).Mean());

      if not MainScreen.IsUpText(['Walk here', 'Tree', 'tree']) then
        Exit(ChooseOption.Select('Walk here'));
    end else
    begin
      P := MinimapPoint.Random(-Randomness, Randomness);
      while not Minimap.IsPointOn(P) do
        P := MinimapPoint.Random(-Randomness, Randomness);

      Mouse.Move(P);
    end;

    Mouse.Click(MOUSE_LEFT);

    // 15% chance of spam clicking
    if (Randomness > 0) and (Random() < 0.15) then
      for 0 to Random(3) do
      begin
        Mouse.Click(Mouse.Position(), MOUSE_LEFT);

        Wait(0, 150, wdLeft);
      end;
  end;

*)
function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean;
var
  P: TPoint;
begin
  Result := True;

  if Self.ScreenWalk then
  begin
    Mouse.Move(Minimap.PointToMsRect(MinimapPoint).Mean());

    if not MainScreen.IsUpText('Walk here') then
      Exit(ChooseOption.Select('Walk here'));
  end else
  begin
    P := MinimapPoint.Random(-Randomness, Randomness);
    while not Minimap.IsPointOn(P) do
      P := MinimapPoint.Random(-Randomness, Randomness);

    Mouse.Move(P);
  end;

  Mouse.Click(MOUSE_LEFT);

  // 15% chance of spam clicking
  if (Randomness > 0) and (Random() < 0.15) then
    for 0 to Random(3) do
    begin
      Mouse.Click(Mouse.Position(), MOUSE_LEFT);

      Wait(0, 150, wdLeft);
    end;
end;

(*
Walker.WalkFinalStep
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkFinalStep(PlayerPoint, WorldPoint: TPoint; WaitUntilDistance: Int32): Boolean;

Internal method used by walker when finishing walking a path.
You will probably never need to call this directly but it can be used to take a single step.
*)
function TRSWalker.WalkFinalStep(PlayerPoint, WorldPoint: TPoint; WaitUntilDistance: Int32): Boolean;
var
  MinimapPoint: TPoint;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, 0);
  if Result then
    Self.WaitMoving(WorldPoint, WaitUntilDistance);
end;

(*
Walker.WalkStep
~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkStep(PlayerPoint, WorldPoint: TPoint): Boolean;

Internal method used by walker while walking a path.
You will probably never need to call this directly.
*)
function TRSWalker.WalkStep(PlayerPoint, WorldPoint: TPoint): Boolean;
var
  MinimapPoint: TPoint;
  WaitUntilDistance: Int32;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, Self.ClickRandomness);

  if Result then
  begin
    if (Random() < 0.15) then // 15% chance of randomness else mean
      WaitUntilDistance := Random(Distance(Minimap.Center, MinimapPoint))
    else
      WaitUntilDistance := SRL.NormalRange(0, Distance(Minimap.Center, MinimapPoint) + 10);

    Self.WaitMoving(WorldPoint, WaitUntilDistance);
  end
end;

(*
Walker.IsWalkable
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.IsWalkable(WorldPoint: TPoint; PlayerPoint: TPoint; Angle: Double): Boolean;

Internal method used by walker to decide if the destination point is within 1 click reach.
You will probably never need to call this directly.
*)
function TRSWalker.IsWalkable(WorldPoint: TPoint; PlayerPoint: TPoint; Angle: Double): Boolean;
var
  MinimapPoint: TPoint;
  B: TBox;
begin
  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Angle);

  case Self.ScreenWalk of
    True:
      begin
        B := Minimap.PointToMSRect(MinimapPoint, 1, 1, Angle).Bounds();
        if MainScreen.IsVisible(B.Middle) then
          Result := CountColor($000000, B.Expand(0, MainScreen.Bounds())) = 0; // Client doesn't always render everything when zoomed out
      end;

    False:
      begin
        Result := Minimap.IsPointOn(MinimapPoint, -1);
      end;
  end;
end;


(*
TRSWalker.WalkPath
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

Walks a path of points taken from the loaded map. We advice that WaitUntilDistance is not 0.

Parameters
----------

Path
	Array of points taken from the loaded map to walk. Must be ordered from start to finish.

WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.

	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example
-------

  Walker.WalkPath([[100,100],[120,120],[140,140],[160,160],[180,180]]);
*)
function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

  function BuildPath(TPA: TPointArray): TPointArray;
  var
    I, J: Int32;
    Line: TPointArray;
  begin
    for I := 1 to High(TPA) do
    begin
      Line := TPAFromLine(TPA[I-1], TPA[I]);

      J := 0;
      while J < High(Line) do
      begin
        Result += Line[J];

        // keep the steps low, as mainscreen walking might just have a few tiles visible when NearZoomMode is set True
        if (Self.NearZoomMode) and ((Self.ScreenWalk) or (Self.AdaptiveWalk)) then
          Inc(J, Random(1, 4))
        else
          Inc(J, Random(3, 12));
      end;
    end;

    Result += TPA[High(TPA)];
  end;

  function AdvancePath(var Index: Int32; PlayerPoint: TPoint): Boolean;
  var
    Angle: Double := Minimap.GetCompassAngle(False);
    Previous: Int32 := Index;
    Nearest, Furthest: Int32;
  begin
    Nearest := Self.Path.Find(Self.Path.Sorted(PlayerPoint)[0]);
    Self.PathIndex := Nearest;

    while (Nearest < High(Self.Path)) and (not Self.IsWalkable(Self.Path[Nearest+1], PlayerPoint, Angle)) do
      Inc(Nearest);

    Furthest := Nearest;
    while (Furthest < High(Self.Path)) and Self.IsWalkable(Self.Path[Furthest+1], PlayerPoint, Angle) do
      Inc(Furthest);

    Index := Furthest;

    // do the result check before randomness to avoid false error
    Result := (Index > Previous);

    // 15% chance of randomness else furthest
    if Random() < 0.15 then
      Index := Random(Nearest, Furthest);
  end;

var
  PlayerPoint: TPoint;
  Index, Fails: Int32;
begin
  Self.Enabled := True;
  PlayerPoint := Self.GetMyPos();
  Self.Path := BuildPath([PlayerPoint] + Path);

  if Self.AdaptiveWalk then
  begin
    Self.AdaptiveToggleDistances.X := RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES.X + Random(-6,6);
    Self.AdaptiveToggleDistances.Y := RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES.Y + Random(-16,16);
    Self.AdaptiveWalkCheck(PlayerPoint);
  end;

  while Self.Enabled and (Fails < 10) do
  begin
    PlayerPoint := Self.GetMyPos();

    if AdvancePath(Index, PlayerPoint) then
      Fails := 0
    else
    begin
      Inc(Fails);

      // Likely haven't moved far enough to advance to next point
      if (Fails < 5) then begin
        Wait(300);
        Continue;
      end else begin
        // screen walking struggles, so disable it
        if Self.AdaptiveWalk then
          Self.ScreenWalk := False
        else if (Fails = 5) then
          case SRL.Dice(50) of
            True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - SRL.TruncatedGauss(30, 360, 3));
            False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + SRL.TruncatedGauss(30, 360, 3));
          end;
      end;

      if (Fails mod 2 = 0) then
        Minimap.WaitFlag();
    end;

    if Index = High(Self.Path) then
    begin
      if Self.WalkFinalStep(PlayerPoint, Self.Path[Index], WaitUntilDistance) then
        Exit(True);
    end else
      Self.WalkStep(PlayerPoint, Self.Path[Index]);
  end;

  if Fails = 10 then
    Self.DebugLn('Failed to advance path');
end;

(*
TRSWalker.WalkBlind
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;

"Blindly" walks to a point taken from the loaded map.
A straight line is generated between the player's position and destination which is then walked.

Parameters
----------

Destination
	Destination point taken from the loaded map.

WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.

	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example
-------

  Walker.WalkBlind([300, 300]);
*)
function TRSWalker.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;
begin
  Result := Self.WalkPath([Destination], WaitUntilDistance);
end;

(*
TRSWalker.WebWalk
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WebWalk(Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean;

Web walks to the destination point on the loaded map. Does **not** handle any obstacles.
Please run ``webber.simba`` to see how webgraphs are built.

Pre built webgraphs are available for "World" and "Zeah" when used.

Parameters
----------

Destination
	Destination point taken from the loaded map.

WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.

	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

PathRandomness
	Randomness to add to the path so the absoulte shortest path isn't always taken. Must be between 0..1

Example
-------

  var Walker: TRSWalker;

  Walker.Setup('world');
  Walker.WebWalk([4595, 3575]); // Lumbridge

  // Or use a location from the webgraph
  Walker.WebWalk(WorldWeb.LOCATION_LUMBRIDGE);
*)
function TRSWalker.WebWalk(Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean;
var
  Path: TPointArray;
begin
  if not InRange(PathRandomness, 0, 1) then
    Self.Fatal('TRSWalker.WebWalk `PathRandomness` must be within 0..1');

  Path   := Self.WebGraph.PathBetween(Self.GetMyPos, Destination, PathRandomness);
  Result := Self.WalkPath(Path, WaitUntilDistance);
end;

(*
TRSWalker.DebugPosition
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.DebugPosition();

Debugs the player position in the currently loaded map.

Example
-------

  var
    rsw: TRSWalker;
  begin
    rsw.Setup();
    while True do
      rsw.DebugPosition();
  end;
*)
procedure TRSWalker.DebugPosition();
var
  X1, Y1, X2, Y2, X, Y: Int32;
  P: TPoint;
  Bitmap, WorldBitmap, MinimapBitmap: TMufasaBitmap;
  Time: Double;
  Position: TPoint;
  Lines: TStringArray;
begin
  Freeze();

  Time := PerformanceTimer();
  Position := Self.GetMyPos();
  Time := PerformanceTimer() - Time;

  if Self.RegionIndex > -1 then
    Position := Self.Map.GlobalToRegion(Self.RegionIndex, Position);

  X1 := Max(0, Position.X - 200);
  Y1 := Max(0, Position.Y - 200);
  X2 := Min(X1 + 400, Self.Map.Map.GetWidth()  - 1);
  Y2 := Min(Y1 + 400, Self.Map.Map.GetHeight() - 1);

  X := Position.X - X1;
  Y := Position.Y - Y1;

  WorldBitmap := Self.Map.Map.Copy(X1, Y1, X2, Y2);
  WorldBitmap.LineTo(Point(0, Y), Point(X2 - X1, Y), $00FF00);
  WorldBitmap.LineTo(Point(X, 0), Point(X, Y2 - Y1), $00FF00);
  WorldBitmap.DrawBox([X - 2, Y - 2, X + 2, Y + 2], $FFFFFF);

  MinimapBitmap := Self.ScaleMinimap(Self.GetCleanMinimap(), 1);

  P := MinimapBitmap.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), P);

  MinimapBitmap.DrawBoxFilled([P.X - 1, P.Y - 1, P.X + 1, P.Y + 1], False, $FFFFFF);

  Lines := [
    'Region: ' + ToStr(Self.RegionIndex),
    'Acc: '    + ToStr(Round(Self.Similarity, 3)),
    'Time: '   + ToStr(Round(Time)) + ' ms'
  ];

  Bitmap.Init();
  Bitmap.SetSize(430 + MinimapBitmap.GetWidth(), 420);
  Bitmap.DrawClear($403027);

  Bitmap.SetFontName('Consolas');
  Bitmap.SetFontSize(18);
  Bitmap.SetFontAntialiasing(True);

  Bitmap.DrawText(Format('(%d, %d)', [Position.X - Self.Region.X1, Position.Y - Self.Region.Y1]), [420, 20 + MinimapBitmap.GetHeight()], $FFFFFF);
  Bitmap.DrawText(Lines[0], [420, 350], $FFFFFF);
  Bitmap.DrawText(Lines[1], [420, 370], $FFFFFF);
  Bitmap.DrawText(Lines[2], [420, 390], $FFFFFF);

  WorldBitmap.DrawTransparent(10, 10, Bitmap);
  WorldBitmap.Free();

  MinimapBitmap.DrawTransparent(420, 10, Bitmap);
  MinimapBitmap.Free();

  Bitmap.Debug();
  DisplayDebugImgWindow(Bitmap.getWidth, bitmap.getHeight());
  Bitmap.Free();

  UnFreeze();
end;

(*
TRSWalker.GetTileMS
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.GetTileMSEx(Me, Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
.. pascal:: function TRSWalker.GetTileMS(Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;

Returns a tile on the mainscreen with the help of walker and mm2ms.

Example
-------

  Debug(rsw.GetTileMS(rsw.GetMypos() + [10, 10]));
*)
function TRSWalker.GetTileMSEx(Me, Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
var
  angle: Double;
begin
  Loc   := Minimap.Center + (Loc - Me);
  angle := Minimap.GetCompassAngle(False);
  Loc   := Loc.Rotate(angle, Minimap.Center);

  Result := Minimap.VecToMSRect(Vec3(Loc.x - offx, Loc.y - offy, Height), 1, 1, angle);
end;

function TRSWalker.GetTileMS(Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
begin
  Result := Self.GetTileMSEx(Self.GetMyPos(), Loc, Height, Offx, Offy);
end;

(*
TRSWalker.MSToWorld
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.MSToWorldEx(Me, Loc: TPoint; Height: Int32 = 0; Accuracy: Double = 0.2): TPoint;
.. pascal:: function TRSWalker.MSToWorld(Loc: TPoint; Height: Int32=0; Accuracy:Double=0.2): TPoint;

Converts a point on the mainscreen to a walker point.
*)
function TRSWalker.MSToWorldEx(Me, Loc: TPoint; Height: Int32 = 0; Accuracy: Double = 0.2): TPoint;
begin
  Result := Me + (MainScreen.PointToMM(Loc, Height, Accuracy).ToPoint() - Minimap.Center);
  Result := Result.Rotate(-Minimap.GetCompassAngle(False), Me);
end;

function TRSWalker.MSToWorld(Loc: TPoint; Height: Int32=0; Accuracy:Double=0.2): TPoint;
begin
  Result := Self.MSToWorldEx(Self.GetMyPos(), Loc, Height, Accuracy);
end;
