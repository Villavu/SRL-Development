(*
Inventory
=========
Methods to interact with the inventory.
*)

{$DEFINE SRL_INVENTORY_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  //Column wise and "reversed" column wise - normal pattern
  DROP_PATTERN_REGULAR: TIntegerArray = [0..27];
  DROP_PATTERN_REGULAR_R: TIntegerArray = [3,2,1,0, 7,6,5,4, 11,10,9,8, 15,14,13,12, 19,18,17,16, 23,22,21,20, 27,26,25,24];

  //Column wise snake and "reversed" version
  DROP_PATTERN_SNAKE: TIntegerArray  = [0,1,2,3, 7,6,5,4, 8,9,10,11, 15,14,13,12, 16,17,18,19, 23,22,21,20, 24,25,26,27];
  DROP_PATTERN_SNAKE_R: TIntegerArray = [3,2,1,0, 4,5,6,7, 11,10,9,8, 12,13,14,15, 19,18,17,16, 20,21,22,23, 27,26,25,24];

  //by row (and "reversed")
  DROP_PATTERN_TOPDOWN: TIntegerArray = [0,4,8,12,16,20,24,  1,5,9,13,17,21,25,  2,6,10,14,18,22,26, 3,7,11,15,19,23,27];
  DROP_PATTERN_TOPDOWN_R: TIntegerArray = [3,7,11,15,19,23,27, 2,6,10,14,18,22,26, 1,5,9,13,17,21,25,  0,4,8,12,16,20,24];

  //Spiral pattern: Starts in slot 0(top left corner of invy) and circles in a clockwise spiral
  DROP_PATTERN_SPIRAL: TIntegerArray   = [0,1,2,3, 7,11,15,19,23, 27,26,25,24, 20,16,12,8,4, 5, 6,10,14,18,22, 21,17,13,9];

type
  TRSInventory = record(TRSInterface)
    LOW_SLOT: Int32;
    HIGH_SLOT: Int32;
  end;

procedure TRSInventory.Setup; override;
begin
  inherited;

  Self.Name := 'Inventory';

  Self.LOW_SLOT := 0;
  Self.HIGH_SLOT := 27;
end;

procedure TRSInventory.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSInventory.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.INVENTORY);
end;

function TRSInventory.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.INVENTORY);
end;

function TRSInventory.GetSlotBoxes: TBoxArray;
begin
  Result := Grid(4, 7, 31, 31, [11, 5], [Self.X1 + 13, Self.Y1 + 9]);
end;

function TRSInventory.GetSlotBox(Slot: Int32): TBox;
begin
  Result := Self.GetSlotBoxes()[Slot];
end;


(*
Inventory.PointToSlot
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.PointToSlot(P: TPoint): Int32;

Returns the inventory slot index which contains the TPoint `P`.
Returns -1 if the point does not fall in any slots.

Example
-------

  var P: TPoint;
  var Slot: Int32;

  P := Inventory.GetSlotBox(15).Middle; // Example point

  Slot := Inventory.PointToSlot(P);
  WriteLn(Slot); // 15
*)
function TRSInventory.PointToSlot(P: TPoint): Int32;
var
  I: Int32;
  Slots: TBoxArray;
begin
  Slots := Self.GetSlotBoxes();
  for I := 0 to High(Slots) do
    if Slots[I].Contains(P) then
      Exit(I);

  Result := -1;
end;

(*
Inventory.HoverSlot
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.HoverSlot(Slot: Int32): Boolean;

Moves the mouse over the slot. Slot is an Integer between 0 and 27.

Example
-------

  if Inventory.HoverSlot(1) then
    WriteLn('Mouse is now over slot #1');
*)
function TRSInventory.HoverSlot(Slot: Int32): Boolean;
begin
  Result := Self.IsOpen();
  if Result then
    Mouse.Move(Self.GetSlotBox(Slot));
end;

(*
Inventory.ClickSlot
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.ClickSlot(Slot: Int32; Option: String = ''): Boolean;

Moves the mouse and clicks on the slot. Slot is an Integer between 0 and 27.

If option is empty the slot is left clicked. Else a right click is performed
and the option is selected from the choose option menu.

Example
-------

  if Inventory.ClickSlot(1) then
    WriteLn('Left clicked slot #1');
    
  if Inventory.ClickSlot(1, 'Drop') then
    WriteLn('Right clicked and selected "Drop" on slot #1', 'Drop');  
*)
function TRSInventory.ClickSlot(Slot: Int32; Option: String = ''): Boolean;
begin
  if Self.HoverSlot(Slot) then
  begin
    if (Option <> '') then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      
      Result := True;
    end;
  end;
end;

function TRSInventory.IsSlotUsed(B: TBox): Boolean; overload;
begin
  // black with tolerance for when item is transparent
  Result := SRL.CountColor(CTS1(1118740, 35), B) > 0;
end;

function TRSInventory.IsSlotUsed(Slot: Int32): Boolean; overload;
begin
  Result := Self.Open() and Self.IsSlotUsed(Self.GetSlotBox(Slot));
end;

(*
Inventory.IsSlotSelected
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.IsSlotSelected(Slot: Int32): Boolean;

Returns True if the slot is selected (white outline).

Example
-------

  if Inventory.IsSlotSelected(1) then
    WriteLn('Slot 1 is selected!');
*)
function TRSInventory.IsSlotSelected(Slot: Int32): Boolean;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit(False);

  B := Self.GetSlotBox(Slot);
  B.Y1 += 8; // Skip item text

  Result := SRL.CountColor($FFFFFF, B) > 0;
end;

function TRSInventory.IsFull: Boolean;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit(False);

  for B in Self.GetSlotBoxes() do
    if not Self.IsSlotUsed(B) then
      Exit(False);
  
  Result := True;
end;

(*
Inventory.GetSelectedSlot
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.GetSelectedSlot: Int32;

Returns the index of the selected slot (white outline).
**-1** is returned if no slot is selected.

Example
-------

  WriteLn(Inventory.GetSelectedSlot());
*)
function TRSInventory.GetSelectedSlot: Int32;
var
  I: Int32;
begin
  if not Self.Open() then
    Exit(-1);

  for I := Self.LOW_SLOT to Self.HIGH_SLOT do
    if Self.IsSlotSelected(I) then
      Exit(I);

  Result := -1;
end;

(*
Inventory.SetSelectedSlot
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.SetSelectedSlot(Slot: Int32): Boolean;

Set the slot as selected (white outline).
Slot can be **-1** to unselect the currently selected slot.

Example
-------

  WriteLn(Inventory.GetSelectedSlot());
*)
function TRSInventory.SetSelectedSlot(Slot: Int32): Boolean;
var
  Selected: Int32;
begin
  Selected := Self.GetSelectedSlot();
  if (Selected = Slot) then
    Exit(True);

  if (Selected > -1) then
    Mouse.Click(Self.GetSlotBox(Selected), MOUSE_LEFT);
  if (Slot > -1) then
    Mouse.Click(Self.GetSlotBox(Slot), MOUSE_LEFT);

  Result := WaitUntil(Self.GetSelectedSlot() = Slot, 50, SRL.TruncatedGauss(1000, 2000));
end;

(*
Inventory.Use
~~~~~~~~~~~~~
.. pascal:: function TRSInventory.Use(Slot, OtherSlot: Int32): Boolean;

Selects **Slot** and uses with **OtherSlot**.

Example
-------

  Inventory.Use(1, 5); // Use item in slot 1 on Item in slot 5
*)
function TRSInventory.Use(Slot, OtherSlot: Int32): Boolean;
var
  B: TBox := Self.GetSlotBox(OtherSlot);
begin
  if B = [] then
    Exit;

  Result := Self.SetSelectedSlot(Slot);

  Wait(0, 1000, wdLeft);

  Mouse.Click(B, MOUSE_LEFT);
end;

function TRSInventory.ErrorPattern(Pattern: TIntegerArray=DROP_PATTERN_REGULAR; ErrorChance:Int32=5): TIntegerArray;
var i,j,h,k,tmp: Int32;
begin
  Result := Copy(Pattern);
  h := High(Pattern);
  i := 1;
  while i < h do
  begin
    if Random(100) < ErrorChance then
    begin
      case Random(0,2) of
        0:begin
            tmp := Result[i];
            for j:=i+1 to h do Result[j-1] := Result[j];
            Result[h] := tmp;
          end;
        1:begin
            Swap(Result[i+1],Result[i]);
          end;
        2:begin
            tmp := Result[i];
            k := Random(i+1,h);
            for j:=i+1 to k do Result[j-1] := Result[j];
            Result[k] := tmp;
          end;
      end;
    end;
    Inc(i);
  end;
end;

function TRSInventory.ShiftDrop(Slots: TIntegerArray): Boolean;
var
  Boxes: TBoxArray;
  I, Attempts: Int32;
  Selected: Int32;
  Circle: TCircle;
begin
  if (Length(Slots) = 0) then
    Exit(True);

  IsKeyDown(VK_SHIFT); // Clear cache

  Boxes := Self.GetSlotBoxes();

  try
    for Attempts := 1 to 5 do
    begin
      I := 0;

      while (I < Length(Slots)) do
      begin
        Selected := Self.GetSelectedSlot();
        if (Selected > -1) then
        begin
          Self.SetSelectedSlot(-1);

          Break;
        end;

        if Self.IsSlotUsed(Slots[I]) then
        begin
          if not IsKeyDown(VK_SHIFT) then
            KeyDown(VK_SHIFT);

          Mouse.Click(Self.GetSlotBox(Slots[I]), MOUSE_LEFT);

          // Spam click a little
          for 1 to SRL.TruncatedGauss(0, 3) do
          begin
            Circle.X := Mouse.Position().X;
            Circle.Y := Mouse.Position().Y;
            Circle.Radius := 5;

            Mouse.Click(Circle, MOUSE_LEFT, True);
          end;

          Wait(0, 250, wdLeft);
        end;

        Inc(I);
      end;

      if (I = Length(Slots)) then
        Exit;
    end;
  finally
    if IsKeyDown(VK_SHIFT) then
      KeyUp(VK_SHIFT);
  end;

  Result := Attempts <= 5;
end;

procedure TRSInventory.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Self.GetSlotBoxes(), False, $00FFFF);
end;

function TRSInventory.Count: Int32; 
var
  I: Int32;
begin
  for I := Self.LOW_SLOT to Self.HIGH_SLOT do
    if Self.IsSlotUsed(I) then
      Inc(Result);
end;

function TRSInventory.WaitCount(Count: Int32; WaitTime: Int32; Interval: Int32 = -1): Boolean;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.Count() = Count, Interval, WaitTime);
end;

(*
Inventory.RandomSlotNearby
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.RandomSlotNearby(Slot: Int32; Slots: TIntegerArray): Int32;

Randomly returns one of the **Slots** weighted towards **Slot** by distance.

Example
-------

  var Slot: Int32;

  Slot := Inventory.RandomSlotNearby(0, [0..27]);
  WriteLn('This slot is likely nearby slot 0');
  WriteLn(Slot);
*)
function TRSInventory.RandomSlotNearby(Slot: Int32; Slots: TIntegerArray): Int32;
var
  I: Int32;
  Boxes: TBoxArray;
begin
  Slots.Remove(Slot);
  if (Length(Slots) = 0) then
    Self.Fatal('RandomSlotNearby: No slots to choose from');
  
  SetLength(Boxes, Length(Slots));
  for I := 0 to High(Slots) do
    Boxes[I] := Self.GetSlotBox(Slots[I]);
  
  Result := Slots[SRL.RandomBoxNearby(Self.GetSlotBox(Slot).Middle, Boxes)];
end;

function TRSInventory.FindItems(Items: TRSItemArray; out Slots: TIntegerArray): Boolean;
var
  Item: TRSItem;
begin
  if not Self.Open() then
    Exit;

  for Item in Items do
    Slots += ItemFinder.Find(Item, Self.GetSlotBoxes());
  
  Result := Length(Slots) > 0;
end;

function TRSInventory.FindItem(Item: TRSItem; out Slots: TIntegerArray): Boolean; overload;
begin
  Result := Self.FindItems([Item], Slots);
end;

function TRSInventory.FindItem(Item: TRSItem; out Slot: Int32): Boolean; overload;
var
  Slots: TIntegerArray;
begin
  if not Self.Open() then
    Exit;

  Slots := ItemFinder.Find(Item, Self.GetSlotBoxes(), 1);
  
  if Length(Slots) > 0 then
  begin
    Slot := Slots[0];
    
    Result := True;
  end;
end;

//for use without having to pass extra parameters.
function TRSInventory.FindItem(Item: TRSItem): Boolean; overload;
var
  Slots: TIntegerArray;
begin
  Result := Self.FindItems([Item], Slots);
end;

function TRSInventory.CountItem(Item: TRSItem): Int32;
var
  Slots: TIntegerArray;
begin
  if Self.FindItem(Item, Slots) then
    Result := Length(Slots);
end;

function TRSInventory.CountItemStack(Item: TRSItem): Int32;
var
  Slot: Int32;
begin
  if Self.FindItem(Item, Slot) then
    Result := SRL.GetItemAmount(Self.GetSlotBox(Slot));
end;

function TRSInventory.HoverItem(Item: TRSItem): Boolean;
var
  Slot: Int32;
begin
  Result := Self.FindItem(Item, Slot);
  if Result then
    Mouse.Move(Self.GetSlotBox(Slot));
end;

function TRSInventory.ClickItem(Item: TRSItem; Option: String = ''): Boolean;
begin
  if Self.HoverItem(Item) then
  begin
    if (Option <> '') then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      
      Result := True;
    end;
  end;
end;

function TRSInventory.Use(Item, OtherItem: TRSItem): Boolean; overload;
var
  Slots, OtherSlots: TIntegerArray;
  Slot, OtherSlot: Int32;
begin
  Self.SetSelectedSlot(-1); // Item images change when selected...

  Result := Self.FindItem(Item, Slots) and Self.FindItem(OtherItem, OtherSlots);
  if Result then
  begin
    Slot := Slots[Random(Length(Slots))];
    OtherSlot := Self.RandomSlotNearby(Slot, OtherSlots);
  
    Result := Self.Use(Slot, OtherSlot);
  end;
end;

(*
Inventory.ShiftDrop
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSInventory.ShiftDrop(Items: TStringArray; Pattern: TIntegerArray): Boolean;

Shift drops items following the desired pattern.

Example
-------

  // Shift drop maple & willow logs in the snake pattern
  Inventory.ShiftDrop(['Maple logs', 'Willow logs'], DROP_PATTERN_SNAKE);
*)
function TRSInventory.ShiftDrop(Items: TRSItemArray; Pattern: TIntegerArray): Boolean; overload;
var
  Slots, Order: TIntegerArray;
  I: Int32;
begin
  if Self.FindItems(Items, Slots) then
  begin
    for I := 0 to High(Pattern) do
      if Slots.Find(Pattern[I]) > -1 then
        Order += Pattern[I];
  
    Result := Self.ShiftDrop(Order);
  end;
end;

var
  Inventory: TRSInventory;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Inventory.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  Inventory.Setup();

  inherited;
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Inventory.Draw(Bitmap);
end;
