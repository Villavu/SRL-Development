(*
RSClient
========
Methods relating to targeting the RS client and detecting client states.

if `SRL_DISABLE_REMOTEINPUT` is defined. RemoteInput plugin will not be loaded.
if `SRL_USE_REMOTEINPUT` is defined. RemoteInput will be automatically setup.
if `SRL_USE_REMOTEINPUT_DEBUG` is defined. Debug() calls will drawn on the RS client.
*)

{$DEFINE SRL_RSCLIENT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$IFDEF SRL_DISABLE_REMOTEINPUT}
  {$UNDEF SRL_USE_REMOTEINPUT}
  {$UNDEF SRL_USE_REMOTEINPUT_DEBUG}
{$ELSE}
  {$I remoteinput.simba}
{$ENDIF}

(*
type ERSClientMode
~~~~~~~~~~~~~~~~~~
The modes of the client.

.. pascal::

  ERSClientMode.UNKNOWN            // Unable to detect mode (likely not logged in yet)
  ERSClientMode.FIXED              // Fixed mode
  ERSClientMode.RESIZABLE_CLASSIC  // Resizable with "classic" gametabs or "fixed mode gametabs"
  ERSClientMode.RESIZABLE_MODERN   // Resizable with gametabs being grouped together at the bottom
*)
type
  ERSClientMode = (
    UNKNOWN,
    FIXED,
    RESIZABLE_CLASSIC,
    RESIZABLE_MODERN
  );

  TRSClient = record(TSRLBaseRecord)
    Mode: ERSClientMode;

    {$IFNDEF SRL_DISABLE_REMOTEINPUT}
    RemoteInput: TRemoteInput;
    {$ENDIF}
  end;

function TRSClient.Image: TMufasaBitmap;
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if RemoteInput.IsSetup() then
    Exit(RemoteInput.GetImage());
  {$ENDIF}
  
  Self.Fatal('Unable to draw on this client');
end;

(*
RSClient.DetectClientMode
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSClient.DetectClientMode(Update: Boolean): ERSClientMode;

Detects the client mode. If **Update** is True ClientModeChanged will be called.
Uses the music tab so will return RS_CLIENT_UNKNOWN when not logged in.
Are there any other cases where music tab won't be visible?
*)
function TRSClient.DetectClientMode(Update: Boolean = False): ERSClientMode;
var
  W, H: Int32;
begin
  GetClientDimensions(W, H);

  // Music tab in each mode there are different colors at W-4, H-21
  // Two colors each because tab can be active(red) or not(grey)
  case GetColor(W-4, H-21) of
    2435372, 658467: Result := ERSClientMode.FIXED;
    3555653, 922425: Result := ERSClientMode.RESIZABLE_MODERN;
    2896180, 790059: Result := ERSClientMode.RESIZABLE_CLASSIC;
  end;
  
  if Update then 
    Self.Mode := Result;
end;

(*
RSClient.ClientModeChanged
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSClient.ClientModeChanged;

Anything that needs an alert when the client mode changes should override this.
*)
procedure TRSClient.ClientModeChanged;
begin
  Self.DebugLn('Client mode changed: ' + ToString(Self.Mode));
end;

function TRSClient.IsLoggedIn: Boolean;
var
  ClientMode: ERSClientMode := Self.DetectClientMode();
begin
  if (ClientMode <> ERSClientMode.UNKNOWN) and (ClientMode <> Self.Mode) then
  begin
    Self.Mode := ClientMode;
    Self.ClientModeChanged();
  end;

  Result := ClientMode <> ERSClientMode.UNKNOWN;
end;

function TRSClient.IsLoggedIn(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if Interval = -1 then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsLoggedIn(), Interval, WaitTime);
end;

(*
RSClient.LoseFocus
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSClient.LoseFocus;

Loses focus if available. Maybe useful for antiban.
*)
procedure TRSClient.LoseFocus; overload;
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if RemoteInput.IsSetup() then
  begin
    RemoteInput.LoseFocus();
    
    Exit;
  end;
  {$ENDIF}
  
  Self.DebugLn('Lose focus not yet implemented for this target!');
end;

(*
RSClient.LoseFocus
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSClient.LoseFocus(Delay: Int32);

Waits `Delay` before losing focus.
*)
procedure TRSClient.LoseFocus(Delay: Int32); overload;
begin
  Wait(Delay);

  Self.LoseFocus();
end;

(*
RSClient.Setup
~~~~~~~~~~~~~~
.. pascal:: procedure TRSClient.Setup;

Setup method.

.. note:: This is automatically called on the **RSClient** variable.
*)
procedure TRSClient.Setup;
begin
  Self.Name := 'RSClient';

  {$IFDEF SRL_USE_REMOTEINPUT}
  Self.RemoteInput.Setup();
  {$ENDIF}

  Self.Mode := Self.DetectClientMode();
  if Self.Mode = ERSClientMode.UNKNOWN then
    Self.Mode := ERSClientMode.FIXED; // Fixed as default so we can login if needed
  
  Self.ClientModeChanged();
end;

var
  RSClient: TRSClient;
  
(*
Debug
~~~~~
.. pascal:: procedure Debug(ATPA: T2DPointArray); override;

If `SRL_USE_REMOTEINPUT_DEBUG` is defined graphical debug methods happen on the RS client.
*)
{$IFDEF SRL_USE_REMOTEINPUT_DEBUG}  
procedure Debug(ATPA: T2DPointArray); override;
var
  I: Int32;
begin
  with RSClient.Image() do
  begin
    Clear();
    for I := 0 to High(ATPA) do
      DrawTPA(ATPA[I], DEBUG_COLORS[I mod Length(DEBUG_COLORS)]);  
  end;
end;

procedure TSRL.Debug; override;
begin
  Freeze();

  try
    Self.Debug(RSClient.Image());
  finally
    Unfreeze();
  end;
end;
{$ENDIF}  

begin
  RSClient.Setup();
end;
