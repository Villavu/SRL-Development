(*
RSClient
========
Methods relating to targeting the RS client and detecting client states.
*)

{$DEFINE SRL_RSCLIENT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$IFDEF SRL_USE_REMOTEINPUT}
  {$loadlib ../plugins/libremoteinput}
{$ENDIF}

(*
type ERSClientMode
~~~~~~~~~~~~~~~~~~
The modes of the client.

.. pascal::

  RS_CLIENT_UNKNOWN            // Unable to detect mode (likely not logged in)
  RS_CLIENT_FIXED              // Fixed mode
  RS_CLIENT_RESIZABLE_CLASSIC  // Resizable with "classic" gametabs or "fixed mode gametabs"
  RS_CLIENT_RESIZABLE_BOTTOM   // Resizable with gametabs being grouped together at the bottom
*)
type
  ERSClientMode = (
    RS_CLIENT_UNKNOWN,
    RS_CLIENT_FIXED,
    RS_CLIENT_RESIZABLE_CLASSIC,
    RS_CLIENT_RESIZABLE_BOTTOM
  );

  TRSClient = record(TSRLBaseRecord)
    Mode: ERSClientMode;

    {$IFDEF SRL_USE_REMOTEINPUT}
    EIOS: Pointer;
    PID: UInt32;
    {$ENDIF}
  end;

(*
RSClient.SetupRemoteInput
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSClient.SetupRemoteInput;

If `SRL_USE_REMOTEINPUT` has been defined this method will be automatically called to setup the remote input plugin.
*)
{$IFDEF SRL_USE_REMOTEINPUT}
procedure TRSClient.SetupRemoteInput;
begin
  {$IFNDEF SIMBAHEADLESS}
  Self.PID := GetSimbaTargetPID();
  {$ENDIF}

  if Self.PID = 0 then
  begin
    if MessageDlg('SRL', 'Simba has no target. Do you want to automatically target a RS client?', mtConfirmation, [mbYes, mbNo]) then
    begin
      RIInject({$IFDEF WINDOWS}'JagexLauncher.exe'{$ELSE}'java'{$ENDIF});

      if EIOS_GetClients(True) > 0 then
        Self.PID := EIOS_GetClientPID(0);
    end;
  end else
    RIInject(Self.PID);

  Wait(500); // Allow time to injection to kick in

  if Self.PID = 0 then
    Self.Fatal('No OSRS clients found. You might need ' + {$IFDEF CPU32}'64'{$ELSE}'32'{$ENDIF} + ' bit Simba for this RS client');

  Self.EIOS := EIOS_PairClient(Self.PID);
  try
    SetEIOSTarget({$libpath ../plugins/libremoteinput}, ToString(Self.PID));
  except
    Self.Fatal('OSRS target failed');
  end;
end;
{$ENDIF}

(*
RSClient.DetectClientMode
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSClient.DetectClientMode(Update: Boolean): ERSClientMode;

Detects the client mode. If **Update** is True ClientModeChanged will be called.
Uses the music tab so will return RS_CLIENT_UNKNOWN when not logged in.
Are there any other cases where music tab won't be visible?
*)
function TRSClient.DetectClientMode(Update: Boolean = False): ERSClientMode;
var
  W, H: Int32;
begin
  GetClientDimensions(W, H);

  // Music tab in each mode there are different colors at W-4, H-21
  // Two colors each because tab can be active(red) or not(grey)
  case GetColor(W-4, H-21) of
    2435372, 658467: Result := RS_CLIENT_FIXED;
    3555653, 922425: Result := RS_CLIENT_RESIZABLE_BOTTOM;
    2896180, 790059: Result := RS_CLIENT_RESIZABLE_CLASSIC;
  end;
  if Update then Self.Mode := Result;
end;

procedure TRSClient.ClientModeChanged;
begin
  Self.Debug('Client mode changed: ' + ToString(Self.Mode));

  { override me }
end;

function TRSClient.IsLoggedIn: Boolean; overload;
var
  Test: ERSClientMode;
begin
  Test := Self.DetectClientMode();

  if (Test <> RS_CLIENT_UNKNOWN) and (Test <> Self.Mode) then
  begin
    Self.Mode := Test;
    Self.ClientModeChanged();
  end;

  Result := Test <> RS_CLIENT_UNKNOWN;
end;

function TRSClient.IsLoggedIn(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if Interval = -1 then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsLoggedIn(), Interval, WaitTime);
end;

(*
RSClient.LoseFocus
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSClient.LoseFocus;

Loses focus. Maybe useful for antiban.
*)
procedure TRSClient.LoseFocus; overload;
{$IFDEF SRL_USE_REMOTEINPUT}
var
  Space: TBoxArray;
  Temp: Double;
begin
  Space := GetClientBounds().Expand(50).Invert(GetClientBounds().Expand(1000));

  if (Length(Space) > 0) then
  begin
    Temp := Mouse.IdleInterval; // don't count this

    Mouse.IdleInterval := 0;
    Mouse.Click(Space[Random(Length(Space))], MOUSE_LEFT);
    Mouse.IdleInterval := Temp;
  end;
end;
{$ELSE}
begin
  Self.Debug('Lose focus not yet implemented for this target!');
end;
{$ENDIF}

procedure TRSClient.LoseFocus(Delay: Int32); overload;
begin
  Wait(Delay);

  Self.LoseFocus();
end;

(*
RSClient.Setup
~~~~~~~~~~~~~~
.. pascal:: procedure TRSClient.Setup;

Setup method.

.. note:: This is automatically called on the **RSClient** variable.
*)
procedure TRSClient.Setup;
begin
  Self.Name := 'RSClient';

  {$IFDEF SRL_USE_REMOTEINPUT}
  Self.SetupRemoteInput();
  {$ENDIF}

  Self.Mode := Self.DetectClientMode();
  if Self.Mode = RS_CLIENT_UNKNOWN then
    Self.Mode := RS_CLIENT_FIXED; // Fixed as default so we can login if needed
end;

var
  RSClient: TRSClient;

begin
  RSClient.Setup();
  RSClient.ClientModeChanged();
end;
