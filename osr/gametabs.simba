{$DEFINE SRL_GAMETABS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSGameTabs = type TRSInterface;

  ERSGameTab = (
    COMBAT,
    STATS,
    QUESTS,
    INVENTORY,
    EQUIPMENT,
    PRAYER,
    MAGIC,
    CLAN,
    FRIENDS,
    ACCOUNT,
    LOGOUT,
    OPTIONS,
    EMOTES,
    MUSIC,
    UNKNOWN
  );

{
function TRSGameTabs.X1: Int32; constref; override;
begin
  Result := inherited
end;
}

// Needed because depending on the client width the tabs stack into row(s)
function TRSGameTabs.Y1: Int32; override;
begin
  Result := inherited;

  if (Self.Mode = ERSClientMode.RESIZABLE_MODERN) and (RootInterface.Width >= 948) then
    Result += 36;
end;

{
function TRSGameTabs.X2: Int32; override;
begin
  Result := inherited;
end;
}

// Needed because depending on the client width the tabs stack into row(s)
function TRSGameTabs.Y2: Int32; override;
begin
  Result := inherited;

  if (Self.Mode = ERSClientMode.RESIZABLE_MODERN) and (RootInterface.Width >= 948) then
    Result += 36;
end;

function TRSGameTabs.GetTabBoxes: TBoxArray;
var
  I: Int32;
begin
  case Self.Mode of
    ERSClientMode.FIXED, ERSClientMode.RESIZABLE_CLASSIC:
      begin
        Result := Grid(7, 2, 30, 33, [3, 265], [Self.X1 + 6, Self.Y1 + 1]);
      end;

    ERSClientMode.RESIZABLE_MODERN:
      begin
        // One row
        if (RootInterface.Width >= 948) then
        begin
          Result := Grid(14, 1, 30, 33, [3, 0], [Self.X1 - 197, Self.Y2 - 70]);
          for I := Ord(ERSGameTab.MUSIC) downto Ord(ERSGameTab.FRIENDS) - 1 do
            Result[I] := Result[I-1];
        end else
        // Two rows
          Result := Grid(7, 2, 30, 33, [3, 3], [Self.X1, Self.Y2 - 70]);

        // Logout button is moved to top right corner
        Result[7] := Result[10];
        Result[10] := [RootInterface.X2 - 19, RootInterface.Y1 + 9, RootInterface.X2 - 10, RootInterface.Y1 + 18];
      end;
  end;
end;

function TRSGameTabs.GetTabBox(Tab: ERSGameTab): TBox;
begin
  Result := Self.GetTabBoxes[Tab];
end;

function TRSGameTabs.GetCurrentTab: ERSGametab;
var
  Tabs: TBoxArray;
  I: Int32;
begin
  Tabs := Self.GetTabBoxes();
  
  if (Self.Mode = ERSClientMode.RESIZABLE_MODERN) and (SRL.CountColor(8639715, Tabs[ERSGameTab.LOGOUT]) > 0) then
    Exit(ERSGameTab.LOGOUT);
  
  for I := 0 to High(Tabs) do
    if (SRL.CountColor(CTS1(1778534, 22), Tabs[I]) > 50) then
      Exit(ERSGameTab(I));
      
  Exit(ERSGameTab.UNKNOWN);
end;

function TRSGameTabs.Open(Tab: ERSGameTab): Boolean;
begin
  if GetCurrentTab() = Tab then
    Exit(True);

  for 1 to 3 do
  begin
    Mouse.Click(GetTabBox(Tab), MOUSE_LEFT, SRL.Dice(50));

    Result := WaitUntil(Self.GetCurrentTab() = Tab, SRL.TruncatedGauss(50, 2000), SRL.TruncatedGauss(2000, 3000));
    if Result then
      Exit;
  end;
end;

procedure TRSGameTabs.Draw(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Bitmap.DrawBoxes(GetTabBoxes(), False, $00FFFF);
end;

procedure TRSGameTabs.Setup; override;
begin
  inherited;
    
  Self.Name := 'GameTabs';
end;

procedure TRSGameTabs.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@RootInterface.X2, -242];
        Self.Alignment.Right := [@RootInterface.X2, -2];
        Self.Alignment.Top := [@RootInterface.Y2, -334];
        Self.Alignment.Bottom := [@RootInterface.Y2];
      end;

    ERSClientMode.RESIZABLE_CLASSIC:
      begin
        Self.Alignment.Left := [@RootInterface.X2, -240];
        Self.Alignment.Right := [@RootInterface.X2];
        Self.Alignment.Top := [@RootInterface.Y2, -334];
        Self.Alignment.Bottom := [@RootInterface.Y2];
      end;

    ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@RootInterface.X2, -230];
        Self.Alignment.Right := [@RootInterface.X2];
        Self.Alignment.Top := [@RootInterface.Y2, -346];
        Self.Alignment.Bottom := [@RootInterface.Y2];
      end;
  end;
end;

var
  GameTabs: TRSGameTabs;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  GameTabs.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  GameTabs.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  GameTabs.Draw(Bitmap);
end;

