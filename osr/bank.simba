(*
Bank
====
Methods to interact with the Bank.
*)

{$DEFINE SRL_BANK_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  BANK_DEPOSIT_ALL          = -1;
  
  BANK_WITHDRAW_ALL         = -1;
  BANK_WITHDRAW_ALL_BUT_ONE = -2;
  
type
  ERSBankLocation = (
    CASTLE_WARS,
    FEROX,
    GRAND_EXCHANGE,
    FALADOR_EAST
  );
  
  // In order FindButtons returns
  ERSBankButton = (
    WORN,
    MENU,
    SWAP,
    INSERT,
    ITEM,
    NOTE,
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL,
    PLACEHOLDERS,
    SEARCH,
    DEPOSIT_INVENTORY,
    DEPOSIT_WORN   
  ); 

  TRSBankWithdrawItem = record
    Item: TRSItem;
    Quantity: Int32;
    Noted: Boolean;
  end;
  
  TRSBankWithdrawSlot = record
    Slot: Int32;
    Quantity: Int32;
    Noted: Boolean;
  end;
  
  TRSBankDepositItem = record
    Item: TRSItem;
    Quantity: Int32;
  end;
  
  TRSBankDepositSlot = record
    Slot: Int32;
    Quantity: Int32;
  end;
  
  TRSBank = record(TRSTitledInteface)
    FINDER_UPTEXT: TStringArray;
    FINDER_OPTION: TStringArray;
  end;

function TRSBank.GetSlotBoxes(): TBoxArray; 
begin
  Result := Grid(8, (Self.Height() - 135) div 35, 31, 31, [17, 5], [Self.X1 + 57, Self.Y1 + 77]);
end;


function TRSBank.GetTabBoxes(): TBoxArray;
begin
  Result := Grid(10, 1, 36, 30, [4, 0], [Self.X1 + 46, Self.Y1 + 42]);
end;

function TRSBank.GetTabBox(Tab: Int32): TBox;
var
  Tabs: TBoxArray := Self.GetTabBoxes();
begin
  if (Tab >= 0) and (Tab <= Length(Tabs)) then
    Result := Tabs[Tab];
end;


function TRSBank.GetIncinerator(): TBox;
begin
  Result := Self.Bounds();
  Result.X1 += 5;
  Result.Y1 := Result.Y2 - 113;
  Result.X2 := Result.X1 + 51;
  Result.Y2 -= 44;
end;

function TRSBank.HasIncinerator(): Boolean;
var
  b: TBox;
begin
  b := Self.GetIncinerator();
  b.Y1 += 55;
  Result := SRL.CountColor(CTS2(6842995, 32, 0.10, 0.11), b) > 0;
end;

function TRSBank.InceneratorTooltipVisible(): Boolean;
var
  b: TBox;
begin
  b := Self.Bounds();
  b.X1 += 5;
  b.Y1 := b.Y2 - 113;
  b.X2 := b.X1 + 51;
  b.Y2 -= 44;

  Result := SRL.CountColor(10551295, b) > 0;
end;

function TRSBank.UnHoverIncinerator(): Boolean;
var
  b: TBox;
  p: TPoint;
begin
  b := Self.GetIncinerator();
  if not b.Contains(Mouse.Position) then
    Exit(True);

  repeat
    p := SRL.RandomPoint(Self.Bounds());
  until not b.Contains(p);

  Mouse.Move(p);
  Result := WaitUntil(not Self.InceneratorTooltipVisible(), 100, 1000);
end;


function TRSBank.GetButtons(): TRSButtonArray;
begin
  if Self.UnHoverIncinerator() then
    Result := FindButtons([[48,20], [23,20], [34,34], [23,23]]);
end;

function TRSBank.GetButton(button: ERSBankButton): TRSButton;
begin
  Result := Self.GetButtons()[button];
end;

(*
Bank.IsOpen
~~~~~~~~~~~
.. pascal:: function TRSBank.IsOpen(waitForItems: Boolean = True): Boolean;

Returns true if the Bank is visible.

**waitForItems** determines if the method waits up to one second for item to appears.
There can be a small delay before items are visible.
*)
function TRSBank.IsOpen(waitForItems: Boolean = True): Boolean; overload;
var
  b: TBox;
  count1, count2: Int32;
begin
  b := Self.Bounds();
  b.Y1 := b.Y2 - 39;
  b.X1 += 240;
  b.X2 -= 155;
  b.Y2 -= 25;

  count1 := SRL.CountColor(0, b);
  count2 := SRL.CountColor(2070783, b);

  Result := ((count1 = 94) and (count2 = 116)) or Self.IsTitle('Bank') or Self.IsTitle('Equip');

  if Result and waitForItems then
  begin
    b := Self.GetSlotBoxes().Merge();
    WaitUntil(SRL.CountColor(RS_ITEM_BORDER, b) > 0, 50, 1000);
  end;
end;

function TRSBank.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
begin
  if (interval = -1) then
    interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), interval, waitTime);
end;

(*
Bank.Close
~~~~~~~~~~
.. pascal:: function TRSBank.Close(PressEscape: Boolean = False): Boolean;

Closes the bank, Depending on `PressEscape` the function will either click the button
or press backspace.

Example
-------

 WriteLn Bank.Close();
*)
function TRSBank.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen(False) then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(False), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

procedure TRSBank.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited;

  Bitmap.DrawButtons(Self.GetButtons());
  Bitmap.DrawBoxes(Self.GetTabBoxes(), $00FFFF);
  Bitmap.DrawBoxes(Self.GetSlotBoxes(), $00FFFF);
end;

(*
Bank.Setup
~~~~~~~~~~
.. pascal:: procedure Bank.Setup;

Initializes Bank variables.

.. note:: This is automatically called on the **Bank** variable.
*)
procedure TRSBank.Setup; override;
begin
  inherited;
    
  Self.Name := 'Bank';

  Self.FINDER_UPTEXT := ['Use Bank', 'Bank chest', 'Bank Bank', 'Bank booth', 'Banker'];
  Self.FINDER_OPTION := ['Use Bank', 'Bank Bank'];
end;

procedure TRSBank.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -1];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;
  end;
end;



//should look for the query instead of interface title. Check the comment below for more info.
function TRSBank.IsSearchOpen(WaitTime: Int32 = 0): Boolean;
begin
  Result := Chat.FindQuery('Show items', WaitTime);
end;

//Click instead of enable becuse the button can be enabled without search being "open".
//if you search an item and press enter the button stays enabled while the query is closed.
function TRSBank.OpenSearch(WaitTime: Int32 = 0): Boolean;
begin
  Result := Self.GetButton(ERSBankButton.SEARCH).Click() and Self.IsSearchOpen(WaitTime);
end;

function TRSBank.ClearSearch: Boolean;
begin
  Result := not Self.IsTitle('Showing items:') or Self.GetButton(ERSBankButton.SEARCH).Click();
end;

(*
Bank.Search
~~~~~~~~~~~
.. pascal:: function TRSBank.Search(Item: String): Boolean;

Searches for an item.

Example
-------

  Bank.Search('logs'); // Search for logs
*)
function TRSBank.Search(Item: String): Boolean; 
begin
  if Self.IsTitle('Showing items: ' + LowerCase(Item)) then
    Exit(True);

  Result := Self.ClearSearch() and
            Self.OpenSearch(Random(2000, 2500)) and
            Chat.AnswerQuery('Show items', Item, Random(2000, 2500)) and
            Self.IsTitle('Showing items: ' + LowerCase(Item), Random(2000, 2500));
end;

(*
Bank.CloseSearch
~~~~~~~~~~~~~~~~
.. pascal:: function TRSBank.CloseSearch: Boolean;

Closes the bank search if it's open.

Example
-------
  
  Bank.Search('logs'); // Search for logs
  Wait(1000);
  Bank.CloseSearch();
*)
function TRSBank.CloseSearch: Boolean;
begin
  Result := Self.ClearSearch() and
            Chat.AnswerQuery('Show items', '', Random(2000, 2500));
end;

(*
Bank.FindItemBoundaries
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBank.FindItemBoundaries: TBoxArray;

Finds item boundaries. This is an internal function used to retrieve the boxes we
search for items in.

Example
-------
  
  Boxes := Self.FindItemBoundaries();
  WriteLn ItemFinder.Find(Item, Boxes);
*)
function TRSBank.FindItemBoundaries: TBoxArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Area, B: TBox;
begin
  Area := Self.GetSlotBoxes().Merge();
  
  if SRL.FindColors(TPA, RS_ITEM_BORDER, Area) > 0 then
  begin
    ATPA := TPA.Cluster(50, 3);
    
    for B in ATPA.ToTBA() do
    begin
      if B.Height() <= 5 then
        Continue;
        
      Result += Grid(8, 1, 32, B.Height(), [16], [Area.X1, B.Y1 - 1]);
    end;
  end;
end;

(*
Bank.Open
~~~~~~~~~
.. pascal:: function TRSBank.Open(P: TPoint): Boolean;

Function to open a bank at a specified **P** TPoint.
This function will move the mouse to **P** and if the uptext matches the bank or a banker uptext it will open the bank.

Example
-------
  
  P := CustomBankFinderFunction();
  Bank.Open(P);
*)
function TRSBank.Open(P: TPoint): Boolean;
begin
  Mouse.Move(P);

  Result := ChooseOption.IsOpen() and ChooseOption.Select(Self.FINDER_OPTION);

  if not Result then
  begin
    if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    begin
      if ('Banker' in MainScreen.GetUpText()) or SRL.Dice(10) then
        Result := ChooseOption.Select(Self.FINDER_OPTION)
      else
      begin
        Mouse.Click(MOUSE_LEFT);

        Result := MainScreen.DidRedClick();
      end;
    end;
  end;

  if Result then
  begin
    if Minimap.HasFlag(Random(200, 400)) then
      Minimap.WaitFlag();

    Result := Self.IsOpen(Random(3000, 4000));
  end;
end;

function TRSBank._FindFaladorEast: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.Colors += CTS2(4086642, 5, 0.08, 0.55);
  Finder.ClusterDistance := 15;
  Finder.Erode := 2;
  Finder.Grow := 3;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;

  Result.SortByLongSide();
  Result := Result[0].Cluster(5);
  Result.SortByMiddle(Result.Merge.Mean());
end;

function TRSBank._FindCastleWars: T2DPointArray;
var
  TPA, ChestTPA: TPointArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  if SRL.FindColors(TPA, CTS2(5526875, 35, 0.19, 0.06), MainScreen.Bounds) > 0 then
  begin
    ATPA := TPA.Cluster(1);

    for I := 0 to High(ATPA) do
      if SRL.FindColors(TPA, CTS2(2503237, 40, 0.10, 0.14), ATPA[I].Bounds) > 5 then
      begin
        TPA := ATPA[I].MinAreaRect.Filter(TPA);
        TPA := TPA.Erode(MainScreen.NormalizeDistance(3));
        if Length(TPA) > 0 then
          ChestTPA += TPA;
      end;

    Result := ChestTPA.Cluster(2);
  end;
end;

function TRSBank._FindFerox: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.Colors += CTS2(931652, 12, 0.07, 0.89);
  Finder.ClusterDistance := 1;
  Finder.Erode := 1;

  Result := MainScreen.FindObject(Finder);
end;

function TRSBank._FindWintertodt: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.ColorClusters += [
    CTS2(3289384, 4, 0.51, 0.37),  //Dark hole
    CTS2(13025214, 17, 0.13, 0.11), //Snow color
    10
  ];

  Finder.ClusterDistance := 2;
  Finder.Grow := 3;
  Finder.Erode := 2;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;
  Result.SortByLongSide();
  Result := Result[0].Cluster(3);
  Result.SortByMiddle(Result.Merge.Mean());
end;

(*
Bank._SimplifyItemName
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBank._SimplifyItemName(Item: TRSItem): String;

Internal function to get a human like search term for an item.
This could be improved for better antiban but I decided to keep it simple since it's not used very frequently.
This basically strips the item name from things humans won't usually type when searching, like brackets. It also makes the string lower case because people searching don't usually care about casing.
Once that's done wee crop some characters from the final string, because humans don't usually search the full item name, but just enough until it's seen on screen.

.. note:: Could be improved to in the future for only using the relevant part of the string. For example, an human searching for 'Amulet of glory(6)' would probably search for 'glory' instead of 'amulet of gl'.

Example
-------
  
  WriteLn Bank._SimplifyItemName('Amulet of glory(6)');
*)
function TRSBank._SimplifyItemName(Item: TRSItem): String;
var
  ItemStr: String := ToStr(Item);
  MaxLength, MinLength: Int32;
begin
  ItemStr := ItemStr.Before('(');
  ItemStr := ItemStr.Lower;
  MaxLength := ItemStr.Len;
  MinLength := MaxLength - Round(MaxLength/3);

  Result := Copy(ItemStr, 0, Random(MinLength, MaxLength));
end;

(*
Bank.FindItemTab
~~~~~~~~~~~~~~~~
.. pascal:: function TRSBank.FindItemTab(Item: TRSItem; OpenTab: Boolean = True): Int32;

Find the bank tab of an item just by knowing it's name.
This is very useful when you want to support people having items in any tab they want without much hassle for people to setup.
By default it will open the banktab if the item is found. This can be changed by setting **OpenTab** to false.
The result will be the BankTab of the item. **-1** means we didn't find a BankTab.

.. note:: A known limitation of this is that if several items match the sprite of the item (for example multiple charged jewlry) the tab retrieved will be the first one found. If you have 'Games necklace(1)' in tab 1 and 'Games necklace(8)' in tab 5 and search for the latter, you will get tab 1.

Example
-------
  
  WriteLn Bank.FindItemTab('Molten glass');
*)
function TRSBank.FindItemTab(Item: TRSItem; OpenTab: Boolean = True): Int32;
var
  Box, SearchBox: TBox;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  TabsText: T2DPointArray;
begin
  if Self.FindItem(Item, Box) then
  begin
    if not Self.GetButton(ERSBankButton.SEARCH).Enabled then //if we found the item and we are not searching anything return the current tab.
      Exit(Self.GetCurrentTab())
    else
    begin
      Self.OpenSearch(600); //if we found the item and we are searching something, it's better to clear the search and start from scratch.
      Self.CloseSearch;
    end;
  end;

  //Attempt to search the "simplified item name" with Bank._SimplifyItemName(). Then try to find the item again. 
  if not Self.Search(Self._SimplifyItemName(Item)) or not Self.FindItem(Item, Box) then 
    Exit(-1); //If either of this things fails we exit with -1.
  //This is because if either fails something is wrong bank is not open or we don't have the item.  
    
    
  //Here is where the interesting stuff starts. We are going to look for the BankTab text on the left side that shows up when you search for an item.
  //In particular, we are interested in the BankTab text that is right above the item we found.  
    
  SearchBox := [Self.X1 + 56, Self.Y1 + 77, Self.X1 + 84, Box.Y1]; //First we restrict the search box. SearchBox.Y2 will be Box.Y1 because we are not interested in anything below the item.
                                                                   //We also set X1, Y1, X2 to known values that will make the search box smaller based on the Bank.Bounds.
  
  //Now we search for both tab text colors. The tab text is light yellow and whiteish when you hover it. 
  if SRL.FindColors(TPA, CTS0(10672356, 0), SearchBox) > 0 then 
    TabsText += TPA;
  if SRL.FindColors(TPA, CTS0(16777215, 0), SearchBox) > 0 then 
    TabsText += TPA;

  if TabsText = [] then //if we can see the item at this point and there's no tab text, it's in tab0
  begin                 //this is because tab0 is the only tab that doesn't have text.
    if OpenTab then     
      Self.OpenTab(0);
    Exit(0);
  end;

  TPA := TabsText.Merge;  //we merge the tab text.
  ATPA := TPA.Cluster(6); //and then we cluster it so we have a TPA of each tab text separated from each other.
  
  //filter out anything that does not fit the size of the tab text.
  ATPA.FilterDimensions(24, 8, 26, 8);

  if ATPA = [] then Exit(-1); //At this point, if everything got filtered something must have gone wrong and we didn't find a tab. I don't think this ever happens.

  ATPA.SortByY(False); //Sort the tabs text from bottom to top. This is because we are only interested in the very first above the item.

  
  ATPA := ATPA[0].Cluster(1); //Now we make clusters of that single tab text. This will separate the text from the number.
  ATPA.SortByX(False);        //Sort the tab text from right to left because now we are only interested in the number which is to the right.
  TPA := ATPA[0];
  
  //Now we run OCR on the number TPA to find out what number is it and set our result
  Result := OCR.RecognizeNumber(TPA.Bounds, TOCRColorRule.Create([10672356]), RS_FONT_PLAIN_11);
  if Result = 0 then
    Result := OCR.RecognizeNumber(TPA.Bounds, TOCRColorRule.Create([16777215]), RS_FONT_PLAIN_11);

  if (Result > 0) and OpenTab then
    Self.OpenTab(Result);
end;


function TRSBank.Open(Location: ERSBankLocation): Boolean; overload;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if Self.IsOpen() or Self.Open(Mouse.Position()) then
    Exit(True);
    
  case Location of
    ERSBankLocation.FALADOR_EAST:   ATPA := Self._FindFaladorEast();
    ERSBankLocation.CASTLE_WARS:    ATPA := Self._FindCastleWars();
    ERSBankLocation.FEROX:          ATPA := Self._FindFerox();
  end;

  ATPA.SortBySize();
  if Length(ATPA) > 3 then
    SetLength(ATPA, 3);

  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);

    if Self.Open(P) then
      Exit(True);
  end;
end;

function TRSBank.Hover(Location: ERSBankLocation; HoverOption: Boolean): Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if ChooseOption.IsOpen() or MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    Exit(True);

  case Location of
    ERSBankLocation.FALADOR_EAST:   ATPA := Self._FindFaladorEast();
    ERSBankLocation.CASTLE_WARS:    ATPA := Self._FindCastleWars();
    ERSBankLocation.FEROX:          ATPA := Self._FindFerox();
  end;

  ATPA.SortBySize();
  if Length(ATPA) > 3 then
    SetLength(ATPA, 3);

  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);

    Mouse.Move(P);
    if MainScreen.IsUpText(Self.FINDER_UPTEXT) then
    begin
      if HoverOption then
        ChooseOption.Hover(['Use Bank', 'Bank Bank']);

      Exit(True);
    end;
  end;
end;


function TRSBank.IsCustomQuantity(Quantity: Int32): Boolean;
begin
  Result := not (Quantity in [1,5,10,BANK_DEPOSIT_ALL]);
end;

function TRSBank.DepositHelper(B: TBox; Amount: Int32; UseQuantityButtons: Boolean): Boolean; 
var
  Button: TRSButton;
begin
  if UseQuantityButtons then
  begin
    if Self.IsCustomQuantity(Amount) then
    begin
      Button := Self.GetButton(ERSBankButton.QUANTITY_CUSTOM);
      
      if Button.Enable() then
      begin
        Mouse.Move(B);
      
        if MainScreen.IsUpText('Deposit-' + ToString(Amount)) then
        begin
          Mouse.Click(MOUSE_LEFT);
          
          Result := True;
        end else
          Result := ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Button := Self.GetButton(ERSBankButton.QUANTITY_1);  
        5:  Button := Self.GetButton(ERSBankButton.QUANTITY_5);  
        10: Button := Self.GetButton(ERSBankButton.QUANTITY_10);  
        else 
            Button := Self.GetButton(ERSBankButton.QUANTITY_ALL)
      end;

      if Button.Enable() then
      begin
        Result := True; 
        
        Mouse.Click(B, MOUSE_LEFT);
      end;
    end;
  end else
  begin
    Mouse.Move(B);

    if (Amount = BANK_DEPOSIT_ALL) then
      Result := ChooseOption.Select('Deposit-All')
    else
      Result := ChooseOption.Select('Deposit-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
  end;
end;  
  
function TRSBank.WithdrawHelper(B: TBox; Amount: Int32; Noted: Boolean; UseQuantityButtons: Boolean): Boolean;
var
  Button: TRSButton;
begin
  if Noted then
    Button := Self.GetButton(ERSBankButton.NOTE)
  else
    Button := Self.GetButton(ERSBankButton.ITEM);  
 
  if not Button.Enable() then
    Exit;

  if UseQuantityButtons then
  begin
    if Self.IsCustomQuantity(Amount) then
    begin
      Button := Self.GetButton(ERSBankButton.QUANTITY_CUSTOM);
      
      if Button.Enable() then
      begin
        Mouse.Move(B);
      
        if MainScreen.IsUpText('Withdraw-' + ToString(Amount)) then
        begin
          Mouse.Click(MOUSE_LEFT);
          
          Result := True;
        end else
          Result := ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Button := Self.GetButton(ERSBankButton.QUANTITY_1);  
        5:  Button := Self.GetButton(ERSBankButton.QUANTITY_5);  
        10: Button := Self.GetButton(ERSBankButton.QUANTITY_10);  
        else 
            Button := Self.GetButton(ERSBankButton.QUANTITY_ALL)
      end;

      if Button.Enable() then
      begin
        Result := True; 
        
        Mouse.Click(B, MOUSE_LEFT);
      end;
    end;
  end else
  begin
    Mouse.Move(B);

    case Amount of
      BANK_WITHDRAW_ALL:
        Result := ChooseOption.Select('Withdraw-All');
      BANK_WITHDRAW_ALL_BUT_ONE:
        Result := ChooseOption.Select('Withdraw-All-but-1');
      else
        Result := ChooseOption.Select('Withdraw-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                  ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
    end;
  end;
end;


(*
Bank.CountTabs
~~~~~~~~~~~
.. pascal:: function TRSBank.CountTabs: Int32;

Counts the existing bank tabs.

Example
-------

  WriteLn Bank.CountTabs;
*)
function TRSBank.CountTabs: Int32;
var
  i: Integer;
  TPA: TPointArray;
begin
  Result := 0;

  for i := 9 downto 1 do
    if SRL.FindColors(TPA, CTS0(65536), Self.GetTabBox(i)) > 0 then
      Exit(i);
end;

(*
Bank.GetCurrentTab
~~~~~~~~~~~
.. pascal:: function TRSBank.GetCurrentTab: Int32;

Get the current active bank tab.

Example
-------

  WriteLn Bank.GetCurrentTab;
*)
function TRSBank.GetCurrentTab: Int32;
var
  Tabs: TBoxArray := Self.GetTabBoxes;
  Tab: TBox;
  i: Int32;
begin
  for i := 0 to High(Tabs) do
  begin
    Tab := Tabs[i];
    Tab.Y2 +=1;
    if SRL.CountColor(CTS1(5334129, 0), Tab) = 0 then
      Exit(i);
  end;
end;

(*
Bank.OpenTab
~~~~~~~~~~~
.. pascal:: function TRSBank.OpenTab(Tab: Int32): Boolean;

Open the specified bank tab.

Example
-------

  Bank.OpenTab(0);
*)
function TRSBank.OpenTab(Tab: Int32): Boolean;
var
  TabBox: TBox;
begin
  if not Self.IsOpen then
    Exit;

  if Tab = Self.GetCurrentTab then
    Exit(True);

  TabBox := Self.GetTabBox(Tab);
  if TabBox <> [] then
  begin
    Mouse.Click(TabBox, MOUSE_LEFT);
    Result := WaitUntil((Tab = Self.GetCurrentTab), 100, 2000);
  end;
end;


function TRSBank.FindItem(Item: TRSItem; out Bounds: TBox): Boolean;
var
  Boxes: TBoxArray;
  Indices: TIntegerArray;
begin
  if not Self.IsOpen() then
    Exit;

  Boxes := Self.FindItemBoundaries();
  Indices := ItemFinder.Find(Item, Boxes, 1);
  if Result := Indices <> [] then
    Bounds := Boxes[Indices[0]];
end;

function TRSBank.ContainsItem(Item: TRSItem): Boolean;
var
  B: TBox;
begin
  Result := Self.FindItem(Item, B);
end;

function TRSBank.FindItem(Item: TRSItem): Boolean; overload; deprecated 'Use TRSBank.ContainsItem() instead.';
var
  B: TBox;
begin
  Result := Self.FindItem(Item, B);
end;


function TRSBank.CountItem(Item: TRSItem): Int32;
begin
  if not Self.IsOpen() then
    Exit;

  Result := Length(ItemFinder.Find(Item, Self.FindItemBoundaries()));
end;

function TRSBank.CountItemStack(Item: TRSItem): Int32;
var
  B: TBox;
begin
  Result := -1;
  if Self.FindItem(Item, B) then
    Result := SRL.GetItemAmount(B);
end;

function TRSBank.MouseItem(Item: TRSItem): Boolean;
var
  B: TBox;
begin
  Result := Self.FindItem(Item, B);
  if Result then
    Mouse.Move(B);
end;

function TRSBank.ClickItem(Item: TRSItem; Option: String = ''): Boolean;
begin
  if Self.MouseItem(Item) then
  begin
    if Option <> '' then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);
      
      Result := True;
    end;
  end;
end;

(*
Bank.WithdrawItem
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSBank.WithdrawItem(Item: TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean;

Finds and withdraws an item.

Parameters
----------

Item
	TRSBankWithdrawItem variable to withdraw.

UseQuantityButtons  
  Determines if to use the 1,5,10,X,ALL `Quantity` buttons.

Example
-------

  var
    ItemToWithdraw: TRSBankWithdrawItem;
    
  ItemToWithdraw.Item := 'Iron full helm'; 
  ItemToWithdraw.Quantity := 5;
  ItemToWithdraw.Noted := False;  
  
  Bank.WithdrawItem(ItemToWithdraw, True);  
  
  // OR you can shorthand by passing an open array.
  
  Bank.WithdrawItem(['Iron full helm', 5, False], True);  
*)
function TRSBank.WithdrawItem(Item: TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean; 
var
  B: TBox;
begin
  if Self.FindItem(Item.Item, B) then
    Result := Self.WithdrawHelper(B, Item.Quantity, Item.Noted, UseQuantityButtons); 
end;

function TRSBank.WithdrawSlot(Item: TRSBankWithdrawSlot; UseQuantityButtons: Boolean): Boolean;
begin
  Result := Self.WithdrawHelper(Self.GetSlotBoxes()[Item.Slot], Item.Quantity, Item.Noted, UseQuantityButtons);
end;

function TRSBank.DepositItem(Item: TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean;
var
  Slot: Int32;
begin
  if Inventory.FindItem(Item.Item, Slot) then
    Result := Self.DepositHelper(Inventory.GetSlotBox(Slot), Item.Quantity, UseQuantityButtons);
end;

function TRSBank.DepositSlot(Item: TRSBankDepositSlot; UseQuantityButtons: Boolean): Boolean; 
begin
  Result := Self.DepositHelper(Inventory.GetSlotBox(Item.Slot), Item.Quantity, UseQuantityButtons);
end;

(*
Bank.DepositAll
~~~~~~~~~~~~~~~
.. pascal:: function TRSBank.DepositAll: Boolean;

Depositis your inventory by clicking the deposit inventory button
*)
function TRSBank.DepositAll: Boolean;
begin
  Result := (Inventory.Count() = 0) or Self.GetButton(ERSBankButton.DEPOSIT_INVENTORY).Click();
end;

(*
var Bank
~~~~~~~~
  Global Bank variable.
*)
var
  Bank: TRSBank;

(*
GameTabs.Open
~~~~~~~~~~~~~
.. pascal:: function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;

Overrides **GameTabs.Open** to close the bank if the bank open.
*)
function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
begin
  if Bank.IsOpen(False) then
  begin
    if (Tab = ERSGameTab.INVENTORY) then
      Exit(True);

    Bank.Close();
  end;

  Result := inherited();
end;



procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Bank.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Bank.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Bank.Draw(Bitmap);
end;
