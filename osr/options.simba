{$DEFINE SRL_OPTIONS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSOptionsTab = (
    CONTROLS,
    AUDIO,
    DISPLAY
  );

  ERSOptionsButton = (
    AID,
    RUN,
    HOUSE,
    BOND
  );

  ERSHouseOptionsButton = (
    CLOSE,
    VIEWER,
    EXPEL,
    SERVANT,
    LEAVE
  );

  TRSOptions = type TRSInterface;
  
procedure TRSOptions.Setup; override;
begin
  inherited;

  Self.Name := 'Options';
  Self.ButtonColors += CTS1(2369440, 5);
end;

procedure TRSOptions.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSOptions.GetBrightnessSliderBounds: TBox;
begin
  Result.X1 := Self.X1 + 57;
  Result.Y1 := Self.Y1 + 72;
  Result.X2 := Result.X1 + 96;
  Result.Y2 := Result.Y1 + 9;
end;

function TRSOptions.GetZoomSliderBounds: TBox;
begin
  Result.X1 := Self.X1 + 57;
  Result.Y1 := Self.Y1 + 109;
  Result.X2 := Result.X1 + 96;
  Result.Y2 := Result.Y1 + 9;
end;

function TRSOptions.GetSliderLevel(SliderBounds: TBox; SliderColor: Integer): Integer;
var
  TPA: TPointArray;
begin
  Result := -1;
  if Self.Open() and Self.OpenTab(ERSOptionsTab.DISPLAY) then
  begin
    if SRL.FindColors(TPA, SliderColor, SliderBounds.Expand(10)) > 0 then
      Result := Round((TPA.Mean.X - SliderBounds.X1) * 100 / (SliderBounds.Width() - 1));
  end;
end;

function TRSOptions.GetZoomLevel: Integer;
begin
  Result := Self.GetSliderLevel(Self.GetZoomSliderBounds(), 2106152);
end;

function TRSOptions.SetZoomLevel(Level: Integer): Boolean;
var
  CurrentLevel: Integer;
  SliderBounds: TBox;
begin
  CurrentLevel := Self.GetZoomLevel();
  if (CurrentLevel = Level) then
    Exit(True);
    
  // Move slider away so we can click the level
  if (Abs(CurrentLevel - Level) <= 20) then
  begin
    if (CurrentLevel + 40 < 100) then
      Self.SetZoomLevel(CurrentLevel + Random(20, 40))
    else
      Self.SetZoomLevel(CurrentLevel - Random(20, 40));
  end;
  
  SliderBounds := Self.GetZoomSliderBounds();
  Mouse.Click(
    SliderBounds.X1 + Round((Level * (SliderBounds.Width() - 1) / 100)) + 1,
    SliderBounds.Y1 + Random(SliderBounds.Y2 - SliderBounds.Y1),
    MOUSE_LEFT
  );

  Result := WaitUntil(Self.GetZoomLevel() = Level, SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.GetBrightnessLevel: Integer;
begin
  Result := Self.GetSliderLevel(Self.GetBrightnessSliderBounds(), 2040359);
end;

function TRSOptions.SetMaxBrightness: Boolean;
begin
  if Result := Self.OpenTab(ERSOptionsTab.DISPLAY) then
    with Self.GetBrightnessSliderBounds() do
      Mouse.Click(X2 + Random(3, 5), Random(Y1, Y2), MOUSE_LEFT); 
end;

function TRSOptions.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab = ERSGameTab.OPTIONS);
end;

function TRSOptions.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.OPTIONS);
end;

function TRSOptions.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[38,38]]);
end;

function TRSOptions.GetButton(Button: ERSOptionsButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons;
begin
  if Length(Buttons) = Length(ERSOptionsButton) then
    Result := Buttons[Button];
end;

function TRSOptions.GetHouseOptionsButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[21, 21], [103, 38], [164, 30]]);
end;

function TRSOptions.GetHouseOptionsButton(Button: ERSHouseOptionsButton): TRSButton;
var
  Buttons: TRSButtonArray;
begin
  Buttons := Self.GetHouseOptionsButtons;
  if High(Buttons) = Ord(High(ERSHouseOptionsButton)) then
    Result := Buttons[Button];
end;

function TRSOptions.IsHouseOptionsOpen: Boolean;
begin
  Result := Self.GetHouseOptionsButton(ERSHouseOptionsButton.CLOSE).Visible;
end;

function TRSOptions.OpenHouseOptions: Boolean;
begin
  if Self.IsHouseOptionsOpen then
    Exit(True);

  if not Self.Open or not Self.OpenTab(ERSOptionsTab.CONTROLS) then
    Exit(False);

  Self.GetButton(ERSOptionsButton.HOUSE).Click;

  Result := WaitUntil(Self.IsHouseOptionsOpen, SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.CloseHouseOptions: Boolean;
begin
  if not Self.IsHouseOptionsOpen then
    Exit(True);

  Self.GetHouseOptionsButton(ERSHouseOptionsButton.CLOSE).Click;

  Result := WaitUntil(not Self.IsHouseOptionsOpen, SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.GetTabs: TBoxArray;
begin
  Result := Grid(3, 1, 55, 24, [9], [Self.X1, Self.Y1 + 5]);
end;

function TRSOptions.GetCurrentTab: ERSOptionsTab;
var
  Tabs: TBoxArray;
  I: Int32;
begin
  Tabs := Self.GetTabs;

  for I := 0 to High(Tabs) do
  begin
    if SRL.CountColor(4741213, Tabs[I]) < 50 then //finds the one without the bottom white line
      Exit(ERSOptionsTab(I));
  end
end;

function TRSOptions.OpenTab(Tab: ERSOptionsTab): Boolean;
begin
  if not Self.Open or not Self.CloseHouseOptions then
    Exit(False);
  if Self.GetCurrentTab = Tab then
    Exit(True);

  Mouse.Click(Self.GetTabs[Tab], MOUSE_LEFT);

  Result := WaitUntil(Self.GetCurrentTab = Tab, SRL.TruncatedGauss(50, 1500), 3000);
end;

procedure TRSOptions.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited;

  if Self.IsHouseOptionsOpen then
    Bitmap.DrawButtons(Self.GetHouseOptionsButtons)
  else
  begin
    Bitmap.DrawBoxes(Self.GetTabs, $00FFFF);
    if (Self.GetCurrentTab = ERSOptionsTab.DISPLAY) then
    begin
      Bitmap.DrawBox(Self.GetBrightnessSliderBounds(), $00FFFF);
      Bitmap.DrawBox(Self.GetZoomSliderBounds(), $00FFFF);
    end;
  end;

  Bitmap.DrawButtons(Self.GetButtons);
end;

var
  Options: TRSOptions;

function TRSGameTabs.GetCurrentTab: ERSGameTab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and Options.IsHouseOptionsOpen then
    Result := ERSGameTab.OPTIONS;
end;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Options.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Options.Setup;
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Options.Draw(Bitmap);
end;

