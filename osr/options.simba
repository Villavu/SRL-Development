{$DEFINE SRL_OPTIONS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}
  
type 
  ERSOptionsTab = (
    CONTROLS, 
    AUDIO, 
    DISPLAY
  );
  
  ERSOptionsButton = (
    AID,
    RUN,
    HOUSE,
    BOND
  );
  
  ERSHouseOptionsButton = (
    CLOSE, 
    EXPEL, 
    SERVANT, 
    LEAVE
  ); 

  TRSOptions = type TRSInterface;

procedure TRSOptions.Setup; override;
begin
  inherited;  
    
  Self.Name := 'Options';
end;

procedure TRSOptions.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSOptions.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.OPTIONS);
end;

function TRSOptions.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.OPTIONS);
end;

function TRSOptions.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[38,38]]);
end;

function TRSOptions.GetButton(Button: ERSOptionsButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if Length(Buttons) = Length(ERSOptionsButton) then
    Result := Buttons[Button];
end;

function TRSOptions.FindHouseOptionsButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[21, 21], [164, 30]]);
end;

function TRSOptions.GetHouseOptionsButton(Button: ERSHouseOptionsButton): TRSButton;
var
  Buttons: TRSButtonArray;
begin
  Buttons := Self.FindHouseOptionsButtons();
  if High(Buttons) = Ord(High(ERSHouseOptionsButton)) then 
    Result := Buttons[Button];
end;

function TRSOptions.IsHouseOptionsOpen: Boolean;
begin
  Result := Self.GetHouseOptionsButton(ERSHouseOptionsButton.CLOSE).Visible();
end;

function TRSOptions.OpenHouseOptions: Boolean;
begin
  if Self.IsHouseOptionsOpen() then
    Exit(True);
  if (not Self.Open()) or (not Self.OpenTab(ERSOptionsTab.CONTROLS)) then
    Exit(False);

  Self.GetButton(ERSOptionsButton.HOUSE).Click();

  Result := WaitUntil(Self.IsHouseOptionsOpen(), SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.CloseHouseOptions: Boolean;
begin
  if not Self.IsHouseOptionsOpen() then
    Exit(True);

  Self.GetHouseOptionsButton(ERSHouseOptionsButton.CLOSE).Click();

  Result := WaitUntil(not Self.IsHouseOptionsOpen(), SRL.TruncatedGauss(50, 1500), 3000);
end;


function TRSOptions.GetZoomSliderBounds: TBox;
begin
  Result.X1 := Self.X1 + 57;
  Result.Y1 := Self.Y1 + 72;
  Result.X2 := Result.X1 + 96;
  Result.Y2 := Result.Y1 + 9;
end;

function TRSOptions.FindZoomSlider(var P: TPoint): Boolean;
var
  TPA: TPointArray;
begin
  Result := SRL.FindColors(TPA, CTS0(2106152), Self.GetZoomSliderBounds().Expand(10)) > 0;
  if Result then
    P := TPA.Mean();
end;

function TRSOptions.GetZoomLevel: Int32;
var
  Slider: TPoint;
  B: TBox;
begin
  Result := -1;
  
  if Self.Open() and Self.OpenTab(ERSOptionsTab.CONTROLS) then
  begin
    B := Self.GetZoomSliderBounds();
    if Self.FindZoomSlider(Slider) then
      Result := Round((Slider.X - B.X1) * 100 / (B.Width - 1))
  end;
end;

function TRSOptions.SetZoomLevel(Level: Int32): Boolean;
var
  CurrentLevel: Int32;
  Slider: TPoint;
  SliderBounds: TBox;
  Destination: TPoint;
begin
  CurrentLevel := Self.GetZoomLevel();
  if (CurrentLevel = Level) then
    Exit(True);

  SliderBounds := Self.GetZoomSliderBounds();

  if Self.FindZoomSlider(Slider) then
  begin
    Destination.X := SliderBounds.X1 + Round((Level * (SliderBounds.Width - 1) / 100)) + 1;
    Destination.Y := Random(SliderBounds.Y1, SliderBounds.Y2);

    // Move slider away so we can click on destination
    if Distance(Slider, Destination) <= 12 then
    begin
      if CurrentLevel+20 < 100 then
        Self.SetZoomLevel(CurrentLevel + Random(20,40))
      else
        Self.SetZoomLevel(CurrentLevel - Random(20,40));  
    end;

    Mouse.Click(Destination, MOUSE_LEFT);
  end;

  Result := WaitUntil(Self.GetZoomLevel() = Level, SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.GetTabs: TBoxArray;
begin
  Result := Grid(3, 1, 55, 23, [9], [Self.X1, Self.Y1 + 5]);
end;

function TRSOptions.GetCurrentTab: ERSOptionsTab;
var
  Tabs: TBoxArray;
  I: Int32;
begin 
  Tabs := GetTabs();
  
  for I := 0 to High(Tabs) do
    if SRL.CountColor(2700606, Tabs[I]) > 0 then
      Exit(ERSOptionsTab(I));
end;

function TRSOptions.OpenTab(Tab: ERSOptionsTab): Boolean;
begin
  if (not Self.Open()) or (not Self.CloseHouseOptions()) then
    Exit(False);
  if (Self.GetCurrentTab() = Tab) then
    Exit(True);
      
  Mouse.Click(Self.GetTabs()[Tab], MOUSE_LEFT); 
    
  Result := WaitUntil(Self.GetCurrentTab() = Tab, SRL.TruncatedGauss(50, 1500), 3000);
end;

procedure TRSOptions.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  if (not Self.IsHouseOptionsOpen()) and (Self.GetCurrentTab() = ERSOptionsTab.CONTROLS) then
    Bitmap.DrawBox(Self.GetZoomSliderBounds(), False, $00FFFF);

  Bitmap.DrawButtons(Self.GetButtons);
end;

var
  Options: TRSOptions;

function TRSGameTabs.GetCurrentTab: ERSGameTab; override;
begin
  Result := inherited;
  
  if (Result = ERSGameTab.UNKNOWN) and Options.IsHouseOptionsOpen() then
    Result := ERSGameTab.OPTIONS;
end;  
  
procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Options.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Options.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Options.Draw(Bitmap);
end;

