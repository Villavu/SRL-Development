{$DEFINE SRL_INTERFACE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSInterfaceAlignment = record
    Method: function: Int32 of object;
    Offset: Int32;
  end;
  
  TRSInterface = record(TSRLBaseRecord)
    Mode: ERSClientMode;
    
    ButtonColors: array of TCTS1Color;
    ButtonEnabledColors: array of TCTS1Color;
    
    Cache: record
      Enabled: Boolean;
    
      X1, Y1, X2, Y2: record
        Mode: ERSClientMode;
        ClientWidth, ClientHeight: Int32;
        Value: Int32;
      end;
    end;
    
    Alignment: record
      Left, Right, Top, Bottom: TRSInterfaceAlignment;

      Center: record
        MaxWidth: Int32;
        MaxHeight: Int32;
      end;
    end;
  end;

procedure TRSInterface.Setup; 
begin
  Self.Name := 'Unnamed';
  Self.ButtonColors := [CTS1(5334129, 2), CTS1(2303648, 1), CTS1(657930, 20)];
  Self.ButtonEnabledColors := [CTS1(2369440, 5), CTS1(2700350, 5)];
  Self.Cache.Enabled := True;
end;

procedure TRSInterface.SetupAlignment(Mode: ERSClientMode); 
begin
  Self.Mode := Mode;
end;

procedure TRSInterface.Draw(Bitmap: TMufasaBitmap);
begin
  Bitmap.DrawBox(Self.Bounds(), $00FFFF);
end;
  
function TRSInterface.X1: Int32;
var
  Left, Right, Width, Center: Single;
  ClientWidth, ClientHeight: Int32;
begin
  if Self.Cache.Enabled then
  begin
    GetClientDimensions(ClientWidth, ClientHeight);
    if (Self.Cache.X1.Mode = Self.Mode) and (Self.Cache.X1.ClientWidth = ClientWidth) and (Self.Cache.X1.ClientHeight = ClientHeight) then
      Exit(Self.Cache.X1.Value);
  end;
  
  if (@Self.Alignment.Left.Method = nil) then
    Self.Fatal('No left anchor');
    
  if (Self.Alignment.Center.MaxWidth > 0) then
  begin
    Left := Self.Alignment.Left.Method() + Self.Alignment.Left.Offset;
    Right := Self.Alignment.Right.Method() + Self.Alignment.Right.Offset;

    Width := (Right - Left);
    Center := Left + (Width / 2);

    Result := Max(
      Floor(Center - (Width / 2)),
      Floor(Center - ((Self.Alignment.Center.MaxWidth - 1) / 2))
    );
  end else
    Result := Round(Self.Alignment.Left.Method() + Self.Alignment.Left.Offset);
    
  if Self.Cache.Enabled then
    Self.Cache.X1 := [Self.Mode, ClientWidth, ClientHeight, Result];
end;

function TRSInterface.X2: Int32;
var
  Left, Right, Width, Center: Single;
  ClientWidth, ClientHeight: Int32;
begin
  if Self.Cache.Enabled then
  begin
    GetClientDimensions(ClientWidth, ClientHeight);
    if (Self.Cache.X2.Mode = Self.Mode) and (Self.Cache.X2.ClientWidth = ClientWidth) and (Self.Cache.X2.ClientHeight = ClientHeight) then
      Exit(Self.Cache.X2.Value);
  end;
    
  if (@Self.Alignment.Right.Method = nil) then
    Self.Fatal('No right anchor');
 
  if (Self.Alignment.Center.MaxWidth > 0) then
  begin
    Left := Self.Alignment.Left.Method() + Self.Alignment.Left.Offset;
    Right := Self.Alignment.Right.Method() + Self.Alignment.Right.Offset;

    Width := (Right - Left);
    Center := Left + (Width / 2);

    Result := Min(
      Floor(Center + (Width / 2)),
      Floor(Center + ((Self.Alignment.Center.MaxWidth - 1) / 2))
    );
  end else
    Result := Round(Self.Alignment.Right.Method() + Self.Alignment.Right.Offset);
  
  if Self.Cache.Enabled then  
    Self.Cache.X2 := [Self.Mode, ClientWidth, ClientHeight, Result];
end;

function TRSInterface.Y1: Int32;
var
  Top, Bottom, Height, Center: Single;
  ClientWidth, ClientHeight: Int32;
begin
  if Self.Cache.Enabled then
  begin
    GetClientDimensions(ClientWidth, ClientHeight);
    if (Self.Cache.Y1.Mode = Self.Mode) and (Self.Cache.Y1.ClientWidth = ClientWidth) and (Self.Cache.Y1.ClientHeight = ClientHeight) then
      Exit(Self.Cache.Y1.Value);
  end;
   
  if (@Self.Alignment.Top.Method = nil) then
    Self.Fatal('No top anchor');

  if (Self.Alignment.Center.MaxHeight > 0) then
  begin
    Top := Self.Alignment.Top.Method() + Self.Alignment.Top.Offset;
    Bottom := Self.Alignment.Bottom.Method() + Self.Alignment.Bottom.Offset;

    Height := (Bottom - Top);
    Center := Top + (Height / 2);

    Result := Max(
      Floor(Center - (Height / 2)),
      Floor(Center - ((Self.Alignment.Center.MaxHeight - 1) / 2))
    );
  end else
    Result := Round(Self.Alignment.Top.Method() + Self.Alignment.Top.Offset);
   
  if Self.Cache.Enabled then  
    Self.Cache.Y1 := [Self.Mode, ClientWidth, ClientHeight, Result];
end;

function TRSInterface.Y2: Int32;
var
  Top, Bottom, Height, Center: Single;
  ClientWidth, ClientHeight: Int32;
begin
  if Self.Cache.Enabled then
  begin
    GetClientDimensions(ClientWidth, ClientHeight);
    if (Self.Cache.Y2.Mode = Self.Mode) and (Self.Cache.Y2.ClientWidth = ClientWidth) and (Self.Cache.Y2.ClientHeight = ClientHeight) then
      Exit(Self.Cache.Y2.Value);
  end;
    
  if (@Self.Alignment.Bottom.Method = nil) then
    Self.Fatal('No bottom anchor');

  if (Self.Alignment.Center.MaxHeight > 0) then
  begin
    Top := Self.Alignment.Top.Method() + Self.Alignment.Top.Offset;
    Bottom := Self.Alignment.Bottom.Method() + Self.Alignment.Bottom.Offset;

    Height := (Bottom - Top);
    Center := Top + (Height / 2);

    Result := Min(
      Floor(Center + (Height / 2)),
      Floor(Center + ((Self.Alignment.Center.MaxHeight - 1) / 2))
    );
  end else
    Result := Round(Self.Alignment.Bottom.Method() + Self.Alignment.Bottom.Offset);
   
  if Self.Cache.Enabled then  
    Self.Cache.Y2 := [Self.Mode, ClientWidth, ClientHeight, Result];
end;

function TRSInterface.Bounds: TBox; 
begin
  Result := [Self.X1, Self.Y1, Self.X2, Self.Y2];
end;

function TRSInterface.Width: Int32; 
begin
  Result := Bounds.Width;
end;

function TRSInterface.Height: Int32; 
begin
  Result := Bounds.Height;
end;

function TRSInterface.Center: TPoint; 
begin
  Result := Self.Bounds().Middle;
end;

type
  TRSTitledInteface = type TRSInterface;

function TRSTitledInteface.GetTitle: String;
var
  B: TBox;
  Filter: TCompareRules;
begin
  B := Self.Bounds;
  B.X1 += 50;
  B.Y1 += 10;
  B.X2 -= 50;
  B.Y2 := B.Y1 + 15;
  B.LimitTo(Self.Bounds);

  Filter.Threshold := True;
  Filter.ThresholdAmount := 15;

  Result := OCR.Recognize(B, Filter, RS_FONT_BOLD_12);
end;

function TRSTitledInteface.IsTitle(Text: String): Boolean; overload;
begin
  Result := Text in Self.GetTitle();
end;

function TRSTitledInteface.IsTitle(Text: String; WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsTitle(Text), 100, WaitTime);
end;

type
  TRSRootInterface = type TRSInterface;

function TRSRootInterface.X1: Int32; override;
begin
  Result := 0;
end;

function TRSRootInterface.Y1: Int32; override;
begin
  Result := 0;
end;

function TRSRootInterface.X2: Int32; override;
var
  ClientWidth, ClientHeight: Int32;
begin
  GetClientDimensions(ClientWidth, ClientHeight);

  Result := ClientWidth - 1;
end;

function TRSRootInterface.Y2: Int32; override;
var
  ClientWidth, ClientHeight: Int32;
begin
  GetClientDimensions(ClientWidth, ClientHeight);

  Result := ClientHeight - 1;
end;

var
  RootInterface: TRSRootInterface;

begin
  RootInterface.Name := 'Root Interface';
  RootInterface.Alignment.Left := [@RootInterface.X1];
  RootInterface.Alignment.Top := [@RootInterface.Y1];
  RootInterface.Alignment.Right := [@RootInterface.X2];
  RootInterface.Alignment.Bottom := [@RootInterface.Y2];
end;

type
  TRSButton = record 
    EnabledColors: array of TCTS1Color;
  
    Index: Int32; 
    Bounds: TBox; 
    Middle: TPoint;
  end;
  
  TRSButtonArray = array of TRSButton;
  TRSButtonDimensions = array of record Width, Height: Int32; end;
  
function TRSInterface.FindButtons(Dimensions: TRSButtonDimensions): TRSButtonArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I, W, H: Int32;
  B: TBox;
  Color: TCTS1Color;
  Boxes: TBoxArray;
begin
  B := Self.Bounds();
  
  for Color in Self.ButtonColors do
    if SRL.FindColors(TPA, Color, B) > 0 then
      ATPA += TPA;
  
  ATPA := ATPA.Merge().Cluster(1);

  for TPA in ATPA do
  begin
    if Length(TPA) < 50 then
      Continue;
      
    B := TPA.Bounds();
    B.GetDimensions(W, H);

    for I := 0 to High(Dimensions) do
    begin
      if ((W = Dimensions[I].Width) or (Dimensions[I].Width = 0)) and
         ((H = Dimensions[I].Height) or (Dimensions[I].Height = 0)) and 
          (TPA.Frameness > 75) then
        Boxes += B;
    end;
      
    {$IFDEF SRL_DEBUG_FINDBUTTONS}        
    Writeln(W, ', ', H);
    {$ENDIF}
  end;
  
  Boxes.SortByXY(10);
  
  SetLength(Result, Length(Boxes));
  for I := 0 to High(Boxes) do
  begin
    Result[I].Index := I;
    Result[I].Bounds := Boxes[I];
    Result[I].Middle := Boxes[I].Middle;
    Result[I].EnabledColors := Self.ButtonEnabledColors;
  end;
end;

function TRSButtonArray.ToBoxes: TBoxArray; constref;
var
  I: Int32;
begin
  SetLength(Result, Length(Self));
  for I := 0 to High(Result) do
    Result[I] := Self[I].Bounds;
end;

function TRSButton.Visible: Boolean; constref;
begin 
  Result := Self <> [];
end;

function TRSButton.Enabled: Boolean; constref;
var
  Color: TCTS1Color;
begin
  if Self.Visible() then
  begin
    for Color in Self.EnabledColors do
      if SRL.CountColor(Color, Self.Bounds) > 0 then
        Exit(True);
  end;
end;

function TRSButton.Click: Boolean; constref;
begin
  Result := Self.Visible();
  if Result then
    Mouse.Click(Self.Bounds, MOUSE_LEFT);
end;

function TRSButton.Enable: Boolean; constref;
begin
  Result := Self.Enabled() or Self.Click();
end;

function TRSButton.Disable: Boolean; constref;
begin
  Result := not Self.Enabled() or Self.Click();
end;

function TRSButton.FindText(constref Text: String; constref Font: TFontSet; Color: Int32): Boolean; constref; overload;
begin
  Result := OCR.LocateText(Self.Bounds, Text, Font, [Color], 1);
end;

function TRSButton.FindText(constref Text: String; constref Font: TFontSet): Boolean; constref; overload;
begin
  Result := OCR.LocateText(Self.Bounds, Text, Font, [-1], 1);
end;

function TRSButton.FindText(Text: TStringArray; constref Font: TFontSet; out Found: String): Boolean; constref; overload;
var
  I: Int32;
begin
  for I := 0 to High(Text) do
    if Self.FindText(Text[I], Font) then
    begin
      Found := Text[I];
      
      Exit(True);
    end;
end;

procedure TMufasaBitmap.DrawButtons(Buttons: TRSButtonArray);
var
  I: Int32;
begin
  for I := 0 to High(Buttons) do
  begin
    Self.SetFontSize(20);
    Self.setFontAntialiasing(False);
    Self.DrawBox(Buttons[I].Bounds, False, $00FFFF);
    Self.DrawText(ToStr(Buttons[I].Index), Buttons[I].Bounds, True, $00FF00);
  end;
end;

procedure Debug(Buttons: TRSButtonArray); overload;
var
  BMP: TMufasaBitmap;
begin
  BMP.FromClient();
  BMP.DrawButtons(Buttons);
  BMP.Debug();
  BMP.Free();
end;

