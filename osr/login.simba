(*
Login
=====

Handles logging in players.

Summary: 

- Add players with `Login.AddPlayer`
- Login the current player with `Login.LoginPlayer`
- Switch to the next player with `Login.NextPlayer`

Example
-------

  Login.AddPlayer('myusername', 'mypassword');
  if not Login.LoginPlayer() then
    TerminateScript('Failed to login!');
*)

{$DEFINE SRL_LOGIN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSLoginPlayer = record
    User: String;
    Password: String;
    Pin: String; 
    Worlds: TIntegerArray;
    Active: Boolean;
  end;

  TRSLogin = record(TRSInterface)
    Players: array of TRSLoginPlayer;
    PlayerIndex: Int32;
    
    AllowDangerousWorlds: Boolean;
  end;

const
  LOGIN_MESSAGE_NONE = '';
  LOGIN_MESSAGE_CONNECTING = 'Connecting to server';
  LOGIN_MESSAGE_INVALID_CREDENTIALS = 'Invalid credentials';
  LOGIN_MESSAGE_NEED_SKILL_TOTAL = 'You need a skill total of';
  LOGIN_MESSAGE_INVALID_USER_PASS = 'Please enter your username/email address.';
  LOGIN_MESSAGE_ERROR_CONNECTING = 'Error connecting to server';
  LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT = 'Your account has not logged out';
  LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE = 'Login server offline';
  LOGIN_MESSAGE_ERROR_LOADING_PROFILE = 'Error loading your profile';
  LOGIN_MESSAGE_CONNECTION_TIMED_OUT = 'Connection timed out';
  LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED = 'Login limit exceeded';
  LOGIN_MESSAGE_WORLD_FULL = 'This world is full';
  LOGIN_MESSAGE_ACCOUNT_DISABLED = 'Your account has been disabled';
  LOGIN_MESSAGE_MEMBERS = 'You need a members account';
  LOGIN_MESSAGE_IN_MEMBERS_AREA = 'You are standing in a members-only area';
  LOGIN_MESSAGE_AUTHENTICATOR = 'Authenticator';

  LOGIN_MESSAGES = [
    LOGIN_MESSAGE_CONNECTING,
    LOGIN_MESSAGE_INVALID_CREDENTIALS,
    LOGIN_MESSAGE_NEED_SKILL_TOTAL,
    LOGIN_MESSAGE_INVALID_USER_PASS,
    LOGIN_MESSAGE_ERROR_CONNECTING,
    LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT,
    LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE,
    LOGIN_MESSAGE_ERROR_LOADING_PROFILE,
    LOGIN_MESSAGE_CONNECTION_TIMED_OUT,
    LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED,
    LOGIN_MESSAGE_WORLD_FULL,
    LOGIN_MESSAGE_ACCOUNT_DISABLED,
    LOGIN_MESSAGE_MEMBERS,
    LOGIN_MESSAGE_IN_MEMBERS_AREA
  ];
  
  LOGIN_DIALOG_OK = 'Ok';
  LOGIN_DIALOG_TRY_AGAIN = 'Try again';
  LOGIN_DIALOG_EXISTING_USER = 'Existing User';
  LOGIN_DIALOG_CONTINUE = 'Continue';
  
  LOGIN_DIALOGS = [
    LOGIN_DIALOG_OK,
    LOGIN_DIALOG_TRY_AGAIN,
    LOGIN_DIALOG_EXISTING_USER
  ];
  
  LOGIN_DIALOGS_DANGEROUS = [
    LOGIN_DIALOG_CONTINUE
  ];

function TRSLogin.FindText(Text: String; out B: TBox): Boolean; overload;
begin
  Result := (OCR.LocateText(Self.Bounds, Text, RS_FONT_BOLD_12,  [$FFFFFF], B) = 1) or
            (OCR.LocateText(Self.Bounds, Text, RS_FONT_BOLD_12,  [$00FFFF], B) = 1) or
            (OCR.LocateText(Self.Bounds, Text, RS_FONT_PLAIN_12, [$FFFFFF], B) = 1) or
            (OCR.LocateText(Self.Bounds, Text, RS_FONT_PLAIN_11, [$FFFFFF], B) = 1);
end;

function TRSLogin.FindText(Text: String): Boolean; overload;
var
  _: TBox;
begin
  Result := FindText(Text, _);
end;  

function TRSLogin.ClickText(Text: String): Boolean;
var
  B: TBox;
begin
  Result := FindText(Text, B);
  if Result then 
    Mouse.Click(B, MOUSE_LEFT);
end;

function TRSLogin.ClickWorld(World: Int32): Boolean;
var
  B: TBox;
begin
  Result := OCR.LocateText(Self.Bounds, ToString(World), RS_FONT_BOLD_12, [$000000], B) = 1;
  
  if Result then 
  begin
    if (not Self.AllowDangerousWorlds) then
    begin
      // normal free(silver) or members(gold) world
      if (SRL.CountColor(CTS1(4089471, 20), B) = 0) and
         (SRL.CountColor(CTS1(8421504, 25), B) = 0) then
        Self.Fatal('Not allowed to login to dangerous worlds (' + ToString(World) + ')');
    end;
    
    Mouse.Click(B, MOUSE_LEFT);
  end;
end;

function TRSLogin.IsOpen: Boolean;
begin
  Result := Self.FindText('Click to switch');
end;

function TRSLogin.IsWorldSwitcherOpen: Boolean;
begin
  Result := Self.FindText('Cancel');
end;

function TRSLogin.OpenWorldSwitcher: Boolean;
begin
  Result := ClickText('Click to switch') and WaitUntil(Self.IsWorldSwitcherOpen(), 500, 5000); 
end;

function TRSLogin.CloseWorldSwitcher: Boolean;
begin
  Result := Self.IsOpen() or (Self.ClickText('Cancel') and WaitUntil(Self.IsOpen(), 100, 1000));
end;

function TRSLogin.GetCurrentWorld: Int32;
var
  B: TBox;
begin
  if Self.CloseWorldSwitcher() and Self.FindText('Click to switch', B) then
  begin
    B.Y1 -= 25;
    
    Result := OCR.RecognizeNumber(B, [$FFFFFF], RS_FONT_BOLD_12);
  end;
end;

function TRSLogin.SwitchToWorld(World: Int32): Boolean;
begin
  if Self.GetCurrentWorld() = World then
    Exit(True);

  if Self.OpenWorldSwitcher() then
  begin
    for 1 to 3 do // Three pages of worlds
    begin
      if Self.ClickWorld(World) then
      begin
        Result := Self.GetCurrentWorld() = World;
        Exit;
      end;
      
      Keyboard.PressKey(VK_RIGHT);
      
      Wait(500, 5000, wdLeft);
    end;
  end;
end;

function TRSLogin.HandleDialogs: Boolean;
var
  Dialog: String;
begin
  for Dialog in LOGIN_DIALOGS do
    if Self.ClickText(' ' + Dialog + ' ') then
      Exit(True);
    
  for Dialog in LOGIN_DIALOGS_DANGEROUS do
    case Self.AllowDangerousWorlds of
      True:
        if Self.ClickText(' ' + Dialog + ' ') then
          Exit(True);
          
      False: 
        if Self.FindText(' ' + Dialog + ' ') then
          Self.Fatal('Not allowed to login to dangerous worlds (' + ToString(Self.GetCurrentWorld()) + ')');  
    end;
end;

function TRSLogin.EnterField(Field, Details: String): Boolean;
var
  B: TBox;
begin
  if Self.FindText(Details + ' ') then
    Exit(True);
  
  if Self.FindText(Field, B) then
  begin
    B.X1 := B.X2;
    B.X2 := B.X1 + 250;

    // Move caret
    while not WaitUntil(SRL.CountColor($00FFFF, B) > 15, 100, SRL.TruncatedGauss(800, 1600)) do
    begin
      if not Self.IsOpen() then 
        Exit(False);
      
      Keyboard.PressKey(VK_TAB);
    end;
  
    // Erase field
    while SRL.CountColor($FFFFFF, B) > 0 do
      Keyboard.PressKey(VK_BACK);
    Keyboard.Send(Details);
    
    Wait(0, 1000, wdLeft);
    
    Result := True;
  end;
end;

function TRSLogin.GetLoginMessage: String;
var
  I: Int32;
begin
  Result := LOGIN_MESSAGE_NONE;

  for I := 0 to High(LOGIN_MESSAGES) do
    if Self.FindText(LOGIN_MESSAGES[I]) then
    begin
      Result := LOGIN_MESSAGES[I];
      
      Exit;
    end;
end;

function TRSLogin.HandleMessage(Message: String): Boolean;
begin
  Self.DebugLn('Handling login message: ' + Message);

  case Message of
    // Cannot recover
    LOGIN_MESSAGE_MEMBERS,
    LOGIN_MESSAGE_IN_MEMBERS_AREA,
    LOGIN_MESSAGE_NEED_SKILL_TOTAL,
    LOGIN_MESSAGE_ACCOUNT_DISABLED,
    LOGIN_MESSAGE_AUTHENTICATOR:
      Result := False;

    // Retry
    LOGIN_MESSAGE_INVALID_CREDENTIALS,
    LOGIN_MESSAGE_INVALID_USER_PASS:
      Result := True;

    // Retry after ~15 seconds
    LOGIN_MESSAGE_ERROR_CONNECTING,
    LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT,
    LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE,
    LOGIN_MESSAGE_ERROR_LOADING_PROFILE,
    LOGIN_MESSAGE_CONNECTION_TIMED_OUT,
    LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED,
    LOGIN_MESSAGE_WORLD_FULL:
      begin
        Wait(10000, 20000);

        Result := True;
      end;

    // No handler
    else
      Self.Fatal('Unknown login message');
  end;
end;

function TRSLogin.EnterGame: Boolean;
var
  T: UInt64;
begin
  T := GetTickCount() + 2500;
  while (T > GetTickCount()) do
  begin
    if Self.ClickText('CLICK HERE TO PLAY') then
      Break;
      
    Wait(100);
  end;
  
  Result := RSClient.IsLoggedIn(5000);
end;

function TRSLogin.GetPlayer: TRSLoginPlayer;
begin
  if Self.Players = [] then
    Self.Fatal('No players declared');
  if not InRange(Self.PlayerIndex, Low(Self.Players), High(Self.Players)) then
    Self.Fatal('Player is out of range');

  Result := Self.Players[Self.PlayerIndex];
end;

function TRSLogin.LoginPlayer: Boolean;
var
  Message: String;
  Attempts, World: Int32;
  Player: TRSLoginPlayer;
begin
  Self.DebugLn('Logging in player');

  Player := Self.GetPlayer();
  if (Player.User = '') or (Player.Password = '') then
    Self.Fatal('Player has no username or password');

  while Self.IsOpen() and (Attempts < 10) do
  begin
    Self.DebugLn('Attempt ' + ToString(Attempts + 1));
    
    if (Player.Worlds <> []) and (not (Self.GetCurrentWorld() in Player.Worlds)) then
    begin
      World := Player.Worlds[Random(Length(Player.Worlds))];
      if (not Self.SwitchToWorld(World)) then
        Exit;
    end;
    
    if Self.HandleDialogs() then
      Wait(500);

    if Self.EnterField('Login:', Player.User) and
       Self.EnterField('Password:', Player.Password) then
    begin
      Keyboard.PressKey(VK_ENTER);
  
      while Self.IsOpen() and (Self.GetLoginMessage() in [LOGIN_MESSAGE_CONNECTING, LOGIN_MESSAGE_NONE]) do
        Wait(500);
  
      if Self.IsOpen() then
      begin
        Message := Self.GetLoginMessage();
        if not Self.HandleMessage(Message) then
          Exit(False);
      end;
    end;
    
    Inc(Attempts);
  end;

  Result := Self.EnterGame();
end;

procedure TRSLogin.AddPlayer(User, Pass: String; Pin: String = ''; Worlds: TIntegerArray = []);
begin
  Self.Players += [User, Pass, Pin, Worlds, True];
end;

procedure TRSLogin.NextPlayer(DisableCurrentPlayer: Boolean);
  
  function Next: Int32;
  var
    I: Int32;
  begin
    Result := -1;
    
    for I := Self.PlayerIndex + 1 to High(Self.Players) do
      if Self.Players[I].Active then
        Exit(I);
    for I := 0 to Self.PlayerIndex - 1 do // wrap around
      if Self.Players[I].Active then
        Exit(I);    
  end;
  
begin
  Self.Players[Self.PlayerIndex].Active := not DisableCurrentPlayer;
  
  Self.PlayerIndex := Next();
  if (Self.PlayerIndex = -1) then
    Self.Fatal('No other active players to switch to');
end;

function TRSLogin.GetPlayerPin: String;
begin
  Result := Self.GetPlayer.Pin;
  if (Length(Result) <> 4) or (not Result.IsDigit()) then
    Self.Fatal('Invalid bank pin'); 
end;

procedure TRSLogin.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
end;

procedure TRSLogin.Setup; override;
begin
  inherited;

  Self.Name := 'Login';
end;

procedure TRSLogin.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@RootInterface.X1];
  Self.Alignment.Right := [@RootInterface.X2];
  Self.Alignment.Top := [@RootInterface.Y1];
  Self.Alignment.Bottom := [@RootInterface.Y1, 502];
  Self.Alignment.Center := [764, 0];
end;

var
  Login: TRSLogin;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Login.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Login.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Login.Draw(Bitmap);
end;
